{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/ThreeViewer.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\n\nclass ThreeViewer extends Component {\n  componentDidMount() {\n    var worldsize = 6000;\n    var camera, scene, renderer;\n    this.scene = new THREE.Scene(); // scene.background = new THREE.Color( 0xf0f0f0 );\n\n    this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    window.addEventListener(\"resize\", onWindowResize, false);\n    this.mount.appendChild(this.renderer.domElement);\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.camera.position.set(0, 2000, 1500);\n    this.controls.update(); // const light = new THREE.AmbientLight(0xfbfbfb); // white light\n    // scene.add(light);\n\n    const raycaster = new THREE.Raycaster();\n    const mouse = new THREE.Vector2();\n    let INTERSECTED;\n    var cubesToBePicked = []; // gridPlane();\n\n    blocksInitial(); //axes();\n\n    render();\n\n    function axes() {\n      //axes + origin (optional)\n      const axesHelper = new THREE.AxesHelper(20);\n      this.scene.add(axesHelper);\n      const origingeometry = new THREE.BoxGeometry(1, 1, 1);\n      const originmaterial = new THREE.MeshBasicMaterial({\n        color: \"white\"\n      });\n      const origin = new THREE.Mesh(origingeometry, originmaterial);\n      this.scene.add(origin);\n    } // function gridPlane(){\n    //grid + background plane\n\n\n    var plane = new THREE.Mesh(new THREE.PlaneGeometry(worldsize, worldsize, 1), new THREE.MeshBasicMaterial({\n      color: \"grey\",\n      opacity: 0.3,\n      transparent: true\n    }));\n    plane.rotation.set(-Math.PI / 2, 0, 0);\n    this.scene.add(plane); //grid\n\n    var size = 3000,\n        step = 40;\n    var geometry, material, line;\n\n    for (let i = -size; i <= size; i += step) {\n      if (i / step % 2 === 0) {\n        continue;\n      }\n\n      geometry = new THREE.Geometry();\n      material = new THREE.LineBasicMaterial({\n        color: \"purple\"\n      });\n      geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n      geometry.vertices.push(new THREE.Vector3(size, 0, i));\n      line = new THREE.LineSegments(geometry, material);\n      this.scene.add(line);\n    }\n\n    for (let i = -size; i <= size; i += step) {\n      if (i / step % 2 === 0) {\n        continue;\n      }\n\n      geometry = new THREE.Geometry();\n      material = new THREE.LineBasicMaterial({\n        color: \"green\"\n      });\n      geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n      geometry.vertices.push(new THREE.Vector3(i, 0, size));\n      line = new THREE.LineSegments(geometry, material);\n      this.scene.add(line);\n    } // }\n\n\n    function blocksInitial() {\n      // blocks\n      var offset = 2000,\n          side = 50,\n          sidegap = 80;\n\n      for (let i = 0; i < allQuestions.length; i += 1) {\n        var questionIndex = Number(allQuestions[i][\"id\"]) - 1;\n        var bottommaterial;\n\n        if (allQuestions[i][\"difficulty\"] === \"1\") {\n          bottommaterial = new THREE.MeshBasicMaterial({\n            color: 0x00cc00\n          });\n        } else if (allQuestions[i][\"difficulty\"] === \"2\") {\n          bottommaterial = new THREE.MeshBasicMaterial({\n            color: 0xff9900\n          });\n        } else {\n          bottommaterial = new THREE.MeshBasicMaterial({\n            color: 0xD63333\n          });\n        }\n\n        var bottomgeometry = new THREE.BoxGeometry(60, 20, 60);\n        var row = Math.floor(questionIndex / side);\n        var col = questionIndex % side;\n        bottomgeometry.translate(col * sidegap - offset, 10, row * sidegap - offset);\n        var bottommesh = new THREE.Mesh(bottomgeometry, bottommaterial);\n        bottommesh.name = allQuestions[i][\"name\"];\n        this.scene.add(bottommesh);\n        cubesToBePicked.push(bottommesh);\n        window.addEventListener('mousemove', onMouseMove, false);\n      }\n    }\n\n    function onWindowResize() {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    function render() {\n      // update the picking ray with the camera and mouse position\n      // update the picking ray with the camera and mouse position\n      raycaster.setFromCamera(mouse, camera); // calculate objects intersecting the picking ray\n\n      const intersects = raycaster.intersectObjects(cubesToBePicked);\n\n      if (intersects.length > 0) {\n        // if the closest object intersected is not the currently stored intersection object\n        if (intersects[0].object != INTERSECTED) {\n          // restore previous intersection object (if it exists) to its original color\n          if (INTERSECTED) INTERSECTED.material.color.setHex(INTERSECTED.currentHex); // store reference to closest object as current intersection object\n\n          INTERSECTED = intersects[0].object; // store color of closest object (for later restoration)\n\n          INTERSECTED.currentHex = INTERSECTED.material.color.getHex(); // set a new color for closest object\n\n          INTERSECTED.material.color.setHex(0xFF00FF);\n        }\n      } else // there are no intersections\n        {\n          // restore previous intersection object (if it exists) to its original color\n          if (INTERSECTED) {\n            INTERSECTED.material.color.setHex(INTERSECTED.currentHex);\n          } // remove previous intersection object reference\n          //     by setting current intersection object to \"nothing\"\n\n\n          INTERSECTED = null;\n        }\n\n      requestAnimationFrame(render);\n      this.controls.update();\n      this.renderer.render(scene, camera);\n    }\n\n    function onMouseMove(event) {\n      mouse.x = event.clientX / window.innerWidth * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n    }\n  } // ------ three.js END ------\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"800px\",\n        height: \"800px\"\n      },\n      ref: mount => {\n        this.mount = mount;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default ThreeViewer;","map":{"version":3,"sources":["/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/ThreeViewer.js"],"names":["React","Component","ReactDOM","THREE","OrbitControls","allQuestions","ThreeViewer","componentDidMount","worldsize","camera","scene","renderer","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","antialias","setSize","addEventListener","onWindowResize","mount","appendChild","domElement","controls","position","set","update","raycaster","Raycaster","mouse","Vector2","INTERSECTED","cubesToBePicked","blocksInitial","render","axes","axesHelper","AxesHelper","add","origingeometry","BoxGeometry","originmaterial","MeshBasicMaterial","color","origin","Mesh","plane","PlaneGeometry","opacity","transparent","rotation","Math","PI","size","step","geometry","material","line","i","Geometry","LineBasicMaterial","vertices","push","Vector3","LineSegments","offset","side","sidegap","length","questionIndex","Number","bottommaterial","bottomgeometry","row","floor","col","translate","bottommesh","name","onMouseMove","aspect","updateProjectionMatrix","setFromCamera","intersects","intersectObjects","object","setHex","currentHex","getHex","requestAnimationFrame","event","x","clientX","y","clientY","width","height"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\n\nclass ThreeViewer extends Component {\n  componentDidMount() {\n    var worldsize = 6000;\n    var camera, scene, renderer;\n    this.scene = new THREE.Scene();\n    // scene.background = new THREE.Color( 0xf0f0f0 );\n    this.camera = new THREE.PerspectiveCamera(\n      45,\n      window.innerWidth / window.innerHeight,\n      1,\n      10000\n    );\n\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    window.addEventListener(\"resize\", onWindowResize, false);\n    this.mount.appendChild(this.renderer.domElement);\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.camera.position.set(0, 2000, 1500);\n    this.controls.update();\n    // const light = new THREE.AmbientLight(0xfbfbfb); // white light\n    // scene.add(light);\n    const raycaster = new THREE.Raycaster();\n    const mouse = new THREE.Vector2();\t\t\n    let INTERSECTED;\t\n    var cubesToBePicked = [];\n    // gridPlane();\n    blocksInitial();\n  \n    //axes();\n    render();\n    function axes(){\n      //axes + origin (optional)\n      const axesHelper = new THREE.AxesHelper( 20 );\n      this.scene.add( axesHelper );\n      const origingeometry = new THREE.BoxGeometry( 1, 1, 1 );\n      const originmaterial = new THREE.MeshBasicMaterial( {color: \"white\"} );\n      const origin = new THREE.Mesh( origingeometry, originmaterial );\n      this.scene.add( origin );\n    }\n    // function gridPlane(){\n      //grid + background plane\n      var plane = new THREE.Mesh(\n        new THREE.PlaneGeometry(worldsize, worldsize, 1),\n        new THREE.MeshBasicMaterial({\n          color: \"grey\",\n          opacity: 0.3,\n          transparent: true,\n        })\n      );\n      plane.rotation.set(-Math.PI / 2, 0, 0);\n      this.scene.add(plane);\n      //grid\n      var size = 3000,\n        step = 40;\n      var geometry, material, line;\n      for (let i = -size; i <= size; i += step) {\n        if ((i / step) % 2 === 0) {\n          continue;\n        }\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"purple\",\n        });\n        geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n        geometry.vertices.push(new THREE.Vector3(size, 0, i));\n        line = new THREE.LineSegments(geometry, material);\n        this.scene.add(line);\n      }\n      for (let i = -size; i <= size; i += step) {\n        if ((i / step) % 2 === 0) {\n          continue;\n        }\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"green\",\n        });\n        geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n        geometry.vertices.push(new THREE.Vector3(i, 0, size));\n        line = new THREE.LineSegments(geometry, material);\n        this.scene.add(line);\n      }\n    // }\n\n    function blocksInitial() {\n      // blocks\n      var offset = 2000,\n        side = 50,\n        sidegap = 80;\n      for (let i = 0; i < allQuestions.length; i += 1) {\n        var questionIndex = Number(allQuestions[i][\"id\"]) - 1;\n        var bottommaterial;\n        if (allQuestions[i][\"difficulty\"] === \"1\") {\n          bottommaterial = new THREE.MeshBasicMaterial({ color: 0x00cc00 });\n        } else if (allQuestions[i][\"difficulty\"] === \"2\") {\n          bottommaterial = new THREE.MeshBasicMaterial({ color: 0xff9900 });\n        } else {\n          bottommaterial = new THREE.MeshBasicMaterial({ color: 0xD63333 });\n        }\n        var bottomgeometry = new THREE.BoxGeometry(60, 20, 60);\n        var row = Math.floor(questionIndex / side);\n        var col = questionIndex % side;\n        bottomgeometry.translate(\n          col * sidegap - offset,\n          10,\n          row * sidegap - offset\n        );\n        var bottommesh = new THREE.Mesh(bottomgeometry, bottommaterial);\n        bottommesh.name = allQuestions[i][\"name\"];\n        this.scene.add(bottommesh);\n        cubesToBePicked.push(bottommesh);\n        window.addEventListener( 'mousemove', onMouseMove, false );\n      }\n    }\n\n    function onWindowResize() {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    function render() {\n      \t// update the picking ray with the camera and mouse position\n        // update the picking ray with the camera and mouse position\n        raycaster.setFromCamera( mouse, camera );\n  \n        // calculate objects intersecting the picking ray\n        const intersects = raycaster.intersectObjects( cubesToBePicked );\n        if ( intersects.length > 0 )\n        {\n            // if the closest object intersected is not the currently stored intersection object\n            if ( intersects[ 0 ].object != INTERSECTED )\n            {\n                // restore previous intersection object (if it exists) to its original color\n                if ( INTERSECTED )\n                    INTERSECTED.material.color.setHex( INTERSECTED.currentHex );\n                // store reference to closest object as current intersection object\n                INTERSECTED = intersects[ 0 ].object;\n                // store color of closest object (for later restoration)\n                INTERSECTED.currentHex = INTERSECTED.material.color.getHex();\n                // set a new color for closest object\n                INTERSECTED.material.color.setHex( 0xFF00FF );\n\n\n\n\n            }\n        }\n        else // there are no intersections\n        {\n            // restore previous intersection object (if it exists) to its original color\n            if ( INTERSECTED ){\n                INTERSECTED.material.color.setHex( INTERSECTED.currentHex );\n\n              }\n            // remove previous intersection object reference\n            //     by setting current intersection object to \"nothing\"\n\n\n            INTERSECTED = null;\n        \n        }\n\n\n      requestAnimationFrame(render);\n      this.controls.update();\n      this.renderer.render(scene, camera);\n    }\n\n    function onMouseMove( event ) {\n      mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n      mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\n    \n    }\n    \n  }\n\n  // ------ three.js END ------\n  render() {\n    return (\n        <div\n        style={{ width: \"800px\", height: \"800px\" }}\n          ref={mount => {\n            this.mount = mount;\n          }}\n        />\n      );\n  }\n}\nexport default ThreeViewer;"]},"metadata":{},"sourceType":"module"}
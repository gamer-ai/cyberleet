{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/ThreeViewer.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\n\nclass ThreeView extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      width: 0,\n      height: 0\n    };\n\n    this.updateDimensions = () => {\n      this.setState({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    };\n\n    this.start = () => {\n      if (!this.frameId) {\n        this.frameId = requestAnimationFrame(this.animate);\n      }\n    };\n\n    this.stop = () => {\n      cancelAnimationFrame(this.frameId);\n    };\n\n    this.animate = () => {\n      this.renderScene();\n      this.frameId = window.requestAnimationFrame(this.animate);\n    };\n\n    this.renderScene = () => {\n      // calculate objects intersecting the picking ray\n      const intersects = this.raycaster.intersectObjects(this.cubesToBePicked);\n\n      if (intersects.length > 0) {\n        // if the closest object intersected is not the currently stored intersection object\n        if (intersects[0].object != this.INTERSECTED) {\n          // restore previous intersection object (if it exists) to its original color\n          if (this.INTERSECTED) this.INTERSECTED.material.color.setHex(this.INTERSECTED.currentHex); // store reference to closest object as current intersection object\n\n          this.INTERSECTED = intersects[0].object; // store color of closest object (for later restoration)\n\n          this.INTERSECTED.currentHex = this.INTERSECTED.material.color.getHex(); // set a new color for closest object\n\n          this.INTERSECTED.material.color.setHex(0xFF00FF);\n        }\n      } else // there are no intersections\n        {\n          // restore previous intersection object (if it exists) to its original color\n          if (this.INTERSECTED) {\n            this.INTERSECTED.material.color.setHex(this.INTERSECTED.currentHex);\n          } // remove previous intersection object reference\n          //     by setting current intersection object to \"nothing\"\n\n\n          this.INTERSECTED = null;\n        }\n\n      if (this.renderer) this.renderer.render(this.scene, this.camera);\n      this.controls.update();\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.updateDimensions);\n    var that = this;\n    this.scene = new THREE.Scene(); //Add Renderer\n\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.mount.appendChild(this.renderer.domElement); //add Camera\n\n    this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);\n    this.camera.position.set(0, 2000, 1500); // mouse and raycaster\n\n    this.raycaster = new THREE.Raycaster();\n    this.mouse = new THREE.Vector2();\n    this.raycaster.setFromCamera(this.mouse, this.camera); //Camera Controls\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.update();\n    this.INTERSECTED = null;\n    this.cubesToBePicked = [];\n    this.addModels();\n    this.renderScene();\n    this.start();\n  }\n\n  addModels() {\n    var worldsize = 6000;\n    var plane = new THREE.Mesh(new THREE.PlaneGeometry(worldsize, worldsize, 1), new THREE.MeshBasicMaterial({\n      color: \"grey\",\n      opacity: 0.3,\n      transparent: true\n    }));\n    plane.rotation.set(-Math.PI / 2, 0, 0);\n    this.scene.add(plane); //grid\n\n    var size = 3000,\n        step = 40;\n    var geometry, material, line;\n\n    for (let i = -size; i <= size; i += step) {\n      if (i / step % 2 === 0) {\n        continue;\n      }\n\n      geometry = new THREE.Geometry();\n      material = new THREE.LineBasicMaterial({\n        color: \"purple\"\n      });\n      geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n      geometry.vertices.push(new THREE.Vector3(size, 0, i));\n      line = new THREE.LineSegments(geometry, material);\n      this.scene.add(line);\n    }\n\n    for (let i = -size; i <= size; i += step) {\n      if (i / step % 2 === 0) {\n        continue;\n      }\n\n      geometry = new THREE.Geometry();\n      material = new THREE.LineBasicMaterial({\n        color: \"green\"\n      });\n      geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n      geometry.vertices.push(new THREE.Vector3(i, 0, size));\n      line = new THREE.LineSegments(geometry, material);\n      this.scene.add(line);\n    }\n\n    var offset = 2000,\n        side = 50,\n        sidegap = 80;\n\n    for (let i = 0; i < allQuestions.length; i += 1) {\n      var questionIndex = Number(allQuestions[i][\"id\"]) - 1;\n      var bottommaterial;\n\n      if (allQuestions[i][\"difficulty\"] === \"1\") {\n        bottommaterial = new THREE.MeshBasicMaterial({\n          color: 0x00cc00\n        });\n      } else if (allQuestions[i][\"difficulty\"] === \"2\") {\n        bottommaterial = new THREE.MeshBasicMaterial({\n          color: 0xff9900\n        });\n      } else {\n        bottommaterial = new THREE.MeshBasicMaterial({\n          color: 0xD63333\n        });\n      }\n\n      var bottomgeometry = new THREE.BoxGeometry(60, 20, 60);\n      var row = Math.floor(questionIndex / side);\n      var col = questionIndex % side;\n      bottomgeometry.translate(col * sidegap - offset, 10, row * sidegap - offset);\n      var bottommesh = new THREE.Mesh(bottomgeometry, bottommaterial);\n      this.scene.add(bottommesh);\n      this.cubesToBePicked.push(bottommesh); //   window.addEventListener( 'mousemove', onMouseMove, false );\n    }\n  }\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n    window.removeEventListener('resize', this.updateDimensions);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: this.state.width,\n        height: this.state.height\n      },\n      ref: mount => {\n        this.mount = mount;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default ThreeView;","map":{"version":3,"sources":["/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/ThreeViewer.js"],"names":["React","Component","ReactDOM","THREE","OrbitControls","allQuestions","ThreeView","state","width","height","updateDimensions","setState","window","innerWidth","innerHeight","start","frameId","requestAnimationFrame","animate","stop","cancelAnimationFrame","renderScene","intersects","raycaster","intersectObjects","cubesToBePicked","length","object","INTERSECTED","material","color","setHex","currentHex","getHex","renderer","render","scene","camera","controls","update","componentDidMount","addEventListener","that","Scene","WebGLRenderer","antialias","setSize","mount","appendChild","domElement","PerspectiveCamera","position","set","Raycaster","mouse","Vector2","setFromCamera","addModels","worldsize","plane","Mesh","PlaneGeometry","MeshBasicMaterial","opacity","transparent","rotation","Math","PI","add","size","step","geometry","line","i","Geometry","LineBasicMaterial","vertices","push","Vector3","LineSegments","offset","side","sidegap","questionIndex","Number","bottommaterial","bottomgeometry","BoxGeometry","row","floor","col","translate","bottommesh","componentWillUnmount","removeChild","removeEventListener"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\n\nclass ThreeView extends Component {\n  state = { width: 0, height: 0 };\n  updateDimensions = () => {\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\n  };\n  componentDidMount() {\n    window.addEventListener('resize', this.updateDimensions);\n    var that = this;\n\n    this.scene = new THREE.Scene();\n\n    //Add Renderer\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.mount.appendChild(this.renderer.domElement);\n\n    //add Camera\n    this.camera = new THREE.PerspectiveCamera(\n        45,\n        window.innerWidth / window.innerHeight,\n        1,\n        10000\n      );\n    this.camera.position.set(0, 2000, 1500);\n\n    // mouse and raycaster\n    this.raycaster = new THREE.Raycaster();\n    this.mouse = new THREE.Vector2();\n    this.raycaster.setFromCamera( this.mouse, this.camera );\n    //Camera Controls\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.update();\n\n    \n    this.INTERSECTED = null;\t\n    this.cubesToBePicked = [];\n\n    this.addModels();\n    this.renderScene();\n    this.start();\n  }\n  \n  addModels() {\n\n    var worldsize = 6000;\n    var plane = new THREE.Mesh(\n        new THREE.PlaneGeometry(worldsize, worldsize, 1),\n        new THREE.MeshBasicMaterial({\n          color: \"grey\",\n          opacity: 0.3,\n          transparent: true,\n        })\n      );\n      plane.rotation.set(-Math.PI / 2, 0, 0);\n      this.scene.add(plane);\n      //grid\n      var size = 3000,\n        step = 40;\n      var geometry, material, line;\n      for (let i = -size; i <= size; i += step) {\n        if ((i / step) % 2 === 0) {\n          continue;\n        }\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"purple\",\n        });\n        geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n        geometry.vertices.push(new THREE.Vector3(size, 0, i));\n        line = new THREE.LineSegments(geometry, material);\n        this.scene.add(line);\n      }\n      for (let i = -size; i <= size; i += step) {\n        if ((i / step) % 2 === 0) {\n          continue;\n        }\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"green\",\n        });\n        geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n        geometry.vertices.push(new THREE.Vector3(i, 0, size));\n        line = new THREE.LineSegments(geometry, material);\n        this.scene.add(line);\n      }\n      var offset = 2000,\n      side = 50,\n      sidegap = 80;\n    for (let i = 0; i < allQuestions.length; i += 1) {\n      var questionIndex = Number(allQuestions[i][\"id\"]) - 1;\n      var bottommaterial;\n      if (allQuestions[i][\"difficulty\"] === \"1\") {\n        bottommaterial = new THREE.MeshBasicMaterial({ color: 0x00cc00 });\n      } else if (allQuestions[i][\"difficulty\"] === \"2\") {\n        bottommaterial = new THREE.MeshBasicMaterial({ color: 0xff9900 });\n      } else {\n        bottommaterial = new THREE.MeshBasicMaterial({ color: 0xD63333 });\n      }\n      var bottomgeometry = new THREE.BoxGeometry(60, 20, 60);\n      var row = Math.floor(questionIndex / side);\n      var col = questionIndex % side;\n      bottomgeometry.translate(\n        col * sidegap - offset,\n        10,\n        row * sidegap - offset\n      );\n      var bottommesh = new THREE.Mesh(bottomgeometry, bottommaterial);\n      this.scene.add(bottommesh);\n      this.cubesToBePicked.push(bottommesh);\n    //   window.addEventListener( 'mousemove', onMouseMove, false );\n    \n      \n    }\n\n\n  }\n\n\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n    window.removeEventListener('resize', this.updateDimensions);\n  }\n  start = () => {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  };\n\n\n  stop = () => {\n    cancelAnimationFrame(this.frameId);\n  };\n\n\n  animate = () => {\n    this.renderScene();\n    this.frameId = window.requestAnimationFrame(this.animate);\n  };\n\n  renderScene = () => {\n    // calculate objects intersecting the picking ray\n    const intersects = this.raycaster.intersectObjects( this.cubesToBePicked );\n    if ( intersects.length > 0 )\n    {\n        // if the closest object intersected is not the currently stored intersection object\n        if ( intersects[ 0 ].object != this.INTERSECTED )\n        {\n            // restore previous intersection object (if it exists) to its original color\n            if ( this.INTERSECTED )\n                this.INTERSECTED.material.color.setHex( this.INTERSECTED.currentHex );\n            // store reference to closest object as current intersection object\n            this.INTERSECTED = intersects[ 0 ].object;\n            // store color of closest object (for later restoration)\n            this.INTERSECTED.currentHex = this.INTERSECTED.material.color.getHex();\n            // set a new color for closest object\n            this.INTERSECTED.material.color.setHex( 0xFF00FF );\n\n        }\n\n    }\n    else // there are no intersections\n    {\n        // restore previous intersection object (if it exists) to its original color\n        if ( this.INTERSECTED ){\n            this.INTERSECTED.material.color.setHex( this.INTERSECTED.currentHex );\n          }\n        // remove previous intersection object reference\n        //     by setting current intersection object to \"nothing\"\n        \n        this.INTERSECTED = null;\n    \n    }\n    if (this.renderer) this.renderer.render(this.scene, this.camera);\n    this.controls.update();\n    \n\n  };\n\n  render() {\n    return (\n      <div\n        style={{ width: this.state.width, height: this.state.height }}\n        ref={mount => {\n          this.mount = mount;\n        }}\n      />\n    );\n  }\n}\nexport default ThreeView;"]},"metadata":{},"sourceType":"module"}
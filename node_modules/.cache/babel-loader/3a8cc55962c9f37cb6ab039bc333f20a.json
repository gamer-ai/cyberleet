{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/index.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\n\nclass App extends Component {\n  componentDidMount() {\n    // === THREE.JS CODE START ===\n    var worldsize = 6000;\n    var camera, scene, renderer;\n    scene = new THREE.Scene(); // scene.background = new THREE.Color( 0xf0f0f0 );\n\n    camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);\n    renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    window.addEventListener(\"resize\", onWindowResize, false);\n    document.body.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    camera.position.set(0, 2000, 1500);\n    controls.update();\n    const light = new THREE.AmbientLight(0xfbfbfb); // white light\n\n    scene.add(light);\n    gridPlane();\n    gridBackground(); //axes();\n\n    render();\n\n    function axes() {\n      //axes\n      const axesHelper = new THREE.AxesHelper(20);\n      scene.add(axesHelper);\n      const origingeometry = new THREE.BoxGeometry(1, 1, 1);\n      const originmaterial = new THREE.MeshBasicMaterial({\n        color: \"white\"\n      });\n      const origin = new THREE.Mesh(origingeometry, originmaterial);\n      scene.add(origin);\n    }\n\n    function gridPlane() {\n      var plane = new THREE.Mesh(new THREE.PlaneGeometry(worldsize, worldsize, 1), new THREE.MeshBasicMaterial({\n        color: \"grey\",\n        opacity: 0.3,\n        transparent: true\n      }));\n      plane.rotation.set(-Math.PI / 2, 0, 0);\n      scene.add(plane); //grid\n\n      var size = 3000,\n          step = 40;\n      var geometry, material, line;\n\n      for (let i = -size; i <= size; i += step) {\n        if (i / step % 2 == 0) {\n          continue;\n        }\n\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"purple\"\n        });\n        geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n        geometry.vertices.push(new THREE.Vector3(size, 0, i));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n      }\n\n      for (let i = -size; i <= size; i += step) {\n        if (i / step % 2 == 0) {\n          continue;\n        }\n\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"green\"\n        });\n        geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n        geometry.vertices.push(new THREE.Vector3(i, 0, size));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n      }\n    }\n\n    function gridBackground() {\n      var offset = 2000,\n          side = 50,\n          sidegap = 80;\n\n      for (let i = 0; i < allQuestions.length; i += 1) {\n        var questionIndex = Number(allQuestions[i][\"id\"]) - 1;\n\n        if (allQuestions[i][\"difficulty\"] == \"1\") {\n          var bottommaterial = new THREE.MeshBasicMaterial({\n            color: 0x00cc00\n          });\n        } else if (allQuestions[i][\"difficulty\"] == \"2\") {\n          var bottommaterial = new THREE.MeshBasicMaterial({\n            color: 0xff9900\n          });\n        } else {\n          var bottommaterial = new THREE.MeshBasicMaterial({\n            color: 0xD63333\n          });\n        }\n\n        var bottomgeometry = new THREE.BoxGeometry(60, 20, 60);\n        var row = Math.floor(questionIndex / side);\n        var col = questionIndex % side;\n        bottomgeometry.translate(col * sidegap - offset, 10, row * sidegap - offset);\n        var bottommesh = new THREE.Mesh(bottomgeometry, bottommaterial);\n        scene.add(bottommesh);\n      }\n    }\n\n    function onWindowResize() {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    function render() {\n      requestAnimationFrame(render);\n      controls.update();\n      renderer.render(scene, camera);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 131,\n  columnNumber: 17\n}, this), rootElement);","map":{"version":3,"sources":["/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/index.js"],"names":["React","Component","ReactDOM","THREE","OrbitControls","allQuestions","App","componentDidMount","worldsize","camera","scene","renderer","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","antialias","setSize","addEventListener","onWindowResize","document","body","appendChild","domElement","controls","position","set","update","light","AmbientLight","add","gridPlane","gridBackground","render","axes","axesHelper","AxesHelper","origingeometry","BoxGeometry","originmaterial","MeshBasicMaterial","color","origin","Mesh","plane","PlaneGeometry","opacity","transparent","rotation","Math","PI","size","step","geometry","material","line","i","Geometry","LineBasicMaterial","vertices","push","Vector3","LineSegments","offset","side","sidegap","length","questionIndex","Number","bottommaterial","bottomgeometry","row","floor","col","translate","bottommesh","aspect","updateProjectionMatrix","requestAnimationFrame","rootElement","getElementById"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,OAAOC,YAAP,MAAyB,iBAAzB;;AAEA,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;AAC1BM,EAAAA,iBAAiB,GAAG;AAClB;AACA,QAAIC,SAAS,GAAG,IAAhB;AACA,QAAIC,MAAJ,EAAYC,KAAZ,EAAmBC,QAAnB;AACAD,IAAAA,KAAK,GAAG,IAAIP,KAAK,CAACS,KAAV,EAAR,CAJkB,CAKlB;;AACAH,IAAAA,MAAM,GAAG,IAAIN,KAAK,CAACU,iBAAV,CACP,EADO,EAEPC,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACE,WAFpB,EAGP,CAHO,EAIP,KAJO,CAAT;AAOAL,IAAAA,QAAQ,GAAG,IAAIR,KAAK,CAACc,aAAV,CAAwB;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAxB,CAAX;AACAP,IAAAA,QAAQ,CAACQ,OAAT,CAAiBL,MAAM,CAACC,UAAxB,EAAoCD,MAAM,CAACE,WAA3C;AACAF,IAAAA,MAAM,CAACM,gBAAP,CAAwB,QAAxB,EAAkCC,cAAlC,EAAkD,KAAlD;AACAC,IAAAA,QAAQ,CAACC,IAAT,CAAcC,WAAd,CAA0Bb,QAAQ,CAACc,UAAnC;AACA,UAAMC,QAAQ,GAAG,IAAItB,aAAJ,CAAkBK,MAAlB,EAA0BE,QAAQ,CAACc,UAAnC,CAAjB;AACAhB,IAAAA,MAAM,CAACkB,QAAP,CAAgBC,GAAhB,CAAoB,CAApB,EAAuB,IAAvB,EAA6B,IAA7B;AACAF,IAAAA,QAAQ,CAACG,MAAT;AACA,UAAMC,KAAK,GAAG,IAAI3B,KAAK,CAAC4B,YAAV,CAAuB,QAAvB,CAAd,CApBkB,CAoB8B;;AAChDrB,IAAAA,KAAK,CAACsB,GAAN,CAAUF,KAAV;AACAG,IAAAA,SAAS;AACTC,IAAAA,cAAc,GAvBI,CAwBlB;;AACAC,IAAAA,MAAM;;AAEN,aAASC,IAAT,GAAe;AACb;AACA,YAAMC,UAAU,GAAG,IAAIlC,KAAK,CAACmC,UAAV,CAAsB,EAAtB,CAAnB;AACA5B,MAAAA,KAAK,CAACsB,GAAN,CAAWK,UAAX;AACA,YAAME,cAAc,GAAG,IAAIpC,KAAK,CAACqC,WAAV,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,CAAvB;AACA,YAAMC,cAAc,GAAG,IAAItC,KAAK,CAACuC,iBAAV,CAA6B;AAACC,QAAAA,KAAK,EAAE;AAAR,OAA7B,CAAvB;AACA,YAAMC,MAAM,GAAG,IAAIzC,KAAK,CAAC0C,IAAV,CAAgBN,cAAhB,EAAgCE,cAAhC,CAAf;AACA/B,MAAAA,KAAK,CAACsB,GAAN,CAAWY,MAAX;AACD;;AACD,aAASX,SAAT,GAAoB;AAClB,UAAIa,KAAK,GAAG,IAAI3C,KAAK,CAAC0C,IAAV,CACV,IAAI1C,KAAK,CAAC4C,aAAV,CAAwBvC,SAAxB,EAAmCA,SAAnC,EAA8C,CAA9C,CADU,EAEV,IAAIL,KAAK,CAACuC,iBAAV,CAA4B;AAC1BC,QAAAA,KAAK,EAAE,MADmB;AAE1BK,QAAAA,OAAO,EAAE,GAFiB;AAG1BC,QAAAA,WAAW,EAAE;AAHa,OAA5B,CAFU,CAAZ;AAQAH,MAAAA,KAAK,CAACI,QAAN,CAAetB,GAAf,CAAmB,CAACuB,IAAI,CAACC,EAAN,GAAW,CAA9B,EAAiC,CAAjC,EAAoC,CAApC;AACA1C,MAAAA,KAAK,CAACsB,GAAN,CAAUc,KAAV,EAVkB,CAWlB;;AACA,UAAIO,IAAI,GAAG,IAAX;AAAA,UACEC,IAAI,GAAG,EADT;AAEA,UAAIC,QAAJ,EAAcC,QAAd,EAAwBC,IAAxB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAACL,IAAd,EAAoBK,CAAC,IAAIL,IAAzB,EAA+BK,CAAC,IAAIJ,IAApC,EAA0C;AACxC,YAAKI,CAAC,GAAGJ,IAAL,GAAa,CAAb,IAAkB,CAAtB,EAAyB;AACvB;AACD;;AACDC,QAAAA,QAAQ,GAAG,IAAIpD,KAAK,CAACwD,QAAV,EAAX;AACAH,QAAAA,QAAQ,GAAG,IAAIrD,KAAK,CAACyD,iBAAV,CAA4B;AACrCjB,UAAAA,KAAK,EAAE;AAD8B,SAA5B,CAAX;AAGAY,QAAAA,QAAQ,CAACM,QAAT,CAAkBC,IAAlB,CAAuB,IAAI3D,KAAK,CAAC4D,OAAV,CAAkB,CAACV,IAAnB,EAAyB,CAAzB,EAA4BK,CAA5B,CAAvB;AACAH,QAAAA,QAAQ,CAACM,QAAT,CAAkBC,IAAlB,CAAuB,IAAI3D,KAAK,CAAC4D,OAAV,CAAkBV,IAAlB,EAAwB,CAAxB,EAA2BK,CAA3B,CAAvB;AACAD,QAAAA,IAAI,GAAG,IAAItD,KAAK,CAAC6D,YAAV,CAAuBT,QAAvB,EAAiCC,QAAjC,CAAP;AACA9C,QAAAA,KAAK,CAACsB,GAAN,CAAUyB,IAAV;AACD;;AACD,WAAK,IAAIC,CAAC,GAAG,CAACL,IAAd,EAAoBK,CAAC,IAAIL,IAAzB,EAA+BK,CAAC,IAAIJ,IAApC,EAA0C;AACxC,YAAKI,CAAC,GAAGJ,IAAL,GAAa,CAAb,IAAkB,CAAtB,EAAyB;AACvB;AACD;;AACDC,QAAAA,QAAQ,GAAG,IAAIpD,KAAK,CAACwD,QAAV,EAAX;AACAH,QAAAA,QAAQ,GAAG,IAAIrD,KAAK,CAACyD,iBAAV,CAA4B;AACrCjB,UAAAA,KAAK,EAAE;AAD8B,SAA5B,CAAX;AAGAY,QAAAA,QAAQ,CAACM,QAAT,CAAkBC,IAAlB,CAAuB,IAAI3D,KAAK,CAAC4D,OAAV,CAAkBL,CAAlB,EAAqB,CAArB,EAAwB,CAACL,IAAzB,CAAvB;AACAE,QAAAA,QAAQ,CAACM,QAAT,CAAkBC,IAAlB,CAAuB,IAAI3D,KAAK,CAAC4D,OAAV,CAAkBL,CAAlB,EAAqB,CAArB,EAAwBL,IAAxB,CAAvB;AACAI,QAAAA,IAAI,GAAG,IAAItD,KAAK,CAAC6D,YAAV,CAAuBT,QAAvB,EAAiCC,QAAjC,CAAP;AACA9C,QAAAA,KAAK,CAACsB,GAAN,CAAUyB,IAAV;AACD;AACF;;AAED,aAASvB,cAAT,GAA0B;AACxB,UAAI+B,MAAM,GAAG,IAAb;AAAA,UACEC,IAAI,GAAG,EADT;AAAA,UAEEC,OAAO,GAAG,EAFZ;;AAGA,WAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrD,YAAY,CAAC+D,MAAjC,EAAyCV,CAAC,IAAI,CAA9C,EAAiD;AAC/C,YAAIW,aAAa,GAAGC,MAAM,CAACjE,YAAY,CAACqD,CAAD,CAAZ,CAAgB,IAAhB,CAAD,CAAN,GAAgC,CAApD;;AACA,YAAIrD,YAAY,CAACqD,CAAD,CAAZ,CAAgB,YAAhB,KAAiC,GAArC,EAA0C;AACxC,cAAIa,cAAc,GAAG,IAAIpE,KAAK,CAACuC,iBAAV,CAA4B;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAA5B,CAArB;AACD,SAFD,MAEO,IAAItC,YAAY,CAACqD,CAAD,CAAZ,CAAgB,YAAhB,KAAiC,GAArC,EAA0C;AAC/C,cAAIa,cAAc,GAAG,IAAIpE,KAAK,CAACuC,iBAAV,CAA4B;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAA5B,CAArB;AACD,SAFM,MAEA;AACL,cAAI4B,cAAc,GAAG,IAAIpE,KAAK,CAACuC,iBAAV,CAA4B;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAA5B,CAArB;AACD;;AACD,YAAI6B,cAAc,GAAG,IAAIrE,KAAK,CAACqC,WAAV,CAAsB,EAAtB,EAA0B,EAA1B,EAA8B,EAA9B,CAArB;AACA,YAAIiC,GAAG,GAAGtB,IAAI,CAACuB,KAAL,CAAWL,aAAa,GAAGH,IAA3B,CAAV;AACA,YAAIS,GAAG,GAAGN,aAAa,GAAGH,IAA1B;AACAM,QAAAA,cAAc,CAACI,SAAf,CACED,GAAG,GAAGR,OAAN,GAAgBF,MADlB,EAEE,EAFF,EAGEQ,GAAG,GAAGN,OAAN,GAAgBF,MAHlB;AAKA,YAAIY,UAAU,GAAG,IAAI1E,KAAK,CAAC0C,IAAV,CAAe2B,cAAf,EAA+BD,cAA/B,CAAjB;AACA7D,QAAAA,KAAK,CAACsB,GAAN,CAAU6C,UAAV;AACD;AACF;;AAED,aAASxD,cAAT,GAA0B;AACxBZ,MAAAA,MAAM,CAACqE,MAAP,GAAgBhE,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACE,WAA3C;AACAP,MAAAA,MAAM,CAACsE,sBAAP;AAEApE,MAAAA,QAAQ,CAACQ,OAAT,CAAiBL,MAAM,CAACC,UAAxB,EAAoCD,MAAM,CAACE,WAA3C;AACD;;AAED,aAASmB,MAAT,GAAkB;AAChB6C,MAAAA,qBAAqB,CAAC7C,MAAD,CAArB;AACAT,MAAAA,QAAQ,CAACG,MAAT;AACAlB,MAAAA,QAAQ,CAACwB,MAAT,CAAgBzB,KAAhB,EAAuBD,MAAvB;AACD;AACF;;AACD0B,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAzHyB;;AA2H5B,MAAM8C,WAAW,GAAG3D,QAAQ,CAAC4D,cAAT,CAAwB,MAAxB,CAApB;AACAhF,QAAQ,CAACiC,MAAT,eAAgB,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAAyB8C,WAAzB","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\n\nclass App extends Component {\n  componentDidMount() {\n    // === THREE.JS CODE START ===\n    var worldsize = 6000;\n    var camera, scene, renderer;\n    scene = new THREE.Scene();\n    // scene.background = new THREE.Color( 0xf0f0f0 );\n    camera = new THREE.PerspectiveCamera(\n      45,\n      window.innerWidth / window.innerHeight,\n      1,\n      10000\n    );\n\n    renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    window.addEventListener(\"resize\", onWindowResize, false);\n    document.body.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    camera.position.set(0, 2000, 1500);\n    controls.update();\n    const light = new THREE.AmbientLight(0xfbfbfb); // white light\n    scene.add(light);\n    gridPlane();\n    gridBackground();\n    //axes();\n    render();\n\n    function axes(){\n      //axes\n      const axesHelper = new THREE.AxesHelper( 20 );\n      scene.add( axesHelper );\n      const origingeometry = new THREE.BoxGeometry( 1, 1, 1 );\n      const originmaterial = new THREE.MeshBasicMaterial( {color: \"white\"} );\n      const origin = new THREE.Mesh( origingeometry, originmaterial );\n      scene.add( origin );\n    }\n    function gridPlane(){\n      var plane = new THREE.Mesh(\n        new THREE.PlaneGeometry(worldsize, worldsize, 1),\n        new THREE.MeshBasicMaterial({\n          color: \"grey\",\n          opacity: 0.3,\n          transparent: true,\n        })\n      );\n      plane.rotation.set(-Math.PI / 2, 0, 0);\n      scene.add(plane);\n      //grid\n      var size = 3000,\n        step = 40;\n      var geometry, material, line;\n      for (let i = -size; i <= size; i += step) {\n        if ((i / step) % 2 == 0) {\n          continue;\n        }\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"purple\",\n        });\n        geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n        geometry.vertices.push(new THREE.Vector3(size, 0, i));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n      }\n      for (let i = -size; i <= size; i += step) {\n        if ((i / step) % 2 == 0) {\n          continue;\n        }\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"green\",\n        });\n        geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n        geometry.vertices.push(new THREE.Vector3(i, 0, size));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n      }\n    }\n\n    function gridBackground() {\n      var offset = 2000,\n        side = 50,\n        sidegap = 80;\n      for (let i = 0; i < allQuestions.length; i += 1) {\n        var questionIndex = Number(allQuestions[i][\"id\"]) - 1;\n        if (allQuestions[i][\"difficulty\"] == \"1\") {\n          var bottommaterial = new THREE.MeshBasicMaterial({ color: 0x00cc00 });\n        } else if (allQuestions[i][\"difficulty\"] == \"2\") {\n          var bottommaterial = new THREE.MeshBasicMaterial({ color: 0xff9900 });\n        } else {\n          var bottommaterial = new THREE.MeshBasicMaterial({ color: 0xD63333 });\n        }\n        var bottomgeometry = new THREE.BoxGeometry(60, 20, 60);\n        var row = Math.floor(questionIndex / side);\n        var col = questionIndex % side;\n        bottomgeometry.translate(\n          col * sidegap - offset,\n          10,\n          row * sidegap - offset\n        );\n        var bottommesh = new THREE.Mesh(bottomgeometry, bottommaterial);\n        scene.add(bottommesh);\n      }\n    }\n\n    function onWindowResize() {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    function render() {\n      requestAnimationFrame(render);\n      controls.update();\n      renderer.render(scene, camera);\n    }\n  }\n  render() {\n    return <div />;\n  }\n}\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}
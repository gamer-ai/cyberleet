{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/ThreeViewer.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nconst useStyles = makeStyles({\n  root: {\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    border: 0,\n    borderRadius: 3,\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    color: 'white',\n    height: 48,\n    padding: '0 30px'\n  }\n});\n\nclass ThreeView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questionName: 'ss'\n    };\n    this.changeDisplay = this.changeDisplay.bind(this);\n  }\n\n  changeDisplay(data) {\n    this.setState({\n      questionName: 'ssss'\n    });\n  }\n\n  componentDidMount() {\n    // --- three.js applied here ---\n    window.addEventListener(\"resize\", onWindowResize, false);\n    window.addEventListener('mousemove', onMouseMove, false);\n    var worldsize = 6000;\n    var camera, scene, renderer;\n    scene = new THREE.Scene(); // scene.background = new THREE.Color( 0xf0f0f0 );\n\n    camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);\n    renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight); // document.body.appendChild(renderer.domElement);\n\n    this.mount.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    camera.position.set(0, 2000, 1500);\n    controls.update(); // raycasting + mouse movement tracking\n\n    const raycaster = new THREE.Raycaster();\n    const mouse = new THREE.Vector2();\n    let INTERSECTED;\n    var cubesToBePicked = [];\n    gridPlane();\n    blocksInitial(); //axes();\n\n    render();\n\n    function axes() {\n      //axes + origin (optional)\n      const axesHelper = new THREE.AxesHelper(20);\n      scene.add(axesHelper);\n      const origingeometry = new THREE.BoxGeometry(1, 1, 1);\n      const originmaterial = new THREE.MeshBasicMaterial({\n        color: \"white\"\n      });\n      const origin = new THREE.Mesh(origingeometry, originmaterial);\n      scene.add(origin);\n    }\n\n    function gridPlane() {\n      //grid + background plane\n      var plane = new THREE.Mesh(new THREE.PlaneGeometry(worldsize, worldsize, 1), new THREE.MeshBasicMaterial({\n        color: \"grey\",\n        opacity: 0.3,\n        transparent: true\n      }));\n      plane.rotation.set(-Math.PI / 2, 0, 0);\n      scene.add(plane); //grid\n\n      var size = 3000,\n          step = 40;\n      var geometry, material, line;\n\n      for (let i = -size; i <= size; i += step) {\n        if (i / step % 2 === 0) {\n          continue;\n        }\n\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"purple\"\n        });\n        geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n        geometry.vertices.push(new THREE.Vector3(size, 0, i));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n      }\n\n      for (let i = -size; i <= size; i += step) {\n        if (i / step % 2 === 0) {\n          continue;\n        }\n\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"green\"\n        });\n        geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n        geometry.vertices.push(new THREE.Vector3(i, 0, size));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n      }\n    }\n\n    function blocksInitial() {\n      // blocks\n      var offset = 2000,\n          side = 50,\n          sidegap = 80;\n\n      for (let i = 0; i < allQuestions.length; i += 1) {\n        var questionIndex = Number(allQuestions[i][\"id\"]) - 1;\n        var bottommaterial;\n\n        if (allQuestions[i][\"difficulty\"] === \"1\") {\n          bottommaterial = new THREE.MeshBasicMaterial({\n            color: 0x00cc00\n          });\n        } else if (allQuestions[i][\"difficulty\"] === \"2\") {\n          bottommaterial = new THREE.MeshBasicMaterial({\n            color: 0xff9900\n          });\n        } else {\n          bottommaterial = new THREE.MeshBasicMaterial({\n            color: 0xD63333\n          });\n        }\n\n        var bottomgeometry = new THREE.BoxGeometry(60, 20, 60);\n        var row = Math.floor(questionIndex / side);\n        var col = questionIndex % side;\n        bottomgeometry.translate(col * sidegap - offset, 10, row * sidegap - offset);\n        var bottommesh = new THREE.Mesh(bottomgeometry, bottommaterial);\n        scene.add(bottommesh);\n        cubesToBePicked.push(bottommesh);\n      }\n    }\n\n    function onWindowResize() {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    function render() {\n      requestAnimationFrame(render);\n      controls.update();\n      renderer.render(scene, camera);\n    }\n\n    function onMouseMove(event) {\n      mouse.x = event.clientX / window.innerWidth * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(cubesToBePicked);\n\n      if (intersects.length > 0) {\n        if (intersects[0].object != INTERSECTED) {\n          if (INTERSECTED) INTERSECTED.material.color.setHex(INTERSECTED.currentHex);\n          INTERSECTED = intersects[0].object;\n          INTERSECTED.currentHex = INTERSECTED.material.color.getHex();\n          INTERSECTED.material.color.setHex(0xFF00FF);\n        }\n      } else //no intesections\n        {\n          if (INTERSECTED) {\n            INTERSECTED.material.color.setHex(INTERSECTED.currentHex);\n          }\n\n          INTERSECTED = null;\n        }\n    } // --- three.js parts end ---\n\n  }\n\n  render() {\n    const classes = useStyles();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"ThreeView\",\n        ref: mount => {\n          this.mount = mount;\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          className: classes.root,\n          children: \"Styled with Hook API\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ThreeView;","map":{"version":3,"sources":["/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/ThreeViewer.js"],"names":["React","Component","ReactDOM","THREE","OrbitControls","allQuestions","makeStyles","Button","useStyles","root","background","border","borderRadius","boxShadow","color","height","padding","ThreeView","constructor","props","state","questionName","changeDisplay","bind","data","setState","componentDidMount","window","addEventListener","onWindowResize","onMouseMove","worldsize","camera","scene","renderer","Scene","PerspectiveCamera","innerWidth","innerHeight","WebGLRenderer","antialias","setSize","mount","appendChild","domElement","controls","position","set","update","raycaster","Raycaster","mouse","Vector2","INTERSECTED","cubesToBePicked","gridPlane","blocksInitial","render","axes","axesHelper","AxesHelper","add","origingeometry","BoxGeometry","originmaterial","MeshBasicMaterial","origin","Mesh","plane","PlaneGeometry","opacity","transparent","rotation","Math","PI","size","step","geometry","material","line","i","Geometry","LineBasicMaterial","vertices","push","Vector3","LineSegments","offset","side","sidegap","length","questionIndex","Number","bottommaterial","bottomgeometry","row","floor","col","translate","bottommesh","aspect","updateProjectionMatrix","requestAnimationFrame","event","x","clientX","y","clientY","setFromCamera","intersects","intersectObjects","object","setHex","currentHex","getHex","classes"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles({\n    root: {\n      background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n      border: 0,\n      borderRadius: 3,\n      boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n      color: 'white',\n      height: 48,\n      padding: '0 30px',\n    },\n  });\nclass ThreeView extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {questionName: 'ss'}\n        this.changeDisplay = this.changeDisplay.bind(this)\n    }\n    \n     changeDisplay (data) {\n         this.setState({questionName: 'ssss'})\n     }\n    \n    componentDidMount() {\n        // --- three.js applied here ---\n        window.addEventListener(\"resize\", onWindowResize, false);\n        window.addEventListener('mousemove', onMouseMove, false);\n        var worldsize = 6000;\n        var camera, scene, renderer;\n        scene = new THREE.Scene();\n        // scene.background = new THREE.Color( 0xf0f0f0 );\n        camera = new THREE.PerspectiveCamera(\n            45,\n            window.innerWidth / window.innerHeight,\n            1,\n            10000\n        );\n        renderer = new THREE.WebGLRenderer({ antialias: true });\n        renderer.setSize(window.innerWidth, window.innerHeight);\n\n        // document.body.appendChild(renderer.domElement);\n        this.mount.appendChild(renderer.domElement);\n\n        const controls = new OrbitControls(camera, renderer.domElement);\n        camera.position.set(0, 2000, 1500);\n        controls.update();\n\n        // raycasting + mouse movement tracking\n        const raycaster = new THREE.Raycaster();\n        const mouse = new THREE.Vector2();\n        let INTERSECTED;\n        var cubesToBePicked = [];\n        gridPlane();\n        blocksInitial();\n        //axes();\n        render();\n\n        function axes() {\n            //axes + origin (optional)\n            const axesHelper = new THREE.AxesHelper(20);\n            scene.add(axesHelper);\n            const origingeometry = new THREE.BoxGeometry(1, 1, 1);\n            const originmaterial = new THREE.MeshBasicMaterial({ color: \"white\" });\n            const origin = new THREE.Mesh(origingeometry, originmaterial);\n            scene.add(origin);\n        }\n\n        function gridPlane() {\n            //grid + background plane\n            var plane = new THREE.Mesh(\n                new THREE.PlaneGeometry(worldsize, worldsize, 1),\n                new THREE.MeshBasicMaterial({\n                    color: \"grey\",\n                    opacity: 0.3,\n                    transparent: true,\n                })\n            );\n            plane.rotation.set(-Math.PI / 2, 0, 0);\n            scene.add(plane);\n            //grid\n            var size = 3000,\n                step = 40;\n            var geometry, material, line;\n            for (let i = -size; i <= size; i += step) {\n                if ((i / step) % 2 === 0) {\n                    continue;\n                }\n                geometry = new THREE.Geometry();\n                material = new THREE.LineBasicMaterial({\n                    color: \"purple\",\n                });\n                geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n                geometry.vertices.push(new THREE.Vector3(size, 0, i));\n                line = new THREE.LineSegments(geometry, material);\n                scene.add(line);\n            }\n            for (let i = -size; i <= size; i += step) {\n                if ((i / step) % 2 === 0) {\n                    continue;\n                }\n                geometry = new THREE.Geometry();\n                material = new THREE.LineBasicMaterial({\n                    color: \"green\",\n                });\n                geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n                geometry.vertices.push(new THREE.Vector3(i, 0, size));\n                line = new THREE.LineSegments(geometry, material);\n                scene.add(line);\n            }\n        }\n\n        function blocksInitial() {\n            // blocks\n            var offset = 2000,\n                side = 50,\n                sidegap = 80;\n            for (let i = 0; i < allQuestions.length; i += 1) {\n                var questionIndex = Number(allQuestions[i][\"id\"]) - 1;\n                var bottommaterial;\n                if (allQuestions[i][\"difficulty\"] === \"1\") {\n                    bottommaterial = new THREE.MeshBasicMaterial({ color: 0x00cc00 });\n                } else if (allQuestions[i][\"difficulty\"] === \"2\") {\n                    bottommaterial = new THREE.MeshBasicMaterial({ color: 0xff9900 });\n                } else {\n                    bottommaterial = new THREE.MeshBasicMaterial({ color: 0xD63333 });\n                }\n                var bottomgeometry = new THREE.BoxGeometry(60, 20, 60);\n                var row = Math.floor(questionIndex / side);\n                var col = questionIndex % side;\n                bottomgeometry.translate(\n                    col * sidegap - offset,\n                    10,\n                    row * sidegap - offset\n                );\n                var bottommesh = new THREE.Mesh(bottomgeometry, bottommaterial);\n                scene.add(bottommesh);\n                cubesToBePicked.push(bottommesh);\n\n            }\n        }\n\n        function onWindowResize() {\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(window.innerWidth, window.innerHeight);\n        }\n\n        function render() {\n            requestAnimationFrame(render);\n            controls.update();\n            renderer.render(scene, camera);\n        }\n     \n        function onMouseMove(event) {\n            mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n            mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;\n            raycaster.setFromCamera(mouse, camera);\n            const intersects = raycaster.intersectObjects(cubesToBePicked);\n            if (intersects.length > 0) {\n                if (intersects[0].object != INTERSECTED) {\n                    if (INTERSECTED)\n                        INTERSECTED.material.color.setHex(INTERSECTED.currentHex);\n                    INTERSECTED = intersects[0].object;\n                    INTERSECTED.currentHex = INTERSECTED.material.color.getHex();\n                    INTERSECTED.material.color.setHex(0xFF00FF);\n                }\n            }\n            else //no intesections\n            {\n                if (INTERSECTED) {\n                    INTERSECTED.material.color.setHex(INTERSECTED.currentHex);\n                }\n                INTERSECTED = null;\n            }\n\n        }\n        // --- three.js parts end ---\n\n    }\n\n\n    render() {\n        const classes = useStyles();\n        return (\n            \n            <div>\n            <div id = \"ThreeView\" ref={mount => {\n                this.mount = mount;\n              }}>\n            <Button className={classes.root}>Styled with Hook API</Button>\n\n\n              </div>\n \n            </div>\n        );\n    }\n}\nexport default ThreeView;"]},"metadata":{},"sourceType":"module"}
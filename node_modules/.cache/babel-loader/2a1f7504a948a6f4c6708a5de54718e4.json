{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/ThreeViewer.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\n\nclass ThreeView extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.start = () => {\n      if (!this.frameId) {\n        this.frameId = requestAnimationFrame(this.animate);\n      }\n    };\n\n    this.stop = () => {\n      cancelAnimationFrame(this.frameId);\n    };\n\n    this.animate = () => {\n      // -----Step 3--------\n      //Rotate Models\n      if (this.cube) this.cube.rotation.y += 0.01;\n      if (this.freedomMesh) this.freedomMesh.rotation.y += 0.01;\n      this.renderScene();\n      this.frameId = window.requestAnimationFrame(this.animate);\n    };\n\n    this.renderScene = () => {\n      if (this.renderer) this.renderer.render(this.scene, this.camera);\n    };\n  }\n\n  componentDidMount() {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n    this.scene = new THREE.Scene(); //Add Renderer\n\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    this.renderer.setSize(width, height);\n    this.mount.appendChild(this.renderer.domElement); //add Camera\n\n    this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    this.camera.position.z = 20;\n    this.camera.position.y = 5; //Camera Controls\n\n    const controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.addModels();\n    this.renderScene(); //start animation\n\n    this.start();\n  }\n\n  addModels() {\n    // -----Step 1--------\n    const geometry = new THREE.BoxGeometry(5, 5, 5);\n    const material = new THREE.MeshBasicMaterial({\n      color: \"#0F0\"\n    });\n    this.cube = new THREE.Mesh(geometry, material);\n    this.scene.add(this.cube);\n  }\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"800px\",\n        height: \"800px\"\n      },\n      ref: mount => {\n        this.mount = mount;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default ThreeView;","map":{"version":3,"sources":["/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/ThreeViewer.js"],"names":["React","Component","ReactDOM","THREE","OrbitControls","allQuestions","ThreeView","start","frameId","requestAnimationFrame","animate","stop","cancelAnimationFrame","cube","rotation","y","freedomMesh","renderScene","window","renderer","render","scene","camera","componentDidMount","width","mount","clientWidth","height","clientHeight","Scene","WebGLRenderer","antialias","setSize","appendChild","domElement","PerspectiveCamera","position","z","controls","addModels","geometry","BoxGeometry","material","MeshBasicMaterial","color","Mesh","add","componentWillUnmount","removeChild"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\n\nclass ThreeView extends Component {\n  componentDidMount() {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n    this.scene = new THREE.Scene();\n\n    //Add Renderer\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n    this.renderer.setSize(width, height);\n    this.mount.appendChild(this.renderer.domElement);\n\n    //add Camera\n    this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    this.camera.position.z = 20;\n    this.camera.position.y = 5;\n\n    //Camera Controls\n    const controls = new OrbitControls(this.camera, this.renderer.domElement);\n\n    this.addModels();\n\n    this.renderScene();\n    //start animation\n    this.start();\n  }\n\n  addModels() {\n    // -----Step 1--------\n    const geometry = new THREE.BoxGeometry(5, 5, 5);\n    const material = new THREE.MeshBasicMaterial({\n      color: \"#0F0\"\n    });\n    this.cube = new THREE.Mesh(geometry, material);\n    this.scene.add(this.cube);\n\n\n  }\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n  start = () => {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  };\n  stop = () => {\n    cancelAnimationFrame(this.frameId);\n  };\n  animate = () => {\n    // -----Step 3--------\n    //Rotate Models\n    if (this.cube) this.cube.rotation.y += 0.01;\n    if (this.freedomMesh) this.freedomMesh.rotation.y += 0.01;\n\n    this.renderScene();\n    this.frameId = window.requestAnimationFrame(this.animate);\n  };\n  renderScene = () => {\n    if (this.renderer) this.renderer.render(this.scene, this.camera);\n  };\n\n  render() {\n    return (\n      <div\n        style={{ width: \"800px\", height: \"800px\" }}\n        ref={mount => {\n          this.mount = mount;\n        }}\n      />\n    );\n  }\n}\nexport default ThreeView;"]},"metadata":{},"sourceType":"module"}
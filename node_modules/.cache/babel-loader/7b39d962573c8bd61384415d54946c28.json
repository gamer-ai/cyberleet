{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/ThreeViewer.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\n\nclass ThreeView extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.start = () => {\n      if (!this.frameId) {\n        this.frameId = requestAnimationFrame(this.animate);\n      }\n    };\n\n    this.stop = () => {\n      cancelAnimationFrame(this.frameId);\n    };\n\n    this.animate = () => {\n      // -----Step 3--------\n      //Rotate Models\n      if (this.cube) this.cube.rotation.y += 0.01;\n      if (this.freedomMesh) this.freedomMesh.rotation.y += 0.01;\n      this.renderScene();\n      this.frameId = window.requestAnimationFrame(this.animate);\n    };\n\n    this.renderScene = () => {\n      if (this.renderer) this.renderer.render(this.scene, this.camera);\n    };\n  }\n\n  componentDidMount() {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n    this.scene = new THREE.Scene(); //Add Renderer\n\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    this.renderer.setClearColor(\"#263238\");\n    this.renderer.setSize(width, height);\n    this.mount.appendChild(this.renderer.domElement); //add Camera\n\n    this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    this.camera.position.z = 20;\n    this.camera.position.y = 5; //Camera Controls\n\n    const controls = new OrbitControls(this.camera, this.renderer.domElement); //LIGHTS\n\n    var lights = [];\n    lights[0] = new THREE.PointLight(0x304ffe, 1, 0);\n    lights[1] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[2] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[0].position.set(0, 200, 0);\n    lights[1].position.set(100, 200, 100);\n    lights[2].position.set(-100, -200, -100);\n    this.scene.add(lights[0]);\n    this.scene.add(lights[1]);\n    this.scene.add(lights[2]); //Simple Box with WireFrame\n\n    this.addModels();\n    this.renderScene(); //start animation\n\n    this.start();\n  }\n\n  addModels() {\n    // -----Step 1--------\n    const geometry = new THREE.BoxGeometry(5, 5, 5);\n    const material = new THREE.MeshBasicMaterial({\n      color: \"#0F0\"\n    });\n    this.cube = new THREE.Mesh(geometry, material);\n    this.scene.add(this.cube); // -----Step 2--------\n    //LOAD TEXTURE and on completion apply it on SPHERE\n\n    new THREE.TextureLoader().load(\"https://images.pexels.com/photos/1089438/pexels-photo-1089438.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260\", texture => {\n      //Update Texture\n      this.cube.material.map = texture;\n      this.cube.material.needsUpdate = true;\n    }, xhr => {\n      //Download Progress\n      console.log(xhr.loaded / xhr.total * 100 + \"% loaded\");\n    }, error => {\n      //Error CallBack\n      console.log(\"An error happened\" + error);\n    }); // -----Step 4--------\n    //Loading 3d Models\n    //Loading Material First\n\n    var mtlLoader = new MTLLoader();\n    mtlLoader.setBaseUrl(\"./assets/\");\n    mtlLoader.load(\"freedom.mtl\", materials => {\n      materials.preload();\n      console.log(\"Material loaded\"); //Load Object Now and Set Material\n\n      var objLoader = new OBJLoader();\n      objLoader.setMaterials(materials);\n      objLoader.load(\"./assets/freedom.obj\", object => {\n        this.freedomMesh = object;\n        this.freedomMesh.position.setY(3); //or  this\n\n        this.freedomMesh.scale.set(0.02, 0.02, 0.02);\n        this.scene.add(this.freedomMesh);\n      }, xhr => {\n        console.log(xhr.loaded / xhr.total * 100 + \"% loaded\");\n      }, // called when loading has errors\n      error => {\n        console.log(\"An error happened\" + error);\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"800px\",\n        height: \"800px\"\n      },\n      ref: mount => {\n        this.mount = mount;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default ThreeViewer;","map":{"version":3,"sources":["/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/ThreeViewer.js"],"names":["React","Component","ReactDOM","THREE","OrbitControls","allQuestions","ThreeView","start","frameId","requestAnimationFrame","animate","stop","cancelAnimationFrame","cube","rotation","y","freedomMesh","renderScene","window","renderer","render","scene","camera","componentDidMount","width","mount","clientWidth","height","clientHeight","Scene","WebGLRenderer","antialias","setClearColor","setSize","appendChild","domElement","PerspectiveCamera","position","z","controls","lights","PointLight","set","add","addModels","geometry","BoxGeometry","material","MeshBasicMaterial","color","Mesh","TextureLoader","load","texture","map","needsUpdate","xhr","console","log","loaded","total","error","mtlLoader","MTLLoader","setBaseUrl","materials","preload","objLoader","OBJLoader","setMaterials","object","setY","scale","componentWillUnmount","removeChild","ThreeViewer"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\n\nclass ThreeView extends Component {\n  componentDidMount() {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n    this.scene = new THREE.Scene();\n\n    //Add Renderer\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n    this.renderer.setClearColor(\"#263238\");\n    this.renderer.setSize(width, height);\n    this.mount.appendChild(this.renderer.domElement);\n\n    //add Camera\n    this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    this.camera.position.z = 20;\n    this.camera.position.y = 5;\n\n    //Camera Controls\n    const controls = new OrbitControls(this.camera, this.renderer.domElement);\n\n    //LIGHTS\n    var lights = [];\n    lights[0] = new THREE.PointLight(0x304ffe, 1, 0);\n    lights[1] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[2] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[0].position.set(0, 200, 0);\n    lights[1].position.set(100, 200, 100);\n    lights[2].position.set(-100, -200, -100);\n    this.scene.add(lights[0]);\n    this.scene.add(lights[1]);\n    this.scene.add(lights[2]);\n\n    //Simple Box with WireFrame\n    this.addModels();\n\n    this.renderScene();\n    //start animation\n    this.start();\n  }\n\n  addModels() {\n    // -----Step 1--------\n    const geometry = new THREE.BoxGeometry(5, 5, 5);\n    const material = new THREE.MeshBasicMaterial({\n      color: \"#0F0\"\n    });\n    this.cube = new THREE.Mesh(geometry, material);\n    this.scene.add(this.cube);\n\n    // -----Step 2--------\n    //LOAD TEXTURE and on completion apply it on SPHERE\n    new THREE.TextureLoader().load(\n      \"https://images.pexels.com/photos/1089438/pexels-photo-1089438.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260\",\n      texture => {\n        //Update Texture\n        this.cube.material.map = texture;\n        this.cube.material.needsUpdate = true;\n      },\n      xhr => {\n        //Download Progress\n        console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n      },\n      error => {\n        //Error CallBack\n        console.log(\"An error happened\" + error);\n      }\n    );\n\n    // -----Step 4--------\n    //Loading 3d Models\n    //Loading Material First\n    var mtlLoader = new MTLLoader();\n    mtlLoader.setBaseUrl(\"./assets/\");\n    mtlLoader.load(\"freedom.mtl\", materials => {\n      materials.preload();\n      console.log(\"Material loaded\");\n      //Load Object Now and Set Material\n      var objLoader = new OBJLoader();\n      objLoader.setMaterials(materials);\n      objLoader.load(\n        \"./assets/freedom.obj\",\n        object => {\n          this.freedomMesh = object;\n          this.freedomMesh.position.setY(3); //or  this\n          this.freedomMesh.scale.set(0.02, 0.02, 0.02);\n          this.scene.add(this.freedomMesh);\n        },\n        xhr => {\n          console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n        },\n        // called when loading has errors\n        error => {\n          console.log(\"An error happened\" + error);\n        }\n      );\n    });\n  }\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n  start = () => {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  };\n  stop = () => {\n    cancelAnimationFrame(this.frameId);\n  };\n  animate = () => {\n    // -----Step 3--------\n    //Rotate Models\n    if (this.cube) this.cube.rotation.y += 0.01;\n    if (this.freedomMesh) this.freedomMesh.rotation.y += 0.01;\n\n    this.renderScene();\n    this.frameId = window.requestAnimationFrame(this.animate);\n  };\n  renderScene = () => {\n    if (this.renderer) this.renderer.render(this.scene, this.camera);\n  };\n\n  render() {\n    return (\n      <div\n        style={{ width: \"800px\", height: \"800px\" }}\n        ref={mount => {\n          this.mount = mount;\n        }}\n      />\n    );\n  }\n}\nexport default ThreeViewer;"]},"metadata":{},"sourceType":"module"}
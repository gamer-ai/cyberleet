{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/index.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\n\nclass App extends Component {\n  componentDidMount() {\n    // === THREE.JS CODE START ===\n    // load JSON file to start \n    // var request = new XMLHttpRequest();\n    // request.open(\"GET\", \"/data/all.json\", false);\n    // request.send(null);\n    // var all_questions = JSON.parse(request.responseText);\n    // alert (all_questions.result[0]);\n    var worldsize = 6000;\n    var camera, scene, renderer;\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);\n    renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    camera.position.set(0, 2000, 1500);\n    controls.update();\n    gridBackground();\n\n    function gridBackground() {\n      console.log(allQuestions);\n      var offset = 2000,\n          side = 50,\n          sidegap = 80;\n\n      for (let i = 0; i < allQuestions.length; i += 1) {\n        if (allQuestions[i]['difficulty'] == '1') {\n          var bottommaterial = new THREE.MeshBasicMaterial({\n            color: 0x00CC00\n          });\n        } else if (allQuestions[i]['difficulty'] == '2') {\n          var bottommaterial = new THREE.MeshBasicMaterial({\n            color: 0xFF9900\n          });\n        } else {\n          var bottommaterial = new THREE.MeshBasicMaterial({\n            color: 0xDE5C5C\n          });\n        }\n\n        var bottomgeometry = new THREE.BoxGeometry(60, 20, 60);\n        var row = Math.floor(i / side);\n        var col = i % side;\n        bottomgeometry.translate(col * sidegap - offset, 10, row * sidegap - offset);\n        var bottommesh = new THREE.Mesh(bottomgeometry, bottommaterial);\n        scene.add(bottommesh);\n      } // plane x-y\n\n\n      var plane = new THREE.Mesh(new THREE.PlaneGeometry(worldsize, worldsize, 1), new THREE.MeshBasicMaterial({\n        color: \"grey\",\n        opacity: 0.3,\n        transparent: true\n      }));\n      plane.rotation.set(-Math.PI / 2, 0, 0);\n      scene.add(plane); //axes\n      // const axesHelper = new THREE.AxesHelper( 20 );\n      // scene.add( axesHelper );\n      // const origingeometry = new THREE.BoxGeometry( 1, 1, 1 );\n      // const originmaterial = new THREE.MeshBasicMaterial( {color: \"white\"} );\n      // const origin = new THREE.Mesh( origingeometry, originmaterial );\n      // scene.add( origin );\n      //\n      // grid alternative:\n      // const gridsize = 2000;\n      // const divisions = 20;\n      // const gridHelper = new THREE.GridHelper( gridsize, divisions );\n      // scene.add( gridHelper );\n      //\n      //ambient light\n\n      const light = new THREE.AmbientLight(0xFBFBFB); // white light\n\n      scene.add(light); //   var basesize = 2000, basestep = 80;\n      //   for (let j = - basesize; j <= basesize; j += basestep) {\n      //     for (let i = - basesize; i <= basesize; i += basestep) {\n      //       var boxgeometry = new THREE.BoxGeometry(60,20,60);\n      //       var boxmaterial = new THREE.MeshNormalMaterial();\n      //       boxgeometry.translate( i, 10 , j);\n      //       var boxmesh = new THREE.Mesh( boxgeometry, boxmaterial );\n      //       scene.add( boxmesh );\n      //     }\n      // }\n      //grid\n\n      var size = 3000,\n          step = 40;\n      var geometry, material, line;\n\n      for (let i = -size; i <= size; i += step) {\n        if (i / step % 2 == 0) {\n          continue;\n        }\n\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"purple\"\n        });\n        geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n        geometry.vertices.push(new THREE.Vector3(size, 0, i));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n      }\n\n      for (let i = -size; i <= size; i += step) {\n        if (i / step % 2 == 0) {\n          continue;\n        }\n\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"green\"\n        });\n        geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n        geometry.vertices.push(new THREE.Vector3(i, 0, size));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n      } //grid\n\n\n      window.addEventListener('resize', onWindowResize, false); // call the render()\n\n      render();\n    }\n\n    function onWindowResize() {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    function render() {\n      requestAnimationFrame(render); // required if controls.enableDamping or controls.autoRotate are set to true\n\n      controls.update();\n      renderer.render(scene, camera);\n    } //---------grid above--------//\n    // const table = [\n    //   \"Two Sum\",\n    //   \"Add Two Numbers\"\n    // ];\n    // const difficultyLevel = [\"Easy\", \"Medium\"];\n    // var scene = new THREE.Scene();\n    // var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n    // const objects = [];\n    // const targets = { table: [], sphere: [], helix: [], grid: [] }\n    // for ( let i = 0; i < table.length; i += 1 ) {\n    // \t\t\tconst element = document.createElement( 'div' );\n    // \t\t\telement.className = 'element';\n    // \t\t\telement.style.backgroundColor = 'rgba(0,127,127,' + ( Math.random() * 0.5 + 0.25 ) + ')';\n    // \t\t\tconst number = document.createElement( 'div' );\n    // \t\t\tnumber.className = 'number';\n    // \t\t\tnumber.textContent = i + 1;\n    // \t\t\telement.appendChild( number );\n    // \t\t\tconst symbol = document.createElement( 'div' );\n    // \t\t\tsymbol.className = 'symbol';\n    // \t\t\tsymbol.textContent = table[ i ];\n    // \t\t\telement.appendChild( symbol );\n    // \t\t\tconst details = document.createElement( 'div' );\n    // \t\t\tdetails.className = 'details';\n    // \t\t\tdetails.innerHTML = difficultyLevel[ i ] + '<br>';\n    // \t\t\telement.appendChild( details );\n    // \t\t\tconst objectCSS = new CSS3DObject( element );\n    // \t\t\tobjectCSS.position.x = i*40;\n    // \t\t\tobjectCSS.position.y = 10;\n    // \t\t\tobjectCSS.position.z = 1;\n    // \t\t\tscene.add( objectCSS );\n    // \t\t\tobjects.push( objectCSS );\n    // \t\t\t//\n    // \t\t\tconst object = new THREE.Object3D();\n    // \t\t\tobject.position.x = ( i * 10 ) ;\n    // \t\t\tobject.position.y = -( i * 10  ) ;\n    // \t\t\ttargets.table.push( object );\n    // \t\t}\n    //     //\n    // var renderer = new CSS3DRenderer();\n    // renderer.setSize( window.innerWidth, window.innerHeight );\n    // document.body.appendChild( renderer.domElement );\n    // camera.position.z = 300;\n    // var animate = function () {\n    //    renderer.render( scene, camera );\n    // };\n    // animate();\n    // === THREE.JS EXAMPLE CODE END ===\n\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 211,\n  columnNumber: 17\n}, this), rootElement);","map":{"version":3,"sources":["/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/index.js"],"names":["React","Component","ReactDOM","THREE","OrbitControls","allQuestions","App","componentDidMount","worldsize","camera","scene","renderer","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","antialias","setSize","document","body","appendChild","domElement","controls","position","set","update","gridBackground","console","log","offset","side","sidegap","i","length","bottommaterial","MeshBasicMaterial","color","bottomgeometry","BoxGeometry","row","Math","floor","col","translate","bottommesh","Mesh","add","plane","PlaneGeometry","opacity","transparent","rotation","PI","light","AmbientLight","size","step","geometry","material","line","Geometry","LineBasicMaterial","vertices","push","Vector3","LineSegments","addEventListener","onWindowResize","render","aspect","updateProjectionMatrix","requestAnimationFrame","rootElement","getElementById"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,OAAOC,YAAP,MAAyB,iBAAzB;;AAEA,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;AAC1BM,EAAAA,iBAAiB,GAAG;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAIC,SAAS,GAAG,IAAhB;AACA,QAAIC,MAAJ,EAAYC,KAAZ,EAAmBC,QAAnB;AACAD,IAAAA,KAAK,GAAG,IAAIP,KAAK,CAACS,KAAV,EAAR;AACAH,IAAAA,MAAM,GAAG,IAAIN,KAAK,CAACU,iBAAV,CACP,EADO,EAEPC,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACE,WAFpB,EAGP,CAHO,EAIP,KAJO,CAAT;AASAL,IAAAA,QAAQ,GAAG,IAAIR,KAAK,CAACc,aAAV,CAAwB;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAxB,CAAX;AACAP,IAAAA,QAAQ,CAACQ,OAAT,CAAiBL,MAAM,CAACC,UAAxB,EAAoCD,MAAM,CAACE,WAA3C;AACAI,IAAAA,QAAQ,CAACC,IAAT,CAAcC,WAAd,CAA0BX,QAAQ,CAACY,UAAnC;AACA,UAAMC,QAAQ,GAAG,IAAIpB,aAAJ,CAAkBK,MAAlB,EAA0BE,QAAQ,CAACY,UAAnC,CAAjB;AACAd,IAAAA,MAAM,CAACgB,QAAP,CAAgBC,GAAhB,CAAoB,CAApB,EAAuB,IAAvB,EAA6B,IAA7B;AACAF,IAAAA,QAAQ,CAACG,MAAT;AACAC,IAAAA,cAAc;;AAEd,aAASA,cAAT,GAA0B;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAYzB,YAAZ;AACA,UAAI0B,MAAM,GAAG,IAAb;AAAA,UAAmBC,IAAI,GAAG,EAA1B;AAAA,UAA8BC,OAAO,GAAG,EAAxC;;AACA,WAAM,IAAIC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAG7B,YAAY,CAAC8B,MAAlC,EAA0CD,CAAC,IAAI,CAA/C,EAAmD;AACjD,YAAI7B,YAAY,CAAC6B,CAAD,CAAZ,CAAgB,YAAhB,KAAiC,GAArC,EAAyC;AACvC,cAAIE,cAAc,GAAG,IAAIjC,KAAK,CAACkC,iBAAV,CAA4B;AAACC,YAAAA,KAAK,EAAE;AAAR,WAA5B,CAArB;AACD,SAFD,MAGK,IAAIjC,YAAY,CAAC6B,CAAD,CAAZ,CAAgB,YAAhB,KAAiC,GAArC,EAAyC;AAC5C,cAAIE,cAAc,GAAG,IAAIjC,KAAK,CAACkC,iBAAV,CAA4B;AAACC,YAAAA,KAAK,EAAG;AAAT,WAA5B,CAArB;AACD,SAFI,MAGA;AACH,cAAIF,cAAc,GAAG,IAAIjC,KAAK,CAACkC,iBAAV,CAA4B;AAACC,YAAAA,KAAK,EAAE;AAAR,WAA5B,CAArB;AACD;;AACD,YAAIC,cAAc,GAAG,IAAIpC,KAAK,CAACqC,WAAV,CAAsB,EAAtB,EAAyB,EAAzB,EAA4B,EAA5B,CAArB;AACA,YAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWT,CAAC,GAAEF,IAAd,CAAV;AACA,YAAIY,GAAG,GAAGV,CAAC,GAAGF,IAAd;AACAO,QAAAA,cAAc,CAACM,SAAf,CAA0BD,GAAG,GAAGX,OAAN,GAAgBF,MAA1C,EAAkD,EAAlD,EAAuDU,GAAG,GAAGR,OAAN,GAAgBF,MAAvE;AACA,YAAIe,UAAU,GAAG,IAAI3C,KAAK,CAAC4C,IAAV,CAAgBR,cAAhB,EAAgCH,cAAhC,CAAjB;AACA1B,QAAAA,KAAK,CAACsC,GAAN,CAAWF,UAAX;AACD,OAnBuB,CAoBxB;;;AACA,UAAIG,KAAK,GAAG,IAAI9C,KAAK,CAAC4C,IAAV,CACV,IAAI5C,KAAK,CAAC+C,aAAV,CAAwB1C,SAAxB,EAAmCA,SAAnC,EAA8C,CAA9C,CADU,EAEV,IAAIL,KAAK,CAACkC,iBAAV,CAA4B;AACxBC,QAAAA,KAAK,EAAE,MADiB;AAExBa,QAAAA,OAAO,EAAE,GAFe;AAGxBC,QAAAA,WAAW,EAAC;AAHY,OAA5B,CAFU,CAAZ;AAOAH,MAAAA,KAAK,CAACI,QAAN,CAAe3B,GAAf,CAAmB,CAACgB,IAAI,CAACY,EAAN,GAAS,CAA5B,EAA8B,CAA9B,EAAgC,CAAhC;AACA5C,MAAAA,KAAK,CAACsC,GAAN,CAAUC,KAAV,EA7BwB,CAgCxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AACA,YAAMM,KAAK,GAAG,IAAIpD,KAAK,CAACqD,YAAV,CAAwB,QAAxB,CAAd,CAlDwB,CAkD0B;;AAClD9C,MAAAA,KAAK,CAACsC,GAAN,CAAWO,KAAX,EAnDwB,CAqD1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEE;;AACA,UAAIE,IAAI,GAAG,IAAX;AAAA,UAAiBC,IAAI,GAAG,EAAxB;AACA,UAAIC,QAAJ,EAAcC,QAAd,EAAwBC,IAAxB;;AACA,WAAK,IAAI3B,CAAC,GAAG,CAACuB,IAAd,EAAoBvB,CAAC,IAAIuB,IAAzB,EAA+BvB,CAAC,IAAIwB,IAApC,EAA0C;AACxC,YAAKxB,CAAC,GAAGwB,IAAL,GAAa,CAAb,IAAkB,CAAtB,EACA;AACI;AACH;;AACDC,QAAAA,QAAQ,GAAG,IAAIxD,KAAK,CAAC2D,QAAV,EAAX;AACAF,QAAAA,QAAQ,GAAG,IAAIzD,KAAK,CAAC4D,iBAAV,CAA4B;AACrCzB,UAAAA,KAAK,EAAE;AAD8B,SAA5B,CAAX;AAGAqB,QAAAA,QAAQ,CAACK,QAAT,CAAkBC,IAAlB,CAAuB,IAAI9D,KAAK,CAAC+D,OAAV,CAAkB,CAACT,IAAnB,EAAyB,CAAzB,EAA4BvB,CAA5B,CAAvB;AACAyB,QAAAA,QAAQ,CAACK,QAAT,CAAkBC,IAAlB,CAAuB,IAAI9D,KAAK,CAAC+D,OAAV,CAAkBT,IAAlB,EAAwB,CAAxB,EAA2BvB,CAA3B,CAAvB;AACA2B,QAAAA,IAAI,GAAG,IAAI1D,KAAK,CAACgE,YAAV,CAAuBR,QAAvB,EAAiCC,QAAjC,CAAP;AACAlD,QAAAA,KAAK,CAACsC,GAAN,CAAUa,IAAV;AACD;;AACD,WAAK,IAAI3B,CAAC,GAAG,CAACuB,IAAd,EAAoBvB,CAAC,IAAIuB,IAAzB,EAA+BvB,CAAC,IAAIwB,IAApC,EAA0C;AACxC,YAAKxB,CAAC,GAAGwB,IAAL,GAAa,CAAb,IAAkB,CAAtB,EACA;AACI;AACH;;AACDC,QAAAA,QAAQ,GAAG,IAAIxD,KAAK,CAAC2D,QAAV,EAAX;AACAF,QAAAA,QAAQ,GAAG,IAAIzD,KAAK,CAAC4D,iBAAV,CAA4B;AACrCzB,UAAAA,KAAK,EAAE;AAD8B,SAA5B,CAAX;AAGAqB,QAAAA,QAAQ,CAACK,QAAT,CAAkBC,IAAlB,CAAuB,IAAI9D,KAAK,CAAC+D,OAAV,CAAkBhC,CAAlB,EAAqB,CAArB,EAAwB,CAACuB,IAAzB,CAAvB;AACAE,QAAAA,QAAQ,CAACK,QAAT,CAAkBC,IAAlB,CAAuB,IAAI9D,KAAK,CAAC+D,OAAV,CAAkBhC,CAAlB,EAAqB,CAArB,EAAwBuB,IAAxB,CAAvB;AACAI,QAAAA,IAAI,GAAG,IAAI1D,KAAK,CAACgE,YAAV,CAAuBR,QAAvB,EAAiCC,QAAjC,CAAP;AACAlD,QAAAA,KAAK,CAACsC,GAAN,CAAUa,IAAV;AACD,OA9FuB,CA+FxB;;;AAEA/C,MAAAA,MAAM,CAACsD,gBAAP,CAAyB,QAAzB,EAAmCC,cAAnC,EAAmD,KAAnD,EAjGwB,CAkGxB;;AACAC,MAAAA,MAAM;AACP;;AACD,aAASD,cAAT,GAA0B;AAExB5D,MAAAA,MAAM,CAAC8D,MAAP,GAAgBzD,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACE,WAA3C;AACAP,MAAAA,MAAM,CAAC+D,sBAAP;AAEA7D,MAAAA,QAAQ,CAACQ,OAAT,CAAkBL,MAAM,CAACC,UAAzB,EAAqCD,MAAM,CAACE,WAA5C;AAED;;AACD,aAASsD,MAAT,GAAkB;AAChBG,MAAAA,qBAAqB,CAACH,MAAD,CAArB,CADgB,CAGhB;;AACA9C,MAAAA,QAAQ,CAACG,MAAT;AACAhB,MAAAA,QAAQ,CAAC2D,MAAT,CAAgB5D,KAAhB,EAAuBD,MAAvB;AACD,KAjJiB,CAmJlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACD;;AACD6D,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAzMyB;;AA2M5B,MAAMI,WAAW,GAAGtD,QAAQ,CAACuD,cAAT,CAAwB,MAAxB,CAApB;AACAzE,QAAQ,CAACoE,MAAT,eAAgB,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAAyBI,WAAzB","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\"\n\nclass App extends Component {\n  componentDidMount() {\n    \n    // === THREE.JS CODE START ===\n    // load JSON file to start \n    // var request = new XMLHttpRequest();\n    // request.open(\"GET\", \"/data/all.json\", false);\n    // request.send(null);\n    // var all_questions = JSON.parse(request.responseText);\n    // alert (all_questions.result[0]);\n\n    var worldsize = 6000;\n    var camera, scene, renderer;\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(\n      45,\n      window.innerWidth / window.innerHeight,\n      1,\n      10000\n    );\n\n\n\n    renderer = new THREE.WebGLRenderer({ antialias: true } );\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    camera.position.set(0, 2000, 1500);\n    controls.update();\n    gridBackground();\n\n    function gridBackground() {\n      console.log(allQuestions);\n      var offset = 2000, side = 50, sidegap = 80;\n      for ( let i = 0; i < allQuestions.length; i += 1 ) {\n        if (allQuestions[i]['difficulty'] == '1'){\n          var bottommaterial = new THREE.MeshBasicMaterial({color: 0x00CC00});\n        }\n        else if (allQuestions[i]['difficulty'] == '2'){\n          var bottommaterial = new THREE.MeshBasicMaterial({color:  0xFF9900});\n        }\n        else {\n          var bottommaterial = new THREE.MeshBasicMaterial({color: 0xDE5C5C});\n        }\n        var bottomgeometry = new THREE.BoxGeometry(60,20,60);\n        var row = Math.floor(i/ side);\n        var col = i % side;\n        bottomgeometry.translate( col * sidegap - offset, 10 , row * sidegap - offset);\n        var bottommesh = new THREE.Mesh( bottomgeometry, bottommaterial );\n        scene.add( bottommesh );\n      }\n      // plane x-y\n      var plane = new THREE.Mesh(\n        new THREE.PlaneGeometry(worldsize, worldsize, 1),\n        new THREE.MeshBasicMaterial({\n            color: \"grey\",\n            opacity: 0.3,\n            transparent:true\n        }));\n      plane.rotation.set(-Math.PI/2,0,0);\n      scene.add(plane);\n      \n\n      //axes\n      // const axesHelper = new THREE.AxesHelper( 20 );\n      // scene.add( axesHelper );\n      // const origingeometry = new THREE.BoxGeometry( 1, 1, 1 );\n      // const originmaterial = new THREE.MeshBasicMaterial( {color: \"white\"} );\n      // const origin = new THREE.Mesh( origingeometry, originmaterial );\n      // scene.add( origin );\n      //\n\n      // grid alternative:\n      // const gridsize = 2000;\n      // const divisions = 20;\n\n      // const gridHelper = new THREE.GridHelper( gridsize, divisions );\n      // scene.add( gridHelper );\n      //\n\n      //ambient light\n      const light = new THREE.AmbientLight( 0xFBFBFB ); // white light\n      scene.add( light );\n      \n    //   var basesize = 2000, basestep = 80;\n    //   for (let j = - basesize; j <= basesize; j += basestep) {\n    //     for (let i = - basesize; i <= basesize; i += basestep) {\n    //       var boxgeometry = new THREE.BoxGeometry(60,20,60);\n    //       var boxmaterial = new THREE.MeshNormalMaterial();\n    //       boxgeometry.translate( i, 10 , j);\n    //       var boxmesh = new THREE.Mesh( boxgeometry, boxmaterial );\n    //       scene.add( boxmesh );\n    //     }\n    // }\n\n      //grid\n      var size = 3000, step = 40;\n      var geometry, material, line;\n      for (let i = -size; i <= size; i += step) {\n        if ((i / step) % 2 == 0)\n        {\n            continue;\n        }\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"purple\"\n        });\n        geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n        geometry.vertices.push(new THREE.Vector3(size, 0, i));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n      }\n      for (let i = -size; i <= size; i += step) {\n        if ((i / step) % 2 == 0)\n        {\n            continue;\n        }\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"green\"\n        });\n        geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n        geometry.vertices.push(new THREE.Vector3(i, 0, size));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n      }\n      //grid\n\n      window.addEventListener( 'resize', onWindowResize, false );\n      // call the render()\n      render();\n    }\n    function onWindowResize() {\n\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n\n      renderer.setSize( window.innerWidth, window.innerHeight );\n\n    }\n    function render() {\n      requestAnimationFrame(render);\n\n      // required if controls.enableDamping or controls.autoRotate are set to true\n      controls.update();\n      renderer.render(scene, camera);\n    }\n\n    //---------grid above--------//\n    // const table = [\n    //   \"Two Sum\",\n    //   \"Add Two Numbers\"\n    // ];\n    // const difficultyLevel = [\"Easy\", \"Medium\"];\n    // var scene = new THREE.Scene();\n    // var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n    // const objects = [];\n    // const targets = { table: [], sphere: [], helix: [], grid: [] }\n    // for ( let i = 0; i < table.length; i += 1 ) {\n    // \t\t\tconst element = document.createElement( 'div' );\n    // \t\t\telement.className = 'element';\n    // \t\t\telement.style.backgroundColor = 'rgba(0,127,127,' + ( Math.random() * 0.5 + 0.25 ) + ')';\n    // \t\t\tconst number = document.createElement( 'div' );\n    // \t\t\tnumber.className = 'number';\n    // \t\t\tnumber.textContent = i + 1;\n    // \t\t\telement.appendChild( number );\n    // \t\t\tconst symbol = document.createElement( 'div' );\n    // \t\t\tsymbol.className = 'symbol';\n    // \t\t\tsymbol.textContent = table[ i ];\n    // \t\t\telement.appendChild( symbol );\n    // \t\t\tconst details = document.createElement( 'div' );\n    // \t\t\tdetails.className = 'details';\n    // \t\t\tdetails.innerHTML = difficultyLevel[ i ] + '<br>';\n    // \t\t\telement.appendChild( details );\n    // \t\t\tconst objectCSS = new CSS3DObject( element );\n    // \t\t\tobjectCSS.position.x = i*40;\n    // \t\t\tobjectCSS.position.y = 10;\n    // \t\t\tobjectCSS.position.z = 1;\n    // \t\t\tscene.add( objectCSS );\n    // \t\t\tobjects.push( objectCSS );\n    // \t\t\t//\n    // \t\t\tconst object = new THREE.Object3D();\n    // \t\t\tobject.position.x = ( i * 10 ) ;\n    // \t\t\tobject.position.y = -( i * 10  ) ;\n    // \t\t\ttargets.table.push( object );\n    // \t\t}\n    //     //\n\n    // var renderer = new CSS3DRenderer();\n    // renderer.setSize( window.innerWidth, window.innerHeight );\n    // document.body.appendChild( renderer.domElement );\n    // camera.position.z = 300;\n\n    // var animate = function () {\n    //    renderer.render( scene, camera );\n    // };\n    // animate();\n    // === THREE.JS EXAMPLE CODE END ===\n  }\n  render() {\n    return <div />;\n  }\n}\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}
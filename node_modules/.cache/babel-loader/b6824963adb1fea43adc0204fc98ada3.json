{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/index.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { TrackballControls } from \"./TrackballControls.js\";\nimport { OrbitControls } from \"./OrbitControls.js\";\n\nclass App extends Component {\n  componentDidMount() {\n    // === THREE.JS CODE START ===\n    var camera, scene, renderer;\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    camera.position.set(0, 20, 100);\n    controls.update();\n    gridBackground();\n\n    function gridBackground() {\n      const loader = new THREE.FontLoader();\n      const font = loader.load( // resource URL\n      '/Cyberpunk_Regular.json', // onLoad callback\n      function (font) {\n        // do something with the font\n        scene.add(font);\n      }, // onProgress callback\n      function (xhr) {\n        console.log(xhr.loaded / xhr.total * 100 + '% loaded');\n      }, // onError callback\n      function (err) {\n        console.log('An error happened');\n      }); //plane x-y\n      // var plane = new THREE.Mesh(\n      //   new THREE.PlaneGeometry(2000, 2000, 1),\n      //   new THREE.MeshBasicMaterial({\n      //       color: \"grey\",\n      //       opacity: 0.3,\n      //       transparent:true\n      //   }));\n      // plane.rotation.set(-Math.PI/2,0,0);\n      // scene.add(plane);\n      //\n      //axes\n\n      const axesHelper = new THREE.AxesHelper(20);\n      scene.add(axesHelper);\n      const origingeometry = new THREE.BoxGeometry(1, 1, 1);\n      const originmaterial = new THREE.MeshBasicMaterial({\n        color: \"white\"\n      });\n      const cube = new THREE.Mesh(origingeometry, originmaterial);\n      scene.add(cube); //\n      // grid alternative:\n      // const gridsize = 2000;\n      // const divisions = 20;\n      // const gridHelper = new THREE.GridHelper( gridsize, divisions );\n      // scene.add( gridHelper );\n      //\n      //ambient light\n\n      const light = new THREE.AmbientLight(0xFBFBFB); // white light\n\n      scene.add(light); //grid\n\n      var size = 1000,\n          step = 20;\n      var geometry, material, line;\n\n      for (let i = -size; i <= size; i += step) {\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"purple\"\n        });\n        geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n        geometry.vertices.push(new THREE.Vector3(size, 0, i));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n      }\n\n      for (let i = -size; i <= size; i += step) {\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"green\"\n        });\n        geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n        geometry.vertices.push(new THREE.Vector3(i, 0, size));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n      } //grid\n      // call the render()\n\n\n      render();\n    }\n\n    function render() {\n      requestAnimationFrame(render); // required if controls.enableDamping or controls.autoRotate are set to true\n\n      controls.update();\n      renderer.render(scene, camera);\n    } //---------grid above--------//\n    // const table = [\n    //   \"Two Sum\",\n    //   \"Add Two Numbers\"\n    // ];\n    // const difficultyLevel = [\"Easy\", \"Medium\"];\n    // var scene = new THREE.Scene();\n    // var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n    // const objects = [];\n    // const targets = { table: [], sphere: [], helix: [], grid: [] }\n    // for ( let i = 0; i < table.length; i += 1 ) {\n    // \t\t\tconst element = document.createElement( 'div' );\n    // \t\t\telement.className = 'element';\n    // \t\t\telement.style.backgroundColor = 'rgba(0,127,127,' + ( Math.random() * 0.5 + 0.25 ) + ')';\n    // \t\t\tconst number = document.createElement( 'div' );\n    // \t\t\tnumber.className = 'number';\n    // \t\t\tnumber.textContent = i + 1;\n    // \t\t\telement.appendChild( number );\n    // \t\t\tconst symbol = document.createElement( 'div' );\n    // \t\t\tsymbol.className = 'symbol';\n    // \t\t\tsymbol.textContent = table[ i ];\n    // \t\t\telement.appendChild( symbol );\n    // \t\t\tconst details = document.createElement( 'div' );\n    // \t\t\tdetails.className = 'details';\n    // \t\t\tdetails.innerHTML = difficultyLevel[ i ] + '<br>';\n    // \t\t\telement.appendChild( details );\n    // \t\t\tconst objectCSS = new CSS3DObject( element );\n    // \t\t\tobjectCSS.position.x = i*40;\n    // \t\t\tobjectCSS.position.y = 10;\n    // \t\t\tobjectCSS.position.z = 1;\n    // \t\t\tscene.add( objectCSS );\n    // \t\t\tobjects.push( objectCSS );\n    // \t\t\t//\n    // \t\t\tconst object = new THREE.Object3D();\n    // \t\t\tobject.position.x = ( i * 10 ) ;\n    // \t\t\tobject.position.y = -( i * 10  ) ;\n    // \t\t\ttargets.table.push( object );\n    // \t\t}\n    //     //\n    // var renderer = new CSS3DRenderer();\n    // renderer.setSize( window.innerWidth, window.innerHeight );\n    // document.body.appendChild( renderer.domElement );\n    // camera.position.z = 300;\n    // var animate = function () {\n    //    renderer.render( scene, camera );\n    // };\n    // animate();\n    // === THREE.JS EXAMPLE CODE END ===\n\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 182,\n  columnNumber: 17\n}, this), rootElement);","map":{"version":3,"sources":["/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/index.js"],"names":["React","Component","ReactDOM","THREE","TrackballControls","OrbitControls","App","componentDidMount","camera","scene","renderer","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","setSize","document","body","appendChild","domElement","controls","position","set","update","gridBackground","loader","FontLoader","font","load","add","xhr","console","log","loaded","total","err","axesHelper","AxesHelper","origingeometry","BoxGeometry","originmaterial","MeshBasicMaterial","color","cube","Mesh","light","AmbientLight","size","step","geometry","material","line","i","Geometry","LineBasicMaterial","vertices","push","Vector3","LineSegments","render","requestAnimationFrame","rootElement","getElementById"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { TrackballControls } from \"./TrackballControls.js\";\nimport { OrbitControls } from \"./OrbitControls.js\";\n\nclass App extends Component {\n  componentDidMount() {\n    // === THREE.JS CODE START ===\n    var camera, scene, renderer;\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(\n      45,\n      window.innerWidth / window.innerHeight,\n      1,\n      10000\n    );\n\n\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    camera.position.set(0, 20, 100);\n    controls.update();\n    gridBackground();\n\n    function gridBackground() {\n      const loader = new THREE.FontLoader();\n      const font = loader.load(\n        // resource URL\n        '/Cyberpunk_Regular.json',\n      \n        // onLoad callback\n        function ( font ) {\n          // do something with the font\n          scene.add( font );\n        },\n      \n        // onProgress callback\n        function ( xhr ) {\n          console.log( (xhr.loaded / xhr.total * 100) + '% loaded' );\n        },\n      \n        // onError callback\n        function ( err ) {\n          console.log( 'An error happened' );\n        }\n      );\n      //plane x-y\n      // var plane = new THREE.Mesh(\n      //   new THREE.PlaneGeometry(2000, 2000, 1),\n      //   new THREE.MeshBasicMaterial({\n      //       color: \"grey\",\n      //       opacity: 0.3,\n      //       transparent:true\n      //   }));\n      // plane.rotation.set(-Math.PI/2,0,0);\n      // scene.add(plane);\n      //\n\n      //axes\n      const axesHelper = new THREE.AxesHelper( 20 );\n      scene.add( axesHelper );\n      const origingeometry = new THREE.BoxGeometry( 1, 1, 1 );\n      const originmaterial = new THREE.MeshBasicMaterial( {color: \"white\"} );\n      const cube = new THREE.Mesh( origingeometry, originmaterial );\n      scene.add( cube );\n      //\n\n      // grid alternative:\n      // const gridsize = 2000;\n      // const divisions = 20;\n\n      // const gridHelper = new THREE.GridHelper( gridsize, divisions );\n      // scene.add( gridHelper );\n      //\n\n      //ambient light\n      const light = new THREE.AmbientLight( 0xFBFBFB ); // white light\n      scene.add( light );\n\n\n\n      //grid\n      var size = 1000, step = 20;\n      var geometry, material, line;\n      for (let i = -size; i <= size; i += step) {\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"purple\"\n        });\n        geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n        geometry.vertices.push(new THREE.Vector3(size, 0, i));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n\n\n  \n      }\n      for (let i = -size; i <= size; i += step) {\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"green\"\n        });\n        geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n        geometry.vertices.push(new THREE.Vector3(i, 0, size));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n      }\n      //grid\n\n      // call the render()\n      render();\n    }\n\n    function render() {\n      requestAnimationFrame(render);\n\n      // required if controls.enableDamping or controls.autoRotate are set to true\n      controls.update();\n      renderer.render(scene, camera);\n    }\n\n    //---------grid above--------//\n    // const table = [\n    //   \"Two Sum\",\n    //   \"Add Two Numbers\"\n    // ];\n    // const difficultyLevel = [\"Easy\", \"Medium\"];\n    // var scene = new THREE.Scene();\n    // var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n    // const objects = [];\n    // const targets = { table: [], sphere: [], helix: [], grid: [] }\n    // for ( let i = 0; i < table.length; i += 1 ) {\n    // \t\t\tconst element = document.createElement( 'div' );\n    // \t\t\telement.className = 'element';\n    // \t\t\telement.style.backgroundColor = 'rgba(0,127,127,' + ( Math.random() * 0.5 + 0.25 ) + ')';\n    // \t\t\tconst number = document.createElement( 'div' );\n    // \t\t\tnumber.className = 'number';\n    // \t\t\tnumber.textContent = i + 1;\n    // \t\t\telement.appendChild( number );\n    // \t\t\tconst symbol = document.createElement( 'div' );\n    // \t\t\tsymbol.className = 'symbol';\n    // \t\t\tsymbol.textContent = table[ i ];\n    // \t\t\telement.appendChild( symbol );\n    // \t\t\tconst details = document.createElement( 'div' );\n    // \t\t\tdetails.className = 'details';\n    // \t\t\tdetails.innerHTML = difficultyLevel[ i ] + '<br>';\n    // \t\t\telement.appendChild( details );\n    // \t\t\tconst objectCSS = new CSS3DObject( element );\n    // \t\t\tobjectCSS.position.x = i*40;\n    // \t\t\tobjectCSS.position.y = 10;\n    // \t\t\tobjectCSS.position.z = 1;\n    // \t\t\tscene.add( objectCSS );\n    // \t\t\tobjects.push( objectCSS );\n    // \t\t\t//\n    // \t\t\tconst object = new THREE.Object3D();\n    // \t\t\tobject.position.x = ( i * 10 ) ;\n    // \t\t\tobject.position.y = -( i * 10  ) ;\n    // \t\t\ttargets.table.push( object );\n    // \t\t}\n    //     //\n\n    // var renderer = new CSS3DRenderer();\n    // renderer.setSize( window.innerWidth, window.innerHeight );\n    // document.body.appendChild( renderer.domElement );\n    // camera.position.z = 300;\n\n    // var animate = function () {\n    //    renderer.render( scene, camera );\n    // };\n    // animate();\n    // === THREE.JS EXAMPLE CODE END ===\n  }\n  render() {\n    return <div />;\n  }\n}\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}
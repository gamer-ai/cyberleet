{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/index.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { TrackballControls } from \"./TrackballControls.js\";\nimport { OrbitControls } from \"./OrbitControls.js\";\n\nclass App extends Component {\n  componentDidMount() {\n    // === THREE.JS CODE START ===\n    var camera, scene, renderer;\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    camera.position.set(0, 20, 100);\n    controls.update();\n    gridBackground();\n\n    function gridBackground() {\n      var size = 1000,\n          step = 20;\n      var geometry, material, line;\n\n      for (let i = -size; i <= size; i += step) {\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"grey\",\n          linewidth: 100\n        });\n        geometry.vertices.push(new THREE.Vector3(-size, -1, i));\n        geometry.vertices.push(new THREE.Vector3(size, -1, i));\n        line = new THREE.Line(geometry, material);\n        scene.add(line);\n      }\n\n      for (let i = -size; i <= size; i += step) {\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"grey\",\n          linewidth: 100\n        });\n        geometry.vertices.push(new THREE.Vector3(i, -1, -size));\n        geometry.vertices.push(new THREE.Vector3(i, -1, size));\n        line = new THREE.Line(geometry, material);\n        scene.add(line);\n      }\n\n      render();\n    }\n\n    function render() {\n      requestAnimationFrame(render); // required if controls.enableDamping or controls.autoRotate are set to true\n\n      controls.update();\n      renderer.render(scene, camera);\n    } //---------grid above--------//\n    // const table = [\n    //   \"Two Sum\",\n    //   \"Add Two Numbers\"\n    // ];\n    // const difficultyLevel = [\"Easy\", \"Medium\"];\n    // var scene = new THREE.Scene();\n    // var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n    // const objects = [];\n    // const targets = { table: [], sphere: [], helix: [], grid: [] }\n    // for ( let i = 0; i < table.length; i += 1 ) {\n    // \t\t\tconst element = document.createElement( 'div' );\n    // \t\t\telement.className = 'element';\n    // \t\t\telement.style.backgroundColor = 'rgba(0,127,127,' + ( Math.random() * 0.5 + 0.25 ) + ')';\n    // \t\t\tconst number = document.createElement( 'div' );\n    // \t\t\tnumber.className = 'number';\n    // \t\t\tnumber.textContent = i + 1;\n    // \t\t\telement.appendChild( number );\n    // \t\t\tconst symbol = document.createElement( 'div' );\n    // \t\t\tsymbol.className = 'symbol';\n    // \t\t\tsymbol.textContent = table[ i ];\n    // \t\t\telement.appendChild( symbol );\n    // \t\t\tconst details = document.createElement( 'div' );\n    // \t\t\tdetails.className = 'details';\n    // \t\t\tdetails.innerHTML = difficultyLevel[ i ] + '<br>';\n    // \t\t\telement.appendChild( details );\n    // \t\t\tconst objectCSS = new CSS3DObject( element );\n    // \t\t\tobjectCSS.position.x = i*40;\n    // \t\t\tobjectCSS.position.y = 10;\n    // \t\t\tobjectCSS.position.z = 1;\n    // \t\t\tscene.add( objectCSS );\n    // \t\t\tobjects.push( objectCSS );\n    // \t\t\t//\n    // \t\t\tconst object = new THREE.Object3D();\n    // \t\t\tobject.position.x = ( i * 10 ) ;\n    // \t\t\tobject.position.y = -( i * 10  ) ;\n    // \t\t\ttargets.table.push( object );\n    // \t\t}\n    //     //\n    // var renderer = new CSS3DRenderer();\n    // renderer.setSize( window.innerWidth, window.innerHeight );\n    // document.body.appendChild( renderer.domElement );\n    // camera.position.z = 300;\n    // var animate = function () {\n    //    renderer.render( scene, camera );\n    // };\n    // animate();\n    // === THREE.JS EXAMPLE CODE END ===\n\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 119,\n  columnNumber: 17\n}, this), rootElement);","map":{"version":3,"sources":["/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/index.js"],"names":["React","Component","ReactDOM","THREE","TrackballControls","OrbitControls","App","componentDidMount","camera","scene","renderer","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","setSize","document","body","appendChild","domElement","controls","position","set","update","gridBackground","size","step","geometry","material","line","i","Geometry","LineBasicMaterial","color","linewidth","vertices","push","Vector3","Line","add","render","requestAnimationFrame","rootElement","getElementById"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { TrackballControls } from \"./TrackballControls.js\";\nimport { OrbitControls } from \"./OrbitControls.js\";\n\nclass App extends Component {\n  componentDidMount() {\n    // === THREE.JS CODE START ===\n    var camera, scene, renderer;\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(\n      45,\n      window.innerWidth / window.innerHeight,\n      1,\n      10000\n    );\n\n    renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    camera.position.set(0, 20, 100);\n    controls.update();\n    gridBackground();\n\n    function gridBackground() {\n      var size = 1000, step = 20;\n      var geometry, material, line;\n      for (let i = -size; i <= size; i += step) {\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"grey\",\n          linewidth: 100,\n        });\n        geometry.vertices.push(new THREE.Vector3(-size, -1, i));\n        geometry.vertices.push(new THREE.Vector3(size, -1, i));\n        line = new THREE.Line(geometry, material);\n        scene.add(line);\n      }\n      for (let i = -size; i <= size; i += step) {\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"grey\",\n          linewidth: 100,\n        });\n        geometry.vertices.push(new THREE.Vector3(i, -1, -size));\n        geometry.vertices.push(new THREE.Vector3(i, -1, size));\n        line = new THREE.Line(geometry, material);\n        scene.add(line);\n      }\n      render();\n    }\n\n    function render() {\n      requestAnimationFrame(render);\n\n      // required if controls.enableDamping or controls.autoRotate are set to true\n      controls.update();\n      renderer.render(scene, camera);\n    }\n\n    //---------grid above--------//\n    // const table = [\n    //   \"Two Sum\",\n    //   \"Add Two Numbers\"\n    // ];\n    // const difficultyLevel = [\"Easy\", \"Medium\"];\n    // var scene = new THREE.Scene();\n    // var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n    // const objects = [];\n    // const targets = { table: [], sphere: [], helix: [], grid: [] }\n    // for ( let i = 0; i < table.length; i += 1 ) {\n    // \t\t\tconst element = document.createElement( 'div' );\n    // \t\t\telement.className = 'element';\n    // \t\t\telement.style.backgroundColor = 'rgba(0,127,127,' + ( Math.random() * 0.5 + 0.25 ) + ')';\n    // \t\t\tconst number = document.createElement( 'div' );\n    // \t\t\tnumber.className = 'number';\n    // \t\t\tnumber.textContent = i + 1;\n    // \t\t\telement.appendChild( number );\n    // \t\t\tconst symbol = document.createElement( 'div' );\n    // \t\t\tsymbol.className = 'symbol';\n    // \t\t\tsymbol.textContent = table[ i ];\n    // \t\t\telement.appendChild( symbol );\n    // \t\t\tconst details = document.createElement( 'div' );\n    // \t\t\tdetails.className = 'details';\n    // \t\t\tdetails.innerHTML = difficultyLevel[ i ] + '<br>';\n    // \t\t\telement.appendChild( details );\n    // \t\t\tconst objectCSS = new CSS3DObject( element );\n    // \t\t\tobjectCSS.position.x = i*40;\n    // \t\t\tobjectCSS.position.y = 10;\n    // \t\t\tobjectCSS.position.z = 1;\n    // \t\t\tscene.add( objectCSS );\n    // \t\t\tobjects.push( objectCSS );\n    // \t\t\t//\n    // \t\t\tconst object = new THREE.Object3D();\n    // \t\t\tobject.position.x = ( i * 10 ) ;\n    // \t\t\tobject.position.y = -( i * 10  ) ;\n    // \t\t\ttargets.table.push( object );\n    // \t\t}\n    //     //\n\n    // var renderer = new CSS3DRenderer();\n    // renderer.setSize( window.innerWidth, window.innerHeight );\n    // document.body.appendChild( renderer.domElement );\n    // camera.position.z = 300;\n\n    // var animate = function () {\n    //    renderer.render( scene, camera );\n    // };\n    // animate();\n    // === THREE.JS EXAMPLE CODE END ===\n  }\n  render() {\n    return <div />;\n  }\n}\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/index.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\n\nclass App extends Component {\n  componentDidMount() {\n    // ------ three.js START ------\n    var worldsize = 6000;\n    var camera, scene, renderer;\n    scene = new THREE.Scene(); // scene.background = new THREE.Color( 0xf0f0f0 );\n\n    camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);\n    renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    window.addEventListener(\"resize\", onWindowResize, false);\n    document.body.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    camera.position.set(0, 2000, 1500);\n    controls.update();\n    const light = new THREE.AmbientLight(0xfbfbfb); // white light\n\n    scene.add(light);\n    const raycaster = new THREE.Raycaster();\n    const mouse = new THREE.Vector2();\n    raycaster.setFromCamera(mouse, camera);\n    window.addEventListener('mousemove', onMouseMove, false);\n    gridPlane();\n    blocksInitial(); //axes();\n\n    render();\n\n    function axes() {\n      //axes + origin (optional)\n      const axesHelper = new THREE.AxesHelper(20);\n      scene.add(axesHelper);\n      const origingeometry = new THREE.BoxGeometry(1, 1, 1);\n      const originmaterial = new THREE.MeshBasicMaterial({\n        color: \"white\"\n      });\n      const origin = new THREE.Mesh(origingeometry, originmaterial);\n      scene.add(origin);\n    }\n\n    function gridPlane() {\n      //grid + background plane\n      var plane = new THREE.Mesh(new THREE.PlaneGeometry(worldsize, worldsize, 1), new THREE.MeshBasicMaterial({\n        color: \"grey\",\n        opacity: 0.3,\n        transparent: true\n      }));\n      plane.rotation.set(-Math.PI / 2, 0, 0);\n      scene.add(plane); //grid\n\n      var size = 3000,\n          step = 40;\n      var geometry, material, line;\n\n      for (let i = -size; i <= size; i += step) {\n        if (i / step % 2 === 0) {\n          continue;\n        }\n\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"purple\"\n        });\n        geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n        geometry.vertices.push(new THREE.Vector3(size, 0, i));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n      }\n\n      for (let i = -size; i <= size; i += step) {\n        if (i / step % 2 === 0) {\n          continue;\n        }\n\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"green\"\n        });\n        geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n        geometry.vertices.push(new THREE.Vector3(i, 0, size));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n      }\n    }\n\n    function blocksInitial() {\n      // blocks\n      var offset = 2000,\n          side = 50,\n          sidegap = 80;\n\n      for (let i = 0; i < allQuestions.length; i += 1) {\n        var questionIndex = Number(allQuestions[i][\"id\"]) - 1;\n        var bottommaterial;\n\n        if (allQuestions[i][\"difficulty\"] === \"1\") {\n          bottommaterial = new THREE.MeshBasicMaterial({\n            color: 0x00cc00\n          });\n        } else if (allQuestions[i][\"difficulty\"] === \"2\") {\n          bottommaterial = new THREE.MeshBasicMaterial({\n            color: 0xff9900\n          });\n        } else {\n          bottommaterial = new THREE.MeshBasicMaterial({\n            color: 0xD63333\n          });\n        }\n\n        var bottomgeometry = new THREE.BoxGeometry(60, 20, 60);\n        var row = Math.floor(questionIndex / side);\n        var col = questionIndex % side;\n        bottomgeometry.translate(col * sidegap - offset, 10, row * sidegap - offset);\n        var bottommesh = new THREE.Mesh(bottomgeometry, bottommaterial);\n        scene.add(bottommesh);\n      }\n    }\n\n    function onWindowResize() {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    function render() {\n      requestAnimationFrame(render);\n      const intersects = raycaster.intersectObjects(scene.children);\n\n      for (let i = 0; i < intersects.length; i++) {\n        intersects[i].object.material.color.set(0xff0000);\n      }\n\n      controls.update();\n      renderer.render(scene, camera);\n    }\n\n    function onMouseMove(event) {\n      // calculate mouse position in normalized device coordinates\n      // (-1 to +1) for both components\n      mouse.x = event.clientX / window.innerWidth * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n    }\n  } // ------ three.js END ------\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 159,\n  columnNumber: 17\n}, this), rootElement);","map":{"version":3,"sources":["/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/index.js"],"names":["React","Component","ReactDOM","THREE","OrbitControls","allQuestions","App","componentDidMount","worldsize","camera","scene","renderer","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","antialias","setSize","addEventListener","onWindowResize","document","body","appendChild","domElement","controls","position","set","update","light","AmbientLight","add","raycaster","Raycaster","mouse","Vector2","setFromCamera","onMouseMove","gridPlane","blocksInitial","render","axes","axesHelper","AxesHelper","origingeometry","BoxGeometry","originmaterial","MeshBasicMaterial","color","origin","Mesh","plane","PlaneGeometry","opacity","transparent","rotation","Math","PI","size","step","geometry","material","line","i","Geometry","LineBasicMaterial","vertices","push","Vector3","LineSegments","offset","side","sidegap","length","questionIndex","Number","bottommaterial","bottomgeometry","row","floor","col","translate","bottommesh","aspect","updateProjectionMatrix","requestAnimationFrame","intersects","intersectObjects","children","object","event","x","clientX","y","clientY","rootElement","getElementById"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\n\nclass App extends Component {\n  componentDidMount() {\n    // ------ three.js START ------\n    var worldsize = 6000;\n    var camera, scene, renderer;\n    scene = new THREE.Scene();\n    // scene.background = new THREE.Color( 0xf0f0f0 );\n    camera = new THREE.PerspectiveCamera(\n      45,\n      window.innerWidth / window.innerHeight,\n      1,\n      10000\n    );\n\n    renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    window.addEventListener(\"resize\", onWindowResize, false);\n    document.body.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    camera.position.set(0, 2000, 1500);\n    controls.update();\n    const light = new THREE.AmbientLight(0xfbfbfb); // white light\n    scene.add(light);\n\n    const raycaster = new THREE.Raycaster();\n    const mouse = new THREE.Vector2();\n    raycaster.setFromCamera( mouse, camera );\n    window.addEventListener( 'mousemove', onMouseMove, false );\n\n    gridPlane();\n    blocksInitial();\n  \n    //axes();\n    render();\n\n    function axes(){\n      //axes + origin (optional)\n      const axesHelper = new THREE.AxesHelper( 20 );\n      scene.add( axesHelper );\n      const origingeometry = new THREE.BoxGeometry( 1, 1, 1 );\n      const originmaterial = new THREE.MeshBasicMaterial( {color: \"white\"} );\n      const origin = new THREE.Mesh( origingeometry, originmaterial );\n      scene.add( origin );\n    }\n    function gridPlane(){\n      //grid + background plane\n      var plane = new THREE.Mesh(\n        new THREE.PlaneGeometry(worldsize, worldsize, 1),\n        new THREE.MeshBasicMaterial({\n          color: \"grey\",\n          opacity: 0.3,\n          transparent: true,\n        })\n      );\n      plane.rotation.set(-Math.PI / 2, 0, 0);\n      scene.add(plane);\n      //grid\n      var size = 3000,\n        step = 40;\n      var geometry, material, line;\n      for (let i = -size; i <= size; i += step) {\n        if ((i / step) % 2 === 0) {\n          continue;\n        }\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"purple\",\n        });\n        geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n        geometry.vertices.push(new THREE.Vector3(size, 0, i));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n      }\n      for (let i = -size; i <= size; i += step) {\n        if ((i / step) % 2 === 0) {\n          continue;\n        }\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"green\",\n        });\n        geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n        geometry.vertices.push(new THREE.Vector3(i, 0, size));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n      }\n    }\n\n    function blocksInitial() {\n      // blocks\n      var offset = 2000,\n        side = 50,\n        sidegap = 80;\n      for (let i = 0; i < allQuestions.length; i += 1) {\n        var questionIndex = Number(allQuestions[i][\"id\"]) - 1;\n        var bottommaterial;\n        if (allQuestions[i][\"difficulty\"] === \"1\") {\n          bottommaterial = new THREE.MeshBasicMaterial({ color: 0x00cc00 });\n        } else if (allQuestions[i][\"difficulty\"] === \"2\") {\n          bottommaterial = new THREE.MeshBasicMaterial({ color: 0xff9900 });\n        } else {\n          bottommaterial = new THREE.MeshBasicMaterial({ color: 0xD63333 });\n        }\n        var bottomgeometry = new THREE.BoxGeometry(60, 20, 60);\n        var row = Math.floor(questionIndex / side);\n        var col = questionIndex % side;\n        bottomgeometry.translate(\n          col * sidegap - offset,\n          10,\n          row * sidegap - offset\n        );\n        var bottommesh = new THREE.Mesh(bottomgeometry, bottommaterial);\n        scene.add(bottommesh);\n      }\n    }\n\n    function onWindowResize() {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    function render() {\n      requestAnimationFrame(render);\n      const intersects = raycaster.intersectObjects( scene.children );\n\n      for ( let i = 0; i < intersects.length; i ++ ) {\n    \n        intersects[ i ].object.material.color.set( 0xff0000 );\n    \n      }\n      controls.update();\n      renderer.render(scene, camera);\n    }\n\n    function onMouseMove( event ) {\n      // calculate mouse position in normalized device coordinates\n      // (-1 to +1) for both components\n      mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n      mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\n    \n    }\n    \n  }\n\n  // ------ three.js END ------\n  render() {\n    return <div />;\n  }\n}\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}
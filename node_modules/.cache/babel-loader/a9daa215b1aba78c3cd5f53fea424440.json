{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/ThreeViewer.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\n\nclass ThreeView extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.start = () => {\n      if (!this.frameId) {\n        this.frameId = requestAnimationFrame(this.animate);\n      }\n    };\n\n    this.stop = () => {\n      cancelAnimationFrame(this.frameId);\n    };\n\n    this.animate = () => {\n      this.renderScene();\n      this.frameId = window.requestAnimationFrame(this.animate);\n    };\n\n    this.renderScene = () => {\n      this.raycaster.setFromCamera(mouse, this.camera);\n      window.addEventListener('mousemove', this.onMouseMove, false); // calculate objects intersecting the picking ray\n\n      const intersects = this.raycaster.intersectObjects(this.cubesToBePicked);\n\n      if (intersects.length > 0) {\n        // if the closest object intersected is not the currently stored intersection object\n        if (intersects[0].object != this.INTERSECTED) {\n          // restore previous intersection object (if it exists) to its original color\n          if (this.INTERSECTED) this.INTERSECTED.material.color.setHex(this.INTERSECTED.currentHex); // store reference to closest object as current intersection object\n\n          this.INTERSECTED = intersects[0].object; // store color of closest object (for later restoration)\n\n          this.INTERSECTED.currentHex = this.INTERSECTED.material.color.getHex(); // set a new color for closest object\n\n          this.INTERSECTED.material.color.setHex(0xFF00FF);\n        }\n      } else // there are no intersections\n        {\n          // restore previous intersection object (if it exists) to its original color\n          if (this.INTERSECTED) {\n            this.INTERSECTED.material.color.setHex(this.INTERSECTED.currentHex);\n          } // remove previous intersection object reference\n          //     by setting current intersection object to \"nothing\"\n\n\n          this.INTERSECTED = null;\n        }\n\n      if (this.renderer) this.renderer.render(this.scene, this.camera);\n    };\n  }\n\n  componentDidMount() {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n    this.scene = new THREE.Scene(); //Add Renderer\n\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    this.renderer.setSize(width, height);\n    this.mount.appendChild(this.renderer.domElement); //add Camera\n\n    this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);\n    this.camera.position.set(0, 2000, 1500); //Camera Controls\n\n    const controls = new OrbitControls(this.camera, this.renderer.domElement);\n    controls.update();\n    this.raycaster = new THREE.Raycaster();\n    var mouse = new THREE.Vector2();\n    this.INTERSECTED = null;\n    this.cubesToBePicked = [];\n    this.addModels();\n    this.renderScene(); //start animation\n\n    this.start();\n  }\n\n  addModels() {\n    // -----Step 1--------\n    var worldsize = 6000;\n    var plane = new THREE.Mesh(new THREE.PlaneGeometry(worldsize, worldsize, 1), new THREE.MeshBasicMaterial({\n      color: \"grey\",\n      opacity: 0.3,\n      transparent: true\n    }));\n    plane.rotation.set(-Math.PI / 2, 0, 0);\n    this.scene.add(plane); //grid\n\n    var size = 3000,\n        step = 40;\n    var geometry, material, line;\n\n    for (let i = -size; i <= size; i += step) {\n      if (i / step % 2 === 0) {\n        continue;\n      }\n\n      geometry = new THREE.Geometry();\n      material = new THREE.LineBasicMaterial({\n        color: \"purple\"\n      });\n      geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n      geometry.vertices.push(new THREE.Vector3(size, 0, i));\n      line = new THREE.LineSegments(geometry, material);\n      this.scene.add(line);\n    }\n\n    for (let i = -size; i <= size; i += step) {\n      if (i / step % 2 === 0) {\n        continue;\n      }\n\n      geometry = new THREE.Geometry();\n      material = new THREE.LineBasicMaterial({\n        color: \"green\"\n      });\n      geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n      geometry.vertices.push(new THREE.Vector3(i, 0, size));\n      line = new THREE.LineSegments(geometry, material);\n      this.scene.add(line);\n    }\n\n    var offset = 2000,\n        side = 50,\n        sidegap = 80;\n\n    for (let i = 0; i < allQuestions.length; i += 1) {\n      var questionIndex = Number(allQuestions[i][\"id\"]) - 1;\n      var bottommaterial;\n\n      if (allQuestions[i][\"difficulty\"] === \"1\") {\n        bottommaterial = new THREE.MeshBasicMaterial({\n          color: 0x00cc00\n        });\n      } else if (allQuestions[i][\"difficulty\"] === \"2\") {\n        bottommaterial = new THREE.MeshBasicMaterial({\n          color: 0xff9900\n        });\n      } else {\n        bottommaterial = new THREE.MeshBasicMaterial({\n          color: 0xD63333\n        });\n      }\n\n      var bottomgeometry = new THREE.BoxGeometry(60, 20, 60);\n      var row = Math.floor(questionIndex / side);\n      var col = questionIndex % side;\n      bottomgeometry.translate(col * sidegap - offset, 10, row * sidegap - offset);\n      var bottommesh = new THREE.Mesh(bottomgeometry, bottommaterial);\n      this.scene.add(bottommesh);\n      this.cubesToBePicked.push(bottommesh);\n    }\n  }\n\n  onMouseMove(event) {\n    // calculate mouse position in normalized device coordinates\n    // (-1 to +1) for both components\n    console.log(event.clientX);\n    console.log(event.clientY);\n    mouse.x = event.clientX / window.innerWidth * 2 - 1;\n    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n  }\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"800px\",\n        height: \"800px\"\n      },\n      ref: mount => {\n        this.mount = mount;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default ThreeView;","map":{"version":3,"sources":["/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/ThreeViewer.js"],"names":["React","Component","ReactDOM","THREE","OrbitControls","allQuestions","ThreeView","start","frameId","requestAnimationFrame","animate","stop","cancelAnimationFrame","renderScene","window","raycaster","setFromCamera","mouse","camera","addEventListener","onMouseMove","intersects","intersectObjects","cubesToBePicked","length","object","INTERSECTED","material","color","setHex","currentHex","getHex","renderer","render","scene","componentDidMount","width","mount","clientWidth","height","clientHeight","Scene","WebGLRenderer","antialias","setSize","appendChild","domElement","PerspectiveCamera","innerWidth","innerHeight","position","set","controls","update","Raycaster","Vector2","addModels","worldsize","plane","Mesh","PlaneGeometry","MeshBasicMaterial","opacity","transparent","rotation","Math","PI","add","size","step","geometry","line","i","Geometry","LineBasicMaterial","vertices","push","Vector3","LineSegments","offset","side","sidegap","questionIndex","Number","bottommaterial","bottomgeometry","BoxGeometry","row","floor","col","translate","bottommesh","event","console","log","clientX","clientY","x","y","componentWillUnmount","removeChild"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\n\nclass ThreeView extends Component {\n  componentDidMount() {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n    this.scene = new THREE.Scene();\n    //Add Renderer\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n    this.renderer.setSize(width, height);\n    this.mount.appendChild(this.renderer.domElement);\n\n    //add Camera\n    this.camera = new THREE.PerspectiveCamera(\n        45,\n        window.innerWidth / window.innerHeight,\n        1,\n        10000\n      );\n    this.camera.position.set(0, 2000, 1500);\n\n\n    //Camera Controls\n    const controls = new OrbitControls(this.camera, this.renderer.domElement);\n    controls.update();\n\n    this.raycaster = new THREE.Raycaster();\n    var mouse = new THREE.Vector2();\n   \n    this.INTERSECTED = null;\t\n    this.cubesToBePicked = [];\n\n    this.addModels();\n    \n\n    this.renderScene();\n    //start animation\n    this.start();\n  }\n  \n  addModels() {\n    // -----Step 1--------\n    var worldsize = 6000;\n\n    var plane = new THREE.Mesh(\n        new THREE.PlaneGeometry(worldsize, worldsize, 1),\n        new THREE.MeshBasicMaterial({\n          color: \"grey\",\n          opacity: 0.3,\n          transparent: true,\n        })\n      );\n      plane.rotation.set(-Math.PI / 2, 0, 0);\n      this.scene.add(plane);\n      //grid\n      var size = 3000,\n        step = 40;\n      var geometry, material, line;\n      for (let i = -size; i <= size; i += step) {\n        if ((i / step) % 2 === 0) {\n          continue;\n        }\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"purple\",\n        });\n        geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n        geometry.vertices.push(new THREE.Vector3(size, 0, i));\n        line = new THREE.LineSegments(geometry, material);\n        this.scene.add(line);\n      }\n      for (let i = -size; i <= size; i += step) {\n        if ((i / step) % 2 === 0) {\n          continue;\n        }\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"green\",\n        });\n        geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n        geometry.vertices.push(new THREE.Vector3(i, 0, size));\n        line = new THREE.LineSegments(geometry, material);\n        this.scene.add(line);\n      }\n      var offset = 2000,\n      side = 50,\n      sidegap = 80;\n    for (let i = 0; i < allQuestions.length; i += 1) {\n      var questionIndex = Number(allQuestions[i][\"id\"]) - 1;\n      var bottommaterial;\n      if (allQuestions[i][\"difficulty\"] === \"1\") {\n        bottommaterial = new THREE.MeshBasicMaterial({ color: 0x00cc00 });\n      } else if (allQuestions[i][\"difficulty\"] === \"2\") {\n        bottommaterial = new THREE.MeshBasicMaterial({ color: 0xff9900 });\n      } else {\n        bottommaterial = new THREE.MeshBasicMaterial({ color: 0xD63333 });\n      }\n      var bottomgeometry = new THREE.BoxGeometry(60, 20, 60);\n      var row = Math.floor(questionIndex / side);\n      var col = questionIndex % side;\n      bottomgeometry.translate(\n        col * sidegap - offset,\n        10,\n        row * sidegap - offset\n      );\n      var bottommesh = new THREE.Mesh(bottomgeometry, bottommaterial);\n      this.scene.add(bottommesh);\n      this.cubesToBePicked.push(bottommesh);\n      \n    }\n\n\n  }\n\nonMouseMove( event ) {\n    // calculate mouse position in normalized device coordinates\n    // (-1 to +1) for both components\n    console.log(event.clientX);\n    console.log(event.clientY);\n    mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n    mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\n  \n  }\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n  start = () => {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  };\n  stop = () => {\n    cancelAnimationFrame(this.frameId);\n  };\n  animate = () => {\n\n    this.renderScene();\n    this.frameId = window.requestAnimationFrame(this.animate);\n  };\n  renderScene = () => {\n    this.raycaster.setFromCamera( mouse, this.camera );\n    window.addEventListener( 'mousemove', this.onMouseMove, false );\n    // calculate objects intersecting the picking ray\n    const intersects = this.raycaster.intersectObjects( this.cubesToBePicked );\n    if ( intersects.length > 0 )\n    {\n        // if the closest object intersected is not the currently stored intersection object\n        if ( intersects[ 0 ].object != this.INTERSECTED )\n        {\n            // restore previous intersection object (if it exists) to its original color\n            if ( this.INTERSECTED )\n                this.INTERSECTED.material.color.setHex( this.INTERSECTED.currentHex );\n            // store reference to closest object as current intersection object\n            this.INTERSECTED = intersects[ 0 ].object;\n            // store color of closest object (for later restoration)\n            this.INTERSECTED.currentHex = this.INTERSECTED.material.color.getHex();\n            // set a new color for closest object\n            this.INTERSECTED.material.color.setHex( 0xFF00FF );\n\n        }\n    }\n    else // there are no intersections\n    {\n        // restore previous intersection object (if it exists) to its original color\n        if ( this.INTERSECTED ){\n            this.INTERSECTED.material.color.setHex( this.INTERSECTED.currentHex );\n          }\n        // remove previous intersection object reference\n        //     by setting current intersection object to \"nothing\"\n        \n        this.INTERSECTED = null;\n    \n    }\n    if (this.renderer) this.renderer.render(this.scene, this.camera);\n  };\n\n  render() {\n    return (\n      <div\n        style={{ width: \"800px\", height: \"800px\" }}\n        ref={mount => {\n          this.mount = mount;\n        }}\n      />\n    );\n  }\n}\nexport default ThreeView;"]},"metadata":{},"sourceType":"module"}
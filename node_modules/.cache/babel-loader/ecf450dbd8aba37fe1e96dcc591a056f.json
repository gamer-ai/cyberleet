{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/ThreeView.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\nimport \"./ThreeView.css\";\nimport Swal from 'sweetalert2';\n\nclass ThreeView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questionName: '',\n      questionData: ''\n    };\n    this.animate = this.animate.bind(this);\n    this.onMouseDown = this.onMouseDown.bind(this);\n    this.onWindowResize = this.onWindowResize.bind(this);\n    this.initializeCamera = this.initializeCamera.bind(this); // this.initializeOrbits = this.initializeOrbits.bind(this);\n  }\n\n  componentDidMount() {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.update();\n    this.renderer.setSize(width, height);\n    this.mount.appendChild(this.renderer.domElement); // this.initializeOrbits();\n\n    this.initializeCamera();\n    this.cubesToBePicked = [];\n    this.raycaster = new THREE.Raycaster();\n    this.mouse = new THREE.Vector2();\n    this.INTERSECTED = null;\n    var worldsize = 6000;\n    this.plane = new THREE.Mesh(new THREE.PlaneGeometry(worldsize, worldsize, 1), new THREE.MeshBasicMaterial({\n      color: \"grey\",\n      opacity: 0.3,\n      transparent: true\n    }));\n    this.plane.rotation.set(-Math.PI / 2, 0, 0);\n    this.scene.add(this.plane);\n    var size = 3000,\n        step = 40;\n    var geometry, material, line;\n\n    for (let i = -size; i <= size; i += step) {\n      if (i / step % 2 === 0) {\n        continue;\n      }\n\n      geometry = new THREE.Geometry();\n      material = new THREE.LineBasicMaterial({\n        color: \"purple\"\n      });\n      geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n      geometry.vertices.push(new THREE.Vector3(size, 0, i));\n      this.line = new THREE.LineSegments(geometry, material);\n      this.scene.add(this.line);\n    }\n\n    for (let i = -size; i <= size; i += step) {\n      if (i / step % 2 === 0) {\n        continue;\n      }\n\n      geometry = new THREE.Geometry();\n      material = new THREE.LineBasicMaterial({\n        color: \"green\"\n      });\n      geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n      geometry.vertices.push(new THREE.Vector3(i, 0, size));\n      this.line = new THREE.LineSegments(geometry, material);\n      this.scene.add(this.line);\n    }\n\n    var offset = 2000,\n        side = 50,\n        sidegap = 80;\n\n    for (let i = 0; i < allQuestions.length; i += 1) {\n      var questionIndex = Number(allQuestions[i][\"id\"]) - 1;\n      var bottommaterial;\n      var difficulty;\n      var questionData = allQuestions[i][\"content\"][\"content\"];\n\n      if (allQuestions[i][\"difficulty\"] === \"1\") {\n        bottommaterial = new THREE.MeshBasicMaterial({\n          color: 0x00cc00\n        });\n        difficulty = 'EASY';\n      } else if (allQuestions[i][\"difficulty\"] === \"2\") {\n        bottommaterial = new THREE.MeshBasicMaterial({\n          color: 0xff9900\n        });\n        difficulty = 'MEDIUM';\n      } else {\n        bottommaterial = new THREE.MeshBasicMaterial({\n          color: 0xD63333\n        });\n        difficulty = 'HARD';\n      }\n\n      var bottomgeometry = new THREE.BoxGeometry(60, 20, 60);\n      var row = Math.floor(questionIndex / side);\n      var col = questionIndex % side;\n      bottomgeometry.translate(col * sidegap - offset, 10, row * sidegap - offset);\n      this.bottommesh = new THREE.Mesh(bottomgeometry, bottommaterial);\n      this.bottommesh.name = allQuestions[i][\"id\"] + ' - ' + allQuestions[i][\"name\"].split('-').join(' ') + ' - ' + difficulty;\n      this.bottommesh.userData = questionData;\n      this.scene.add(this.bottommesh);\n      this.cubesToBePicked.push(this.bottommesh);\n    }\n\n    window.addEventListener(\"resize\", this.onWindowResize, false);\n    window.addEventListener('pointerdown', this.onMouseDown, false);\n    this.animate();\n  }\n\n  componentWillUnmount() {\n    cancelAnimationFrame(this.frameId);\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  onMouseDown(event) {\n    event.preventDefault();\n    this.mouse.x = event.clientX / window.innerWidth * 2 - 1;\n    this.mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n    const intersects = this.raycaster.intersectObjects(this.cubesToBePicked);\n\n    if (intersects.length > 0) {\n      if (intersects[0].object != this.INTERSECTED) {\n        if (this.INTERSECTED) this.INTERSECTED.material.color.setHex(this.INTERSECTED.currentHex);\n        this.INTERSECTED = intersects[0].object;\n        this.INTERSECTED.currentHex = this.INTERSECTED.material.color.getHex();\n        this.INTERSECTED.material.color.setHex(0xFF00FF);\n        this.setState({\n          questionName: this.INTERSECTED.name,\n          questionData: this.INTERSECTED.userData\n        });\n      }\n    } else //no intesections\n      {\n        if (this.INTERSECTED) {\n          this.INTERSECTED.material.color.setHex(this.INTERSECTED.currentHex);\n        }\n\n        this.INTERSECTED = null;\n        this.setState({\n          questionName: '',\n          questionData: ''\n        });\n      }\n  }\n\n  onWindowResize() {\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n  } // initializeOrbits() {\n  //     this.controls.rotateSpeed = 1.0;\n  //     this.controls.zoomSpeed = 1.2;\n  //     this.controls.panSpeed = 0.8;\n  //   }\n\n\n  initializeCamera() {\n    this.camera.position.x = 0;\n    this.camera.position.y = 2000;\n    this.camera.position.z = 1500;\n    this.controls.update();\n  }\n\n  animate() {\n    // this.raycaster.setFromCamera(this.mouse, this.camera);\n    // const intersects = this.raycaster.intersectObjects(this.cubesToBePicked);\n    // if (intersects.length > 0) {\n    //     if (intersects[0].object != this.INTERSECTED) {\n    //         if (this.INTERSECTED)\n    //             this.INTERSECTED.material.color.setHex(this.INTERSECTED.currentHex);\n    //         this.INTERSECTED = intersects[0].object;\n    //         this.INTERSECTED.currentHex = this.INTERSECTED.material.color.getHex();\n    //         this.INTERSECTED.material.color.setHex(0xFF00FF);\n    //         this.setState({questionName: this.INTERSECTED.name, questionData: this.INTERSECTED.userData});\n    //     }\n    // }\n    // else //no intesections\n    // {\n    //     if (this.INTERSECTED) {\n    //         this.INTERSECTED.material.color.setHex(this.INTERSECTED.currentHex);\n    //     }\n    //     this.INTERSECTED = null;\n    //     this.setState({questionName: '', questionData: ''});\n    // }\n    this.frameId = window.requestAnimationFrame(this.animate);\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"floatingButton\",\n        className: \"btn orange\",\n        children: [\"CYBER LEET_ : \", this.state.questionName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), this.state.questionData && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"loading\",\n        dangerouslySetInnerHTML: {\n          __html: this.state.questionData\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 37\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"ThreeViewer\",\n        ref: mount => {\n          this.mount = mount;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default ThreeView;","map":{"version":3,"sources":["/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/ThreeView.js"],"names":["React","Component","ReactDOM","THREE","OrbitControls","allQuestions","Swal","ThreeView","constructor","props","state","questionName","questionData","animate","bind","onMouseDown","onWindowResize","initializeCamera","componentDidMount","width","window","innerWidth","height","innerHeight","scene","Scene","camera","PerspectiveCamera","renderer","WebGLRenderer","antialias","controls","domElement","update","setSize","mount","appendChild","cubesToBePicked","raycaster","Raycaster","mouse","Vector2","INTERSECTED","worldsize","plane","Mesh","PlaneGeometry","MeshBasicMaterial","color","opacity","transparent","rotation","set","Math","PI","add","size","step","geometry","material","line","i","Geometry","LineBasicMaterial","vertices","push","Vector3","LineSegments","offset","side","sidegap","length","questionIndex","Number","bottommaterial","difficulty","bottomgeometry","BoxGeometry","row","floor","col","translate","bottommesh","name","split","join","userData","addEventListener","componentWillUnmount","cancelAnimationFrame","frameId","removeChild","event","preventDefault","x","clientX","y","clientY","setFromCamera","intersects","intersectObjects","object","setHex","currentHex","getHex","setState","aspect","updateProjectionMatrix","position","z","requestAnimationFrame","render","__html"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\nimport \"./ThreeView.css\";\nimport Swal from 'sweetalert2';\n\nclass ThreeView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {questionName: '', questionData: ''}\n    this.animate = this.animate.bind(this);\n    this.onMouseDown = this.onMouseDown.bind(this);\n    this.onWindowResize = this.onWindowResize.bind(this);\n    this.initializeCamera = this.initializeCamera.bind(this);\n    // this.initializeOrbits = this.initializeOrbits.bind(this);\n  }\ncomponentDidMount() {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(\n        45,\n        window.innerWidth / window.innerHeight,\n        1,\n        10000\n    );\n\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.update();\n    this.renderer.setSize(width, height);\n    this.mount.appendChild(this.renderer.domElement);\n    // this.initializeOrbits();\n    this.initializeCamera();\n\n    this.cubesToBePicked = [];\n    this.raycaster = new THREE.Raycaster();\n    this.mouse = new THREE.Vector2();\n    this.INTERSECTED = null;\n    var worldsize = 6000;\n    this.plane = new THREE.Mesh(\n        new THREE.PlaneGeometry(worldsize, worldsize, 1),\n        new THREE.MeshBasicMaterial({\n            color: \"grey\",\n            opacity: 0.3,\n            transparent: true,\n        })\n    );\n    this.plane.rotation.set(-Math.PI / 2, 0, 0);\n    this.scene.add(this.plane);\n    var size = 3000,\n    step = 40;\n    var geometry, material, line;\n    for (let i = -size; i <= size; i += step) {\n        if ((i / step) % 2 === 0) {\n            continue;\n        }\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n            color: \"purple\",\n        });\n        geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n        geometry.vertices.push(new THREE.Vector3(size, 0, i));\n        this.line = new THREE.LineSegments(geometry, material);\n        this.scene.add(this.line);\n    }\n    for (let i = -size; i <= size; i += step) {\n        if ((i / step) % 2 === 0) {\n            continue;\n        }\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n            color: \"green\",\n        });\n        geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n        geometry.vertices.push(new THREE.Vector3(i, 0, size));\n        this.line = new THREE.LineSegments(geometry, material);\n        this.scene.add(this.line);\n    }\n\n    var offset = 2000,\n    side = 50,\n    sidegap = 80;\n    for (let i = 0; i < allQuestions.length; i += 1) {\n    var questionIndex = Number(allQuestions[i][\"id\"]) - 1;\n    var bottommaterial;\n    var difficulty;\n    var questionData = allQuestions[i][\"content\"][\"content\"];\n    if (allQuestions[i][\"difficulty\"] === \"1\") {\n        bottommaterial = new THREE.MeshBasicMaterial({ color: 0x00cc00 });\n        difficulty = 'EASY';\n    } else if (allQuestions[i][\"difficulty\"] === \"2\") {\n        bottommaterial = new THREE.MeshBasicMaterial({ color: 0xff9900 });\n        difficulty = 'MEDIUM';\n    } else {\n        bottommaterial = new THREE.MeshBasicMaterial({ color: 0xD63333 });\n        difficulty = 'HARD';\n    }\n    var bottomgeometry = new THREE.BoxGeometry(60, 20, 60);\n    var row = Math.floor(questionIndex / side);\n    var col = questionIndex % side;\n    bottomgeometry.translate(\n        col * sidegap - offset,\n        10,\n        row * sidegap - offset\n    );\n    this.bottommesh = new THREE.Mesh(bottomgeometry, bottommaterial);\n    \n   \n    this.bottommesh.name = allQuestions[i][\"id\"] + ' - ' + allQuestions[i][\"name\"].split('-').join(' ') + ' - ' + difficulty;\n    this.bottommesh.userData = questionData;\n    this.scene.add(this.bottommesh);\n    this.cubesToBePicked.push(this.bottommesh);\n\n}\n\n\n    window.addEventListener(\"resize\", this.onWindowResize, false);\n    window.addEventListener('pointerdown', this.onMouseDown, false);\n    this.animate();\n  }\ncomponentWillUnmount() {\n    cancelAnimationFrame(this.frameId);\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\nonMouseDown(event) {\n    event.preventDefault();\n    this.mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n    this.mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n    const intersects = this.raycaster.intersectObjects(this.cubesToBePicked);\n    if (intersects.length > 0) {\n        if (intersects[0].object != this.INTERSECTED) {\n            if (this.INTERSECTED)\n                this.INTERSECTED.material.color.setHex(this.INTERSECTED.currentHex);\n            this.INTERSECTED = intersects[0].object;\n            this.INTERSECTED.currentHex = this.INTERSECTED.material.color.getHex();\n            this.INTERSECTED.material.color.setHex(0xFF00FF);\n            this.setState({questionName: this.INTERSECTED.name, questionData: this.INTERSECTED.userData});\n        \n        }\n    }\n    else //no intesections\n    {\n        if (this.INTERSECTED) {\n            this.INTERSECTED.material.color.setHex(this.INTERSECTED.currentHex);\n        }\n        this.INTERSECTED = null;\n        this.setState({questionName: '', questionData: ''});\n\n    }\n    \n}\n\n\nonWindowResize() {\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n}\n// initializeOrbits() {\n//     this.controls.rotateSpeed = 1.0;\n//     this.controls.zoomSpeed = 1.2;\n//     this.controls.panSpeed = 0.8;\n//   }\ninitializeCamera() {\n    this.camera.position.x = 0;\n    this.camera.position.y = 2000;\n    this.camera.position.z = 1500;\n    this.controls.update();\n  }\nanimate() {\n    // this.raycaster.setFromCamera(this.mouse, this.camera);\n    // const intersects = this.raycaster.intersectObjects(this.cubesToBePicked);\n    // if (intersects.length > 0) {\n    //     if (intersects[0].object != this.INTERSECTED) {\n    //         if (this.INTERSECTED)\n    //             this.INTERSECTED.material.color.setHex(this.INTERSECTED.currentHex);\n    //         this.INTERSECTED = intersects[0].object;\n    //         this.INTERSECTED.currentHex = this.INTERSECTED.material.color.getHex();\n    //         this.INTERSECTED.material.color.setHex(0xFF00FF);\n    //         this.setState({questionName: this.INTERSECTED.name, questionData: this.INTERSECTED.userData});\n    //     }\n    // }\n    // else //no intesections\n    // {\n    //     if (this.INTERSECTED) {\n    //         this.INTERSECTED.material.color.setHex(this.INTERSECTED.currentHex);\n    //     }\n    //     this.INTERSECTED = null;\n    //     this.setState({questionName: '', questionData: ''});\n\n    // }\n    this.frameId = window.requestAnimationFrame(this.animate);\n    this.renderer.render(this.scene, this.camera);\n  }\n\n\n\nrender() {\n    return (\n      <div>\n        <button id = \"floatingButton\" className=\"btn orange\">CYBER LEET_ : {this.state.questionName}</button>\n        {this.state.questionData && <button className=\"loading\" dangerouslySetInnerHTML={{ __html: this.state.questionData}}/>}\n        <div\n          id=\"ThreeViewer\"\n          ref={mount => {\n            this.mount = mount;\n          }}\n        />\n      </div>\n    );\n  }\n}\nexport default ThreeView;"]},"metadata":{},"sourceType":"module"}
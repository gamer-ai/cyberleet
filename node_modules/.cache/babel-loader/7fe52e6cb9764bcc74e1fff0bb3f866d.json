{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/ThreeViewer.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\n\nclass ThreeView extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.start = () => {\n      if (!this.frameId) {\n        this.frameId = requestAnimationFrame(this.animate);\n      }\n    };\n\n    this.stop = () => {\n      cancelAnimationFrame(this.frameId);\n    };\n\n    this.animate = () => {\n      // -----Step 3--------\n      //Rotate Models\n      if (this.cube) this.cube.rotation.y += 0.01;\n      if (this.freedomMesh) this.freedomMesh.rotation.y += 0.01;\n      this.renderScene();\n      this.frameId = window.requestAnimationFrame(this.animate);\n    };\n\n    this.renderScene = () => {\n      if (this.renderer) this.renderer.render(this.scene, this.camera);\n    };\n  }\n\n  componentDidMount() {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n    this.scene = new THREE.Scene();\n    this.mouse = new THREE.Vector2(); //Add Renderer\n\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    this.renderer.setSize(width, height);\n    this.mount.appendChild(this.renderer.domElement); //add Camera\n\n    this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);\n    this.camera.position.set(0, 2000, 1500); //Camera Controls\n\n    const controls = new OrbitControls(this.camera, this.renderer.domElement);\n    controls.update();\n    const raycaster = new THREE.Raycaster();\n    const mouse = new THREE.Vector2();\n    let INTERSECTED;\n    this.cubesToBePicked = [];\n    this.addModels();\n    this.renderScene(); //start animation\n\n    this.start();\n  }\n\n  addModels() {\n    // -----Step 1--------\n    var worldsize = 6000;\n    var plane = new THREE.Mesh(new THREE.PlaneGeometry(worldsize, worldsize, 1), new THREE.MeshBasicMaterial({\n      color: \"grey\",\n      opacity: 0.3,\n      transparent: true\n    }));\n    plane.rotation.set(-Math.PI / 2, 0, 0);\n    this.scene.add(plane); //grid\n\n    var size = 3000,\n        step = 40;\n    var geometry, material, line;\n\n    for (let i = -size; i <= size; i += step) {\n      if (i / step % 2 === 0) {\n        continue;\n      }\n\n      geometry = new THREE.Geometry();\n      material = new THREE.LineBasicMaterial({\n        color: \"purple\"\n      });\n      geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n      geometry.vertices.push(new THREE.Vector3(size, 0, i));\n      line = new THREE.LineSegments(geometry, material);\n      this.scene.add(line);\n    }\n\n    for (let i = -size; i <= size; i += step) {\n      if (i / step % 2 === 0) {\n        continue;\n      }\n\n      geometry = new THREE.Geometry();\n      material = new THREE.LineBasicMaterial({\n        color: \"green\"\n      });\n      geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n      geometry.vertices.push(new THREE.Vector3(i, 0, size));\n      line = new THREE.LineSegments(geometry, material);\n      this.scene.add(line);\n    }\n\n    var offset = 2000,\n        side = 50,\n        sidegap = 80;\n\n    for (let i = 0; i < allQuestions.length; i += 1) {\n      var questionIndex = Number(allQuestions[i][\"id\"]) - 1;\n      var bottommaterial;\n\n      if (allQuestions[i][\"difficulty\"] === \"1\") {\n        bottommaterial = new THREE.MeshBasicMaterial({\n          color: 0x00cc00\n        });\n      } else if (allQuestions[i][\"difficulty\"] === \"2\") {\n        bottommaterial = new THREE.MeshBasicMaterial({\n          color: 0xff9900\n        });\n      } else {\n        bottommaterial = new THREE.MeshBasicMaterial({\n          color: 0xD63333\n        });\n      }\n\n      var bottomgeometry = new THREE.BoxGeometry(60, 20, 60);\n      var row = Math.floor(questionIndex / side);\n      var col = questionIndex % side;\n      bottomgeometry.translate(col * sidegap - offset, 10, row * sidegap - offset);\n      var bottommesh = new THREE.Mesh(bottomgeometry, bottommaterial);\n      this.scene.add(bottommesh);\n      this.cubesToBePicked.push(bottommesh); //   window.addEventListener( 'mousemove', onMouseMove, false );\n    }\n  }\n\n  onMouseMove(event) {\n    // calculate mouse position in normalized device coordinates\n    // (-1 to +1) for both components\n    this.mouse.x = event.clientX / window.innerWidth * 2 - 1;\n    this.mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n  }\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"800px\",\n        height: \"800px\"\n      },\n      ref: mount => {\n        this.mount = mount;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default ThreeView;","map":{"version":3,"sources":["/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/ThreeViewer.js"],"names":["React","Component","ReactDOM","THREE","OrbitControls","allQuestions","ThreeView","start","frameId","requestAnimationFrame","animate","stop","cancelAnimationFrame","cube","rotation","y","freedomMesh","renderScene","window","renderer","render","scene","camera","componentDidMount","width","mount","clientWidth","height","clientHeight","Scene","mouse","Vector2","WebGLRenderer","antialias","setSize","appendChild","domElement","PerspectiveCamera","innerWidth","innerHeight","position","set","controls","update","raycaster","Raycaster","INTERSECTED","cubesToBePicked","addModels","worldsize","plane","Mesh","PlaneGeometry","MeshBasicMaterial","color","opacity","transparent","Math","PI","add","size","step","geometry","material","line","i","Geometry","LineBasicMaterial","vertices","push","Vector3","LineSegments","offset","side","sidegap","length","questionIndex","Number","bottommaterial","bottomgeometry","BoxGeometry","row","floor","col","translate","bottommesh","onMouseMove","event","x","clientX","clientY","componentWillUnmount","removeChild"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\n\nclass ThreeView extends Component {\n  componentDidMount() {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n    this.scene = new THREE.Scene();\n    this.mouse = new THREE.Vector2\n    //Add Renderer\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n    this.renderer.setSize(width, height);\n    this.mount.appendChild(this.renderer.domElement);\n\n    //add Camera\n    this.camera = new THREE.PerspectiveCamera(\n        45,\n        window.innerWidth / window.innerHeight,\n        1,\n        10000\n      );\n    this.camera.position.set(0, 2000, 1500);\n\n\n    //Camera Controls\n    const controls = new OrbitControls(this.camera, this.renderer.domElement);\n    controls.update();\n\n    const raycaster = new THREE.Raycaster();\n    const mouse = new THREE.Vector2();\t\t\n    let INTERSECTED;\t\n    this.cubesToBePicked = [];\n\n    this.addModels();\n\n    this.renderScene();\n    //start animation\n    this.start();\n  }\n\n  addModels() {\n    // -----Step 1--------\n    var worldsize = 6000;\n\n    var plane = new THREE.Mesh(\n        new THREE.PlaneGeometry(worldsize, worldsize, 1),\n        new THREE.MeshBasicMaterial({\n          color: \"grey\",\n          opacity: 0.3,\n          transparent: true,\n        })\n      );\n      plane.rotation.set(-Math.PI / 2, 0, 0);\n      this.scene.add(plane);\n      //grid\n      var size = 3000,\n        step = 40;\n      var geometry, material, line;\n      for (let i = -size; i <= size; i += step) {\n        if ((i / step) % 2 === 0) {\n          continue;\n        }\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"purple\",\n        });\n        geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n        geometry.vertices.push(new THREE.Vector3(size, 0, i));\n        line = new THREE.LineSegments(geometry, material);\n        this.scene.add(line);\n      }\n      for (let i = -size; i <= size; i += step) {\n        if ((i / step) % 2 === 0) {\n          continue;\n        }\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"green\",\n        });\n        geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n        geometry.vertices.push(new THREE.Vector3(i, 0, size));\n        line = new THREE.LineSegments(geometry, material);\n        this.scene.add(line);\n      }\n      var offset = 2000,\n      side = 50,\n      sidegap = 80;\n    for (let i = 0; i < allQuestions.length; i += 1) {\n      var questionIndex = Number(allQuestions[i][\"id\"]) - 1;\n      var bottommaterial;\n      if (allQuestions[i][\"difficulty\"] === \"1\") {\n        bottommaterial = new THREE.MeshBasicMaterial({ color: 0x00cc00 });\n      } else if (allQuestions[i][\"difficulty\"] === \"2\") {\n        bottommaterial = new THREE.MeshBasicMaterial({ color: 0xff9900 });\n      } else {\n        bottommaterial = new THREE.MeshBasicMaterial({ color: 0xD63333 });\n      }\n      var bottomgeometry = new THREE.BoxGeometry(60, 20, 60);\n      var row = Math.floor(questionIndex / side);\n      var col = questionIndex % side;\n      bottomgeometry.translate(\n        col * sidegap - offset,\n        10,\n        row * sidegap - offset\n      );\n      var bottommesh = new THREE.Mesh(bottomgeometry, bottommaterial);\n      this.scene.add(bottommesh);\n      this.cubesToBePicked.push(bottommesh);\n    //   window.addEventListener( 'mousemove', onMouseMove, false );\n    }\n\n\n  }\n\nonMouseMove( event ) {\n    // calculate mouse position in normalized device coordinates\n    // (-1 to +1) for both components\n    this.mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n    this.mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\n  \n  }\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n  start = () => {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  };\n  stop = () => {\n    cancelAnimationFrame(this.frameId);\n  };\n  animate = () => {\n    // -----Step 3--------\n    //Rotate Models\n    if (this.cube) this.cube.rotation.y += 0.01;\n    if (this.freedomMesh) this.freedomMesh.rotation.y += 0.01;\n\n    this.renderScene();\n    this.frameId = window.requestAnimationFrame(this.animate);\n  };\n  renderScene = () => {\n    if (this.renderer) this.renderer.render(this.scene, this.camera);\n  };\n\n  render() {\n    return (\n      <div\n        style={{ width: \"800px\", height: \"800px\" }}\n        ref={mount => {\n          this.mount = mount;\n        }}\n      />\n    );\n  }\n}\nexport default ThreeView;"]},"metadata":{},"sourceType":"module"}
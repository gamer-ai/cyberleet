{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/ThreeViewTest.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\nimport \"./ThreeView.css\";\n\nclass Shape extends Component {\n  constructor(props) {\n    super(props);\n    this.animate = this.animate.bind(this);\n    this.addCube = this.addCube.bind(this);\n    this.initializeCamera = this.initializeCamera.bind(this);\n    this.initializeOrbits = this.initializeOrbits.bind(this);\n  }\n\n  componentDidMount() {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.renderer.setSize(width, height);\n    this.mount.appendChild(this.renderer.domElement);\n    this.initializeOrbits();\n    this.initializeCamera();\n    var worldsize = 6000;\n    this.plane = new THREE.Mesh(new THREE.PlaneGeometry(worldsize, worldsize, 1), new THREE.MeshBasicMaterial({\n      color: \"grey\",\n      opacity: 0.3,\n      transparent: true\n    }));\n    this.plane.rotation.set(-Math.PI / 2, 0, 0);\n    this.scene.add(this.plane);\n    var size = 3000,\n        step = 40;\n    var geometry, material, line;\n\n    for (let i = -size; i <= size; i += step) {\n      if (i / step % 2 === 0) {\n        continue;\n      }\n\n      geometry = new THREE.Geometry();\n      material = new THREE.LineBasicMaterial({\n        color: \"purple\"\n      });\n      geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n      geometry.vertices.push(new THREE.Vector3(size, 0, i));\n      this.line = new THREE.LineSegments(geometry, material);\n      this.scene.add(this.line);\n    }\n\n    for (let i = -size; i <= size; i += step) {\n      if (i / step % 2 === 0) {\n        continue;\n      }\n\n      geometry = new THREE.Geometry();\n      material = new THREE.LineBasicMaterial({\n        color: \"green\"\n      });\n      geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n      geometry.vertices.push(new THREE.Vector3(i, 0, size));\n      this.line = new THREE.LineSegments(geometry, material);\n      this.scene.add(this.line);\n    }\n\n    this.cubesToBePicked = [];\n    var offset = 2000,\n        side = 50,\n        sidegap = 80;\n\n    for (let i = 0; i < allQuestions.length; i += 1) {\n      var questionIndex = Number(allQuestions[i][\"id\"]) - 1;\n      var bottommaterial;\n\n      if (allQuestions[i][\"difficulty\"] === \"1\") {\n        bottommaterial = new THREE.MeshBasicMaterial({\n          color: 0x00cc00\n        });\n      } else if (allQuestions[i][\"difficulty\"] === \"2\") {\n        bottommaterial = new THREE.MeshBasicMaterial({\n          color: 0xff9900\n        });\n      } else {\n        bottommaterial = new THREE.MeshBasicMaterial({\n          color: 0xD63333\n        });\n      }\n\n      var bottomgeometry = new THREE.BoxGeometry(60, 20, 60);\n      var row = Math.floor(questionIndex / side);\n      var col = questionIndex % side;\n      bottomgeometry.translate(col * sidegap - offset, 10, row * sidegap - offset);\n      var bottommesh = new THREE.Mesh(bottomgeometry, bottommaterial);\n      bottommesh.name = allQuestions[i][\"name\"];\n      this.scene.add(this.bottommesh);\n      this.cubesToBePicked.push(this.bottommesh);\n    } // const geometry = new THREE.BoxGeometry( 1, 1, 1 );\n    // const material = new THREE.MeshBasicMaterial( { color: 0xFF00FF } );\n    // this.cube = new THREE.Mesh( geometry, material );\n    // this.scene.add( this.cube );\n\n\n    this.animate();\n  }\n\n  componentWillUnmount() {\n    cancelAnimationFrame(this.frameId);\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  initializeOrbits() {\n    this.controls.rotateSpeed = 1.0;\n    this.controls.zoomSpeed = 1.2;\n    this.controls.panSpeed = 0.8;\n  }\n\n  initializeCamera() {\n    this.camera.position.x = 0;\n    this.camera.position.y = 0;\n    this.camera.position.z = 4;\n  }\n\n  animate() {\n    this.frameId = window.requestAnimationFrame(this.animate);\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  addCube(cube) {\n    this.scene.add(cube);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"boardCanvas\",\n        style: {\n          width: \"80vw\",\n          height: \"40vw\"\n        },\n        ref: mount => {\n          this.mount = mount;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Shape;","map":{"version":3,"sources":["/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/ThreeViewTest.js"],"names":["React","Component","ReactDOM","THREE","OrbitControls","allQuestions","Shape","constructor","props","animate","bind","addCube","initializeCamera","initializeOrbits","componentDidMount","width","window","innerWidth","height","innerHeight","scene","Scene","camera","PerspectiveCamera","renderer","WebGLRenderer","antialias","controls","domElement","setSize","mount","appendChild","worldsize","plane","Mesh","PlaneGeometry","MeshBasicMaterial","color","opacity","transparent","rotation","set","Math","PI","add","size","step","geometry","material","line","i","Geometry","LineBasicMaterial","vertices","push","Vector3","LineSegments","cubesToBePicked","offset","side","sidegap","length","questionIndex","Number","bottommaterial","bottomgeometry","BoxGeometry","row","floor","col","translate","bottommesh","name","componentWillUnmount","cancelAnimationFrame","frameId","removeChild","rotateSpeed","zoomSpeed","panSpeed","position","x","y","z","requestAnimationFrame","render","cube"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\nimport \"./ThreeView.css\";\n\nclass Shape extends Component {\n  constructor(props) {\n    super(props);\n    this.animate = this.animate.bind(this);\n    this.addCube = this.addCube.bind(this);\n    this.initializeCamera = this.initializeCamera.bind(this);\n    this.initializeOrbits = this.initializeOrbits.bind(this);\n  }\ncomponentDidMount() {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(\n        45,\n        window.innerWidth / window.innerHeight,\n        1,\n        10000\n    );\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.renderer.setSize(width, height);\n    this.mount.appendChild(this.renderer.domElement);\n    this.initializeOrbits();\n    this.initializeCamera();\n    var worldsize = 6000;\n    this.plane = new THREE.Mesh(\n        new THREE.PlaneGeometry(worldsize, worldsize, 1),\n        new THREE.MeshBasicMaterial({\n            color: \"grey\",\n            opacity: 0.3,\n            transparent: true,\n        })\n    );\n    this.plane.rotation.set(-Math.PI / 2, 0, 0);\n    this.scene.add(this.plane);\n    var size = 3000,\n    step = 40;\n    var geometry, material, line;\n    for (let i = -size; i <= size; i += step) {\n        if ((i / step) % 2 === 0) {\n            continue;\n        }\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n            color: \"purple\",\n        });\n        geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n        geometry.vertices.push(new THREE.Vector3(size, 0, i));\n        this.line = new THREE.LineSegments(geometry, material);\n        this.scene.add(this.line);\n    }\n    for (let i = -size; i <= size; i += step) {\n        if ((i / step) % 2 === 0) {\n            continue;\n        }\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n            color: \"green\",\n        });\n        geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n        geometry.vertices.push(new THREE.Vector3(i, 0, size));\n        this.line = new THREE.LineSegments(geometry, material);\n        this.scene.add(this.line);\n    }\n    this.cubesToBePicked = [];\n    var offset = 2000,\n    side = 50,\n    sidegap = 80;\n    for (let i = 0; i < allQuestions.length; i += 1) {\n    var questionIndex = Number(allQuestions[i][\"id\"]) - 1;\n    var bottommaterial;\n    if (allQuestions[i][\"difficulty\"] === \"1\") {\n        bottommaterial = new THREE.MeshBasicMaterial({ color: 0x00cc00 });\n    } else if (allQuestions[i][\"difficulty\"] === \"2\") {\n        bottommaterial = new THREE.MeshBasicMaterial({ color: 0xff9900 });\n    } else {\n        bottommaterial = new THREE.MeshBasicMaterial({ color: 0xD63333 });\n    }\n    var bottomgeometry = new THREE.BoxGeometry(60, 20, 60);\n    var row = Math.floor(questionIndex / side);\n    var col = questionIndex % side;\n    bottomgeometry.translate(\n        col * sidegap - offset,\n        10,\n        row * sidegap - offset\n    );\n    var bottommesh = new THREE.Mesh(bottomgeometry, bottommaterial);\n    bottommesh.name = allQuestions[i][\"name\"];\n    this.scene.add(this.bottommesh);\n    this.cubesToBePicked.push(this.bottommesh);\n\n}\n\n    // const geometry = new THREE.BoxGeometry( 1, 1, 1 );\n    // const material = new THREE.MeshBasicMaterial( { color: 0xFF00FF } );\n    // this.cube = new THREE.Mesh( geometry, material );\n    // this.scene.add( this.cube );\n    this.animate();\n  }\ncomponentWillUnmount() {\n    cancelAnimationFrame(this.frameId);\n    this.mount.removeChild(this.renderer.domElement);\n  }\ninitializeOrbits() {\n    this.controls.rotateSpeed = 1.0;\n    this.controls.zoomSpeed = 1.2;\n    this.controls.panSpeed = 0.8;\n  }\ninitializeCamera() {\n    this.camera.position.x = 0;\n    this.camera.position.y = 0;\n    this.camera.position.z = 4;\n  }\nanimate() {\n    this.frameId = window.requestAnimationFrame(this.animate);\n    this.renderer.render(this.scene, this.camera);\n  }\n\naddCube(cube) {\n    this.scene.add(cube);\n  }\nrender() {\n    return (\n      <div>\n        <div\n          id=\"boardCanvas\"\n          style={{ width: \"80vw\", height: \"40vw\" }}\n          ref={mount => {\n            this.mount = mount;\n          }}\n        />\n      </div>\n    );\n  }\n}\nexport default Shape;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/index.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\n\nclass App extends Component {\n  componentDidMount() {\n    // === THREE.JS CODE START ===\n    // load JSON file to start \n    // var request = new XMLHttpRequest();\n    // request.open(\"GET\", \"/data/all.json\", false);\n    // request.send(null);\n    // var all_questions = JSON.parse(request.responseText);\n    // alert (all_questions.result[0]);\n    var worldsize = 6000;\n    var camera, scene, renderer;\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);\n    renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    camera.position.set(0, 1000, 1500);\n    controls.update();\n    gridBackground();\n\n    function gridBackground() {\n      console.log(allQuestions);\n\n      for (let i = 0; i < allQuestions.length; i += 1) {\n        console.log(allQuestions[i]);\n      } // plane x-y\n\n\n      var plane = new THREE.Mesh(new THREE.PlaneGeometry(worldsize, worldsize, 1), new THREE.MeshBasicMaterial({\n        color: \"grey\",\n        opacity: 0.3,\n        transparent: true\n      }));\n      plane.rotation.set(-Math.PI / 2, 0, 0);\n      scene.add(plane); //axes\n      // const axesHelper = new THREE.AxesHelper( 20 );\n      // scene.add( axesHelper );\n      // const origingeometry = new THREE.BoxGeometry( 1, 1, 1 );\n      // const originmaterial = new THREE.MeshBasicMaterial( {color: \"white\"} );\n      // const origin = new THREE.Mesh( origingeometry, originmaterial );\n      // scene.add( origin );\n      //\n      // grid alternative:\n      // const gridsize = 2000;\n      // const divisions = 20;\n      // const gridHelper = new THREE.GridHelper( gridsize, divisions );\n      // scene.add( gridHelper );\n      //\n      //ambient light\n\n      const light = new THREE.AmbientLight(0xFBFBFB); // white light\n\n      scene.add(light);\n      var basesize = 2000,\n          basestep = 80;\n\n      for (let j = -basesize; j <= basesize; j += basestep) {\n        for (let i = -basesize; i <= basesize; i += basestep) {\n          var boxgeometry = new THREE.BoxGeometry(60, 20, 60);\n          var boxmaterial = new THREE.MeshNormalMaterial();\n          boxgeometry.translate(i, 10, j);\n          var boxmesh = new THREE.Mesh(boxgeometry, boxmaterial);\n          scene.add(boxmesh);\n        }\n      }\n\n      var addonsize = 2000,\n          addonstep = 80;\n      var count = 0;\n\n      for (let j = -addonsize; j <= addonsize; j += addonstep) {\n        for (let i = -addonsize; i <= addonsize; i += addonstep) {\n          count += 1; // easy level\n\n          if (count <= 451) {\n            var addonboxgeometry = new THREE.BoxGeometry(60, 20, 60);\n            var addonboxmaterial = new THREE.MeshBasicMaterial({\n              color: 0x00CC00\n            });\n            addonboxgeometry.translate(i, 30, j);\n            var addonboxmesh = new THREE.Mesh(addonboxgeometry, addonboxmaterial);\n            scene.add(addonboxmesh); // medium level\n          } else if (count <= 1338) {\n            var addonboxgeometry = new THREE.BoxGeometry(60, 20, 60);\n            var addonboxmaterial = new THREE.MeshBasicMaterial({\n              color: 0xFBDDC0\n            });\n            addonboxgeometry.translate(i, 30, j);\n            var addonboxmesh = new THREE.Mesh(addonboxgeometry, addonboxmaterial);\n            scene.add(addonboxmesh);\n          } // hard level\n          else {\n              if (count > 1697) {\n                continue;\n              }\n\n              var addonboxgeometry = new THREE.BoxGeometry(60, 20, 60);\n              var addonboxmaterial = new THREE.MeshBasicMaterial({\n                color: 0xDE5C5C\n              });\n              addonboxgeometry.translate(i, 30, j);\n              var addonboxmesh = new THREE.Mesh(addonboxgeometry, addonboxmaterial);\n              scene.add(addonboxmesh);\n            }\n        }\n      } //grid\n\n\n      var size = 3000,\n          step = 40;\n      var geometry, material, line;\n\n      for (let i = -size; i <= size; i += step) {\n        if (i / step % 2 == 0) {\n          continue;\n        }\n\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"purple\"\n        });\n        geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n        geometry.vertices.push(new THREE.Vector3(size, 0, i));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n      }\n\n      for (let i = -size; i <= size; i += step) {\n        if (i / step % 2 == 0) {\n          continue;\n        }\n\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"green\"\n        });\n        geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n        geometry.vertices.push(new THREE.Vector3(i, 0, size));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n      } //grid\n      // call the render()\n\n\n      render();\n    }\n\n    function render() {\n      requestAnimationFrame(render); // required if controls.enableDamping or controls.autoRotate are set to true\n\n      controls.update();\n      renderer.render(scene, camera);\n    } //---------grid above--------//\n    // const table = [\n    //   \"Two Sum\",\n    //   \"Add Two Numbers\"\n    // ];\n    // const difficultyLevel = [\"Easy\", \"Medium\"];\n    // var scene = new THREE.Scene();\n    // var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n    // const objects = [];\n    // const targets = { table: [], sphere: [], helix: [], grid: [] }\n    // for ( let i = 0; i < table.length; i += 1 ) {\n    // \t\t\tconst element = document.createElement( 'div' );\n    // \t\t\telement.className = 'element';\n    // \t\t\telement.style.backgroundColor = 'rgba(0,127,127,' + ( Math.random() * 0.5 + 0.25 ) + ')';\n    // \t\t\tconst number = document.createElement( 'div' );\n    // \t\t\tnumber.className = 'number';\n    // \t\t\tnumber.textContent = i + 1;\n    // \t\t\telement.appendChild( number );\n    // \t\t\tconst symbol = document.createElement( 'div' );\n    // \t\t\tsymbol.className = 'symbol';\n    // \t\t\tsymbol.textContent = table[ i ];\n    // \t\t\telement.appendChild( symbol );\n    // \t\t\tconst details = document.createElement( 'div' );\n    // \t\t\tdetails.className = 'details';\n    // \t\t\tdetails.innerHTML = difficultyLevel[ i ] + '<br>';\n    // \t\t\telement.appendChild( details );\n    // \t\t\tconst objectCSS = new CSS3DObject( element );\n    // \t\t\tobjectCSS.position.x = i*40;\n    // \t\t\tobjectCSS.position.y = 10;\n    // \t\t\tobjectCSS.position.z = 1;\n    // \t\t\tscene.add( objectCSS );\n    // \t\t\tobjects.push( objectCSS );\n    // \t\t\t//\n    // \t\t\tconst object = new THREE.Object3D();\n    // \t\t\tobject.position.x = ( i * 10 ) ;\n    // \t\t\tobject.position.y = -( i * 10  ) ;\n    // \t\t\ttargets.table.push( object );\n    // \t\t}\n    //     //\n    // var renderer = new CSS3DRenderer();\n    // renderer.setSize( window.innerWidth, window.innerHeight );\n    // document.body.appendChild( renderer.domElement );\n    // camera.position.z = 300;\n    // var animate = function () {\n    //    renderer.render( scene, camera );\n    // };\n    // animate();\n    // === THREE.JS EXAMPLE CODE END ===\n\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 225,\n  columnNumber: 17\n}, this), rootElement);","map":{"version":3,"sources":["/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/index.js"],"names":["React","Component","ReactDOM","THREE","OrbitControls","allQuestions","App","componentDidMount","worldsize","camera","scene","renderer","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","antialias","setSize","document","body","appendChild","domElement","controls","position","set","update","gridBackground","console","log","i","length","plane","Mesh","PlaneGeometry","MeshBasicMaterial","color","opacity","transparent","rotation","Math","PI","add","light","AmbientLight","basesize","basestep","j","boxgeometry","BoxGeometry","boxmaterial","MeshNormalMaterial","translate","boxmesh","addonsize","addonstep","count","addonboxgeometry","addonboxmaterial","addonboxmesh","size","step","geometry","material","line","Geometry","LineBasicMaterial","vertices","push","Vector3","LineSegments","render","requestAnimationFrame","rootElement","getElementById"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\"\nclass App extends Component {\n  componentDidMount() {\n    \n    // === THREE.JS CODE START ===\n    // load JSON file to start \n    // var request = new XMLHttpRequest();\n    // request.open(\"GET\", \"/data/all.json\", false);\n    // request.send(null);\n    // var all_questions = JSON.parse(request.responseText);\n    // alert (all_questions.result[0]);\n\n    var worldsize = 6000;\n    var camera, scene, renderer;\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(\n      45,\n      window.innerWidth / window.innerHeight,\n      1,\n      10000\n    );\n\n\n\n    renderer = new THREE.WebGLRenderer({ antialias: true } );\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    camera.position.set(0, 1000, 1500);\n    controls.update();\n    gridBackground();\n\n    function gridBackground() {\n      console.log(allQuestions);\n      for ( let i = 0; i < allQuestions.length; i += 1 ) {\n        console.log(allQuestions[i])\n      }\n      // plane x-y\n      var plane = new THREE.Mesh(\n        new THREE.PlaneGeometry(worldsize, worldsize, 1),\n        new THREE.MeshBasicMaterial({\n            color: \"grey\",\n            opacity: 0.3,\n            transparent:true\n        }));\n      plane.rotation.set(-Math.PI/2,0,0);\n      scene.add(plane);\n      \n\n      //axes\n      // const axesHelper = new THREE.AxesHelper( 20 );\n      // scene.add( axesHelper );\n      // const origingeometry = new THREE.BoxGeometry( 1, 1, 1 );\n      // const originmaterial = new THREE.MeshBasicMaterial( {color: \"white\"} );\n      // const origin = new THREE.Mesh( origingeometry, originmaterial );\n      // scene.add( origin );\n      //\n\n      // grid alternative:\n      // const gridsize = 2000;\n      // const divisions = 20;\n\n      // const gridHelper = new THREE.GridHelper( gridsize, divisions );\n      // scene.add( gridHelper );\n      //\n\n      //ambient light\n      const light = new THREE.AmbientLight( 0xFBFBFB ); // white light\n      scene.add( light );\n      \n      var basesize = 2000, basestep = 80;\n      for (let j = - basesize; j <= basesize; j += basestep) {\n        for (let i = - basesize; i <= basesize; i += basestep) {\n          var boxgeometry = new THREE.BoxGeometry(60,20,60);\n          var boxmaterial = new THREE.MeshNormalMaterial();\n          boxgeometry.translate( i, 10 , j);\n          var boxmesh = new THREE.Mesh( boxgeometry, boxmaterial );\n          scene.add( boxmesh );\n        }\n    }\n\n      var addonsize = 2000, addonstep = 80;\n      var count = 0;\n      for (let j = - addonsize; j <= addonsize; j += addonstep) {\n        for (let i = - addonsize; i <= addonsize; i += addonstep) {\n          count += 1;\n          // easy level\n          if (count <= 451)\n          {\n\n            var addonboxgeometry = new THREE.BoxGeometry(60,20,60);\n            var addonboxmaterial = new THREE.MeshBasicMaterial({color: 0x00CC00}  );\n            addonboxgeometry.translate( i, 30, j);\n            var addonboxmesh = new THREE.Mesh( addonboxgeometry, addonboxmaterial );\n            scene.add( addonboxmesh );\n          // medium level\n          }else if (count <= 1338) {\n            var addonboxgeometry = new THREE.BoxGeometry(60,20,60);\n            var addonboxmaterial = new THREE.MeshBasicMaterial({color: 0xFBDDC0}  );\n            addonboxgeometry.translate( i, 30, j);\n            var addonboxmesh = new THREE.Mesh( addonboxgeometry, addonboxmaterial );\n            scene.add( addonboxmesh );\n          }\n          // hard level\n          else {\n            if (count > 1697)\n            {continue;\n            }  \n          var addonboxgeometry = new THREE.BoxGeometry(60,20,60);\n          var addonboxmaterial = new THREE.MeshBasicMaterial({color: 0xDE5C5C} );\n          addonboxgeometry.translate( i, 30 , j);\n          var addonboxmesh = new THREE.Mesh( addonboxgeometry, addonboxmaterial );\n          scene.add( addonboxmesh );}\n        }\n    }\n\n\n\n\n      //grid\n      var size = 3000, step = 40;\n      var geometry, material, line;\n      for (let i = -size; i <= size; i += step) {\n        if ((i / step) % 2 == 0)\n        {\n            continue;\n        }\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"purple\"\n        });\n        geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n        geometry.vertices.push(new THREE.Vector3(size, 0, i));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n      }\n      for (let i = -size; i <= size; i += step) {\n        if ((i / step) % 2 == 0)\n        {\n            continue;\n        }\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"green\"\n        });\n        geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n        geometry.vertices.push(new THREE.Vector3(i, 0, size));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n      }\n      //grid\n\n      // call the render()\n      render();\n    }\n\n    function render() {\n      requestAnimationFrame(render);\n\n      // required if controls.enableDamping or controls.autoRotate are set to true\n      controls.update();\n      renderer.render(scene, camera);\n    }\n\n    //---------grid above--------//\n    // const table = [\n    //   \"Two Sum\",\n    //   \"Add Two Numbers\"\n    // ];\n    // const difficultyLevel = [\"Easy\", \"Medium\"];\n    // var scene = new THREE.Scene();\n    // var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n    // const objects = [];\n    // const targets = { table: [], sphere: [], helix: [], grid: [] }\n    // for ( let i = 0; i < table.length; i += 1 ) {\n    // \t\t\tconst element = document.createElement( 'div' );\n    // \t\t\telement.className = 'element';\n    // \t\t\telement.style.backgroundColor = 'rgba(0,127,127,' + ( Math.random() * 0.5 + 0.25 ) + ')';\n    // \t\t\tconst number = document.createElement( 'div' );\n    // \t\t\tnumber.className = 'number';\n    // \t\t\tnumber.textContent = i + 1;\n    // \t\t\telement.appendChild( number );\n    // \t\t\tconst symbol = document.createElement( 'div' );\n    // \t\t\tsymbol.className = 'symbol';\n    // \t\t\tsymbol.textContent = table[ i ];\n    // \t\t\telement.appendChild( symbol );\n    // \t\t\tconst details = document.createElement( 'div' );\n    // \t\t\tdetails.className = 'details';\n    // \t\t\tdetails.innerHTML = difficultyLevel[ i ] + '<br>';\n    // \t\t\telement.appendChild( details );\n    // \t\t\tconst objectCSS = new CSS3DObject( element );\n    // \t\t\tobjectCSS.position.x = i*40;\n    // \t\t\tobjectCSS.position.y = 10;\n    // \t\t\tobjectCSS.position.z = 1;\n    // \t\t\tscene.add( objectCSS );\n    // \t\t\tobjects.push( objectCSS );\n    // \t\t\t//\n    // \t\t\tconst object = new THREE.Object3D();\n    // \t\t\tobject.position.x = ( i * 10 ) ;\n    // \t\t\tobject.position.y = -( i * 10  ) ;\n    // \t\t\ttargets.table.push( object );\n    // \t\t}\n    //     //\n\n    // var renderer = new CSS3DRenderer();\n    // renderer.setSize( window.innerWidth, window.innerHeight );\n    // document.body.appendChild( renderer.domElement );\n    // camera.position.z = 300;\n\n    // var animate = function () {\n    //    renderer.render( scene, camera );\n    // };\n    // animate();\n    // === THREE.JS EXAMPLE CODE END ===\n  }\n  render() {\n    return <div />;\n  }\n}\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}
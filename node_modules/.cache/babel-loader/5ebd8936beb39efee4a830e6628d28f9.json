{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/ThreeViewer.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\n\nclass ThreeView extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onWindowResize = () => {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n\n    this.start = () => {\n      if (!this.frameId) {\n        this.frameId = requestAnimationFrame(this.animate);\n      }\n    };\n\n    this.stop = () => {\n      cancelAnimationFrame(this.frameId);\n    };\n\n    this.animate = () => {\n      this.renderScene();\n      this.frameId = window.requestAnimationFrame(this.animate);\n    };\n\n    this.renderScene = () => {\n      // calculate objects intersecting the picking ray\n      const intersects = this.raycaster.intersectObjects(this.cubesToBePicked);\n\n      if (intersects.length > 0) {\n        // if the closest object intersected is not the currently stored intersection object\n        if (intersects[0].object != this.INTERSECTED) {\n          // restore previous intersection object (if it exists) to its original color\n          if (this.INTERSECTED) this.INTERSECTED.material.color.setHex(this.INTERSECTED.currentHex); // store reference to closest object as current intersection object\n\n          this.INTERSECTED = intersects[0].object; // store color of closest object (for later restoration)\n\n          this.INTERSECTED.currentHex = this.INTERSECTED.material.color.getHex(); // set a new color for closest object\n\n          this.INTERSECTED.material.color.setHex(0xFF00FF);\n        }\n      } else // there are no intersections\n        {\n          // restore previous intersection object (if it exists) to its original color\n          if (this.INTERSECTED) {\n            this.INTERSECTED.material.color.setHex(this.INTERSECTED.currentHex);\n          } // remove previous intersection object reference\n          //     by setting current intersection object to \"nothing\"\n\n\n          this.INTERSECTED = null;\n        }\n\n      if (this.renderer) this.renderer.render(this.scene, this.camera);\n      this.controls.update();\n    };\n  }\n\n  onMouseMove(event) {\n    // calculate mouse position in normalized device coordinates\n    // (-1 to +1) for both components\n    this.mouse.x = event.clientX / window.innerWidth * 2 - 1;\n    this.mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.onWindowResize, false);\n    this.scene = new THREE.Scene(); //Add Renderer\n\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    this.renderer.setSize(window.innerWidth, window.innerWidth);\n    this.mount.appendChild(this.renderer.domElement); //add Camera\n\n    this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);\n    this.camera.position.set(0, 2000, 1500); // mouse and raycaster\n\n    this.raycaster = new THREE.Raycaster();\n    this.mouse = new THREE.Vector2();\n    this.raycaster.setFromCamera(this.mouse, this.camera); //Camera Controls\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.update();\n    this.INTERSECTED = null;\n    this.cubesToBePicked = [];\n    window.addEventListener('mousemove', this.onMouseMove, false);\n    this.addModels();\n    this.renderScene();\n    this.start();\n  }\n\n  addModels() {\n    var worldsize = 6000;\n    var plane = new THREE.Mesh(new THREE.PlaneGeometry(worldsize, worldsize, 1), new THREE.MeshBasicMaterial({\n      color: \"grey\",\n      opacity: 0.3,\n      transparent: true\n    }));\n    plane.rotation.set(-Math.PI / 2, 0, 0);\n    this.scene.add(plane); //grid\n\n    var size = 3000,\n        step = 40;\n    var geometry, material, line;\n\n    for (let i = -size; i <= size; i += step) {\n      if (i / step % 2 === 0) {\n        continue;\n      }\n\n      geometry = new THREE.Geometry();\n      material = new THREE.LineBasicMaterial({\n        color: \"purple\"\n      });\n      geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n      geometry.vertices.push(new THREE.Vector3(size, 0, i));\n      line = new THREE.LineSegments(geometry, material);\n      this.scene.add(line);\n    }\n\n    for (let i = -size; i <= size; i += step) {\n      if (i / step % 2 === 0) {\n        continue;\n      }\n\n      geometry = new THREE.Geometry();\n      material = new THREE.LineBasicMaterial({\n        color: \"green\"\n      });\n      geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n      geometry.vertices.push(new THREE.Vector3(i, 0, size));\n      line = new THREE.LineSegments(geometry, material);\n      this.scene.add(line);\n    }\n\n    var offset = 2000,\n        side = 50,\n        sidegap = 80;\n\n    for (let i = 0; i < allQuestions.length; i += 1) {\n      var questionIndex = Number(allQuestions[i][\"id\"]) - 1;\n      var bottommaterial;\n\n      if (allQuestions[i][\"difficulty\"] === \"1\") {\n        bottommaterial = new THREE.MeshBasicMaterial({\n          color: 0x00cc00\n        });\n      } else if (allQuestions[i][\"difficulty\"] === \"2\") {\n        bottommaterial = new THREE.MeshBasicMaterial({\n          color: 0xff9900\n        });\n      } else {\n        bottommaterial = new THREE.MeshBasicMaterial({\n          color: 0xD63333\n        });\n      }\n\n      var bottomgeometry = new THREE.BoxGeometry(60, 20, 60);\n      var row = Math.floor(questionIndex / side);\n      var col = questionIndex % side;\n      bottomgeometry.translate(col * sidegap - offset, 10, row * sidegap - offset);\n      var bottommesh = new THREE.Mesh(bottomgeometry, bottommaterial);\n      this.scene.add(bottommesh);\n      this.cubesToBePicked.push(bottommesh); //   window.addEventListener( 'mousemove', onMouseMove, false );\n    }\n  }\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mount => {\n        this.mount = mount;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default ThreeView;","map":{"version":3,"sources":["/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/ThreeViewer.js"],"names":["React","Component","ReactDOM","THREE","OrbitControls","allQuestions","ThreeView","onWindowResize","camera","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","renderer","setSize","start","frameId","requestAnimationFrame","animate","stop","cancelAnimationFrame","renderScene","intersects","raycaster","intersectObjects","cubesToBePicked","length","object","INTERSECTED","material","color","setHex","currentHex","getHex","render","scene","controls","update","onMouseMove","event","mouse","x","clientX","y","clientY","componentDidMount","addEventListener","Scene","WebGLRenderer","antialias","mount","appendChild","domElement","PerspectiveCamera","position","set","Raycaster","Vector2","setFromCamera","addModels","worldsize","plane","Mesh","PlaneGeometry","MeshBasicMaterial","opacity","transparent","rotation","Math","PI","add","size","step","geometry","line","i","Geometry","LineBasicMaterial","vertices","push","Vector3","LineSegments","offset","side","sidegap","questionIndex","Number","bottommaterial","bottomgeometry","BoxGeometry","row","floor","col","translate","bottommesh","componentWillUnmount","removeChild"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\n\nclass ThreeView extends Component {\nonMouseMove(event){\n    // calculate mouse position in normalized device coordinates\n    // (-1 to +1) for both components\n    this.mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n    this.mouse.y = - (event.clientY / window.innerHeight ) * 2 + 1;\n    \n    }\n  onWindowResize = () => {\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.onWindowResize, false);\n    \n    this.scene = new THREE.Scene();\n\n    //Add Renderer\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n    this.renderer.setSize(window.innerWidth, window.innerWidth);\n    this.mount.appendChild(this.renderer.domElement);\n\n    //add Camera\n    this.camera = new THREE.PerspectiveCamera(\n        45,\n        window.innerWidth / window.innerHeight,\n        1,\n        10000\n      );\n    this.camera.position.set(0, 2000, 1500);\n\n    // mouse and raycaster\n    this.raycaster = new THREE.Raycaster();\n    this.mouse = new THREE.Vector2();\n    this.raycaster.setFromCamera( this.mouse, this.camera );\n    //Camera Controls\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.update();\n\n    \n    this.INTERSECTED = null;\t\n    this.cubesToBePicked = [];\n    window.addEventListener( 'mousemove', this.onMouseMove, false );\n    this.addModels();\n    this.renderScene();\n    this.start();\n  }\n  \n  addModels() {\n\n    var worldsize = 6000;\n    var plane = new THREE.Mesh(\n        new THREE.PlaneGeometry(worldsize, worldsize, 1),\n        new THREE.MeshBasicMaterial({\n          color: \"grey\",\n          opacity: 0.3,\n          transparent: true,\n        })\n      );\n      plane.rotation.set(-Math.PI / 2, 0, 0);\n      this.scene.add(plane);\n      //grid\n      var size = 3000,\n        step = 40;\n      var geometry, material, line;\n      for (let i = -size; i <= size; i += step) {\n        if ((i / step) % 2 === 0) {\n          continue;\n        }\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"purple\",\n        });\n        geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n        geometry.vertices.push(new THREE.Vector3(size, 0, i));\n        line = new THREE.LineSegments(geometry, material);\n        this.scene.add(line);\n      }\n      for (let i = -size; i <= size; i += step) {\n        if ((i / step) % 2 === 0) {\n          continue;\n        }\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"green\",\n        });\n        geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n        geometry.vertices.push(new THREE.Vector3(i, 0, size));\n        line = new THREE.LineSegments(geometry, material);\n        this.scene.add(line);\n      }\n      var offset = 2000,\n      side = 50,\n      sidegap = 80;\n    for (let i = 0; i < allQuestions.length; i += 1) {\n      var questionIndex = Number(allQuestions[i][\"id\"]) - 1;\n      var bottommaterial;\n      if (allQuestions[i][\"difficulty\"] === \"1\") {\n        bottommaterial = new THREE.MeshBasicMaterial({ color: 0x00cc00 });\n      } else if (allQuestions[i][\"difficulty\"] === \"2\") {\n        bottommaterial = new THREE.MeshBasicMaterial({ color: 0xff9900 });\n      } else {\n        bottommaterial = new THREE.MeshBasicMaterial({ color: 0xD63333 });\n      }\n      var bottomgeometry = new THREE.BoxGeometry(60, 20, 60);\n      var row = Math.floor(questionIndex / side);\n      var col = questionIndex % side;\n      bottomgeometry.translate(\n        col * sidegap - offset,\n        10,\n        row * sidegap - offset\n      );\n      var bottommesh = new THREE.Mesh(bottomgeometry, bottommaterial);\n      this.scene.add(bottommesh);\n      this.cubesToBePicked.push(bottommesh);\n    //   window.addEventListener( 'mousemove', onMouseMove, false );\n    \n      \n    }\n\n\n  }\n\n\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n \n  }\n  start = () => {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  };\n\n\n  stop = () => {\n    cancelAnimationFrame(this.frameId);\n  };\n\n\n  animate = () => {\n    this.renderScene();\n    this.frameId = window.requestAnimationFrame(this.animate);\n  };\n\n  renderScene = () => {\n    // calculate objects intersecting the picking ray\n    const intersects = this.raycaster.intersectObjects( this.cubesToBePicked );\n    if ( intersects.length > 0 )\n    {\n        // if the closest object intersected is not the currently stored intersection object\n        if ( intersects[ 0 ].object != this.INTERSECTED )\n        {\n            // restore previous intersection object (if it exists) to its original color\n            if ( this.INTERSECTED )\n                this.INTERSECTED.material.color.setHex( this.INTERSECTED.currentHex );\n            // store reference to closest object as current intersection object\n            this.INTERSECTED = intersects[ 0 ].object;\n            // store color of closest object (for later restoration)\n            this.INTERSECTED.currentHex = this.INTERSECTED.material.color.getHex();\n            // set a new color for closest object\n            this.INTERSECTED.material.color.setHex( 0xFF00FF );\n\n        }\n\n    }\n    else // there are no intersections\n    {\n        // restore previous intersection object (if it exists) to its original color\n        if ( this.INTERSECTED ){\n            this.INTERSECTED.material.color.setHex( this.INTERSECTED.currentHex );\n          }\n        // remove previous intersection object reference\n        //     by setting current intersection object to \"nothing\"\n        \n        this.INTERSECTED = null;\n    \n    }\n    if (this.renderer) this.renderer.render(this.scene, this.camera);\n    this.controls.update();\n    \n\n  };\n\n  render() {\n    return (\n      <div\n        ref={mount => {\n          this.mount = mount;\n        }}\n      />\n    );\n  }\n}\nexport default ThreeView;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/ThreeViewer.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\n\nclass ThreeView extends Component {\n  componentDidMount() {\n    // --- three.js applied here ---\n    var worldsize = 6000;\n    var camera, scene, renderer;\n    scene = new THREE.Scene(); // scene.background = new THREE.Color( 0xf0f0f0 );\n\n    camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);\n    renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    window.addEventListener(\"resize\", onWindowResize, false);\n    this.mount.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    camera.position.set(0, 2000, 1500);\n    controls.update(); // raycasting + mouse movement tracking\n\n    const raycaster = new THREE.Raycaster();\n    const mouse = new THREE.Vector2();\n    let INTERSECTED;\n    var cubesToBePicked = [];\n    gridPlane();\n    blocksInitial(); //axes();\n\n    render();\n\n    function axes() {\n      //axes + origin (optional)\n      const axesHelper = new THREE.AxesHelper(20);\n      scene.add(axesHelper);\n      const origingeometry = new THREE.BoxGeometry(1, 1, 1);\n      const originmaterial = new THREE.MeshBasicMaterial({\n        color: \"white\"\n      });\n      const origin = new THREE.Mesh(origingeometry, originmaterial);\n      scene.add(origin);\n    }\n\n    function gridPlane() {\n      //grid + background plane\n      var plane = new THREE.Mesh(new THREE.PlaneGeometry(worldsize, worldsize, 1), new THREE.MeshBasicMaterial({\n        color: \"grey\",\n        opacity: 0.3,\n        transparent: true\n      }));\n      plane.rotation.set(-Math.PI / 2, 0, 0);\n      scene.add(plane); //grid\n\n      var size = 3000,\n          step = 40;\n      var geometry, material, line;\n\n      for (let i = -size; i <= size; i += step) {\n        if (i / step % 2 === 0) {\n          continue;\n        }\n\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"purple\"\n        });\n        geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n        geometry.vertices.push(new THREE.Vector3(size, 0, i));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n      }\n\n      for (let i = -size; i <= size; i += step) {\n        if (i / step % 2 === 0) {\n          continue;\n        }\n\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"green\"\n        });\n        geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n        geometry.vertices.push(new THREE.Vector3(i, 0, size));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n      }\n    }\n\n    function blocksInitial() {\n      // blocks\n      var offset = 2000,\n          side = 50,\n          sidegap = 80;\n\n      for (let i = 0; i < allQuestions.length; i += 1) {\n        var questionIndex = Number(allQuestions[i][\"id\"]) - 1;\n        var bottommaterial;\n\n        if (allQuestions[i][\"difficulty\"] === \"1\") {\n          bottommaterial = new THREE.MeshBasicMaterial({\n            color: 0x00cc00\n          });\n        } else if (allQuestions[i][\"difficulty\"] === \"2\") {\n          bottommaterial = new THREE.MeshBasicMaterial({\n            color: 0xff9900\n          });\n        } else {\n          bottommaterial = new THREE.MeshBasicMaterial({\n            color: 0xD63333\n          });\n        }\n\n        var bottomgeometry = new THREE.BoxGeometry(60, 20, 60);\n        var row = Math.floor(questionIndex / side);\n        var col = questionIndex % side;\n        bottomgeometry.translate(col * sidegap - offset, 10, row * sidegap - offset);\n        var bottommesh = new THREE.Mesh(bottomgeometry, bottommaterial);\n        scene.add(bottommesh);\n        cubesToBePicked.push(bottommesh);\n        window.addEventListener('mousemove', onMouseMove, false);\n      }\n    }\n\n    function onWindowResize() {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    function render() {\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(cubesToBePicked);\n\n      if (intersects.length > 0) {\n        if (intersects[0].object != INTERSECTED) {\n          if (INTERSECTED) INTERSECTED.material.color.setHex(INTERSECTED.currentHex);\n          INTERSECTED = intersects[0].object;\n          INTERSECTED.currentHex = INTERSECTED.material.color.getHex();\n          INTERSECTED.material.color.setHex(0xFF00FF);\n        }\n      } else // there are no intersections\n        {\n          if (INTERSECTED) {\n            INTERSECTED.material.color.setHex(INTERSECTED.currentHex);\n          }\n\n          INTERSECTED = null;\n        }\n\n      requestAnimationFrame(render);\n      controls.update();\n      renderer.render(scene, camera);\n    }\n\n    function onMouseMove(event) {\n      mouse.x = event.clientX / window.innerWidth * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n    } // --- three.js parts end ---\n\n  }\n\n  componentWillUnmount() {\n    this.mount.removeChild(renderer.domElement);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mount => {\n        this.mount = mount;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default ThreeView;","map":{"version":3,"sources":["/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/ThreeViewer.js"],"names":["React","Component","ReactDOM","THREE","OrbitControls","allQuestions","ThreeView","componentDidMount","worldsize","camera","scene","renderer","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","antialias","setSize","addEventListener","onWindowResize","mount","appendChild","domElement","controls","position","set","update","raycaster","Raycaster","mouse","Vector2","INTERSECTED","cubesToBePicked","gridPlane","blocksInitial","render","axes","axesHelper","AxesHelper","add","origingeometry","BoxGeometry","originmaterial","MeshBasicMaterial","color","origin","Mesh","plane","PlaneGeometry","opacity","transparent","rotation","Math","PI","size","step","geometry","material","line","i","Geometry","LineBasicMaterial","vertices","push","Vector3","LineSegments","offset","side","sidegap","length","questionIndex","Number","bottommaterial","bottomgeometry","row","floor","col","translate","bottommesh","onMouseMove","aspect","updateProjectionMatrix","setFromCamera","intersects","intersectObjects","object","setHex","currentHex","getHex","requestAnimationFrame","event","x","clientX","y","clientY","componentWillUnmount","removeChild"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,OAAOC,YAAP,MAAyB,iBAAzB;;AAEA,MAAMC,SAAN,SAAwBL,SAAxB,CAAkC;AAClCM,EAAAA,iBAAiB,GAAG;AAChB;AACA,QAAIC,SAAS,GAAG,IAAhB;AACA,QAAIC,MAAJ,EAAYC,KAAZ,EAAmBC,QAAnB;AACAD,IAAAA,KAAK,GAAG,IAAIP,KAAK,CAACS,KAAV,EAAR,CAJgB,CAKhB;;AACAH,IAAAA,MAAM,GAAG,IAAIN,KAAK,CAACU,iBAAV,CACL,EADK,EAELC,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACE,WAFtB,EAGL,CAHK,EAIL,KAJK,CAAT;AAMAL,IAAAA,QAAQ,GAAG,IAAIR,KAAK,CAACc,aAAV,CAAwB;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAxB,CAAX;AACAP,IAAAA,QAAQ,CAACQ,OAAT,CAAiBL,MAAM,CAACC,UAAxB,EAAoCD,MAAM,CAACE,WAA3C;AACAF,IAAAA,MAAM,CAACM,gBAAP,CAAwB,QAAxB,EAAkCC,cAAlC,EAAkD,KAAlD;AACA,SAAKC,KAAL,CAAWC,WAAX,CAAuBZ,QAAQ,CAACa,UAAhC;AAEA,UAAMC,QAAQ,GAAG,IAAIrB,aAAJ,CAAkBK,MAAlB,EAA0BE,QAAQ,CAACa,UAAnC,CAAjB;AACAf,IAAAA,MAAM,CAACiB,QAAP,CAAgBC,GAAhB,CAAoB,CAApB,EAAuB,IAAvB,EAA6B,IAA7B;AACAF,IAAAA,QAAQ,CAACG,MAAT,GAnBgB,CAqBhB;;AACA,UAAMC,SAAS,GAAG,IAAI1B,KAAK,CAAC2B,SAAV,EAAlB;AACA,UAAMC,KAAK,GAAG,IAAI5B,KAAK,CAAC6B,OAAV,EAAd;AACA,QAAIC,WAAJ;AACA,QAAIC,eAAe,GAAG,EAAtB;AACAC,IAAAA,SAAS;AACTC,IAAAA,aAAa,GA3BG,CA4BhB;;AACAC,IAAAA,MAAM;;AAIN,aAASC,IAAT,GAAe;AACX;AACA,YAAMC,UAAU,GAAG,IAAIpC,KAAK,CAACqC,UAAV,CAAsB,EAAtB,CAAnB;AACA9B,MAAAA,KAAK,CAAC+B,GAAN,CAAWF,UAAX;AACA,YAAMG,cAAc,GAAG,IAAIvC,KAAK,CAACwC,WAAV,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,CAAvB;AACA,YAAMC,cAAc,GAAG,IAAIzC,KAAK,CAAC0C,iBAAV,CAA6B;AAACC,QAAAA,KAAK,EAAE;AAAR,OAA7B,CAAvB;AACA,YAAMC,MAAM,GAAG,IAAI5C,KAAK,CAAC6C,IAAV,CAAgBN,cAAhB,EAAgCE,cAAhC,CAAf;AACAlC,MAAAA,KAAK,CAAC+B,GAAN,CAAWM,MAAX;AACH;;AAED,aAASZ,SAAT,GAAoB;AAChB;AACA,UAAIc,KAAK,GAAG,IAAI9C,KAAK,CAAC6C,IAAV,CACZ,IAAI7C,KAAK,CAAC+C,aAAV,CAAwB1C,SAAxB,EAAmCA,SAAnC,EAA8C,CAA9C,CADY,EAEZ,IAAIL,KAAK,CAAC0C,iBAAV,CAA4B;AACxBC,QAAAA,KAAK,EAAE,MADiB;AAExBK,QAAAA,OAAO,EAAE,GAFe;AAGxBC,QAAAA,WAAW,EAAE;AAHW,OAA5B,CAFY,CAAZ;AAQAH,MAAAA,KAAK,CAACI,QAAN,CAAe1B,GAAf,CAAmB,CAAC2B,IAAI,CAACC,EAAN,GAAW,CAA9B,EAAiC,CAAjC,EAAoC,CAApC;AACA7C,MAAAA,KAAK,CAAC+B,GAAN,CAAUQ,KAAV,EAXgB,CAYhB;;AACA,UAAIO,IAAI,GAAG,IAAX;AAAA,UACAC,IAAI,GAAG,EADP;AAEA,UAAIC,QAAJ,EAAcC,QAAd,EAAwBC,IAAxB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAACL,IAAd,EAAoBK,CAAC,IAAIL,IAAzB,EAA+BK,CAAC,IAAIJ,IAApC,EAA0C;AAC1C,YAAKI,CAAC,GAAGJ,IAAL,GAAa,CAAb,KAAmB,CAAvB,EAA0B;AACtB;AACH;;AACDC,QAAAA,QAAQ,GAAG,IAAIvD,KAAK,CAAC2D,QAAV,EAAX;AACAH,QAAAA,QAAQ,GAAG,IAAIxD,KAAK,CAAC4D,iBAAV,CAA4B;AACnCjB,UAAAA,KAAK,EAAE;AAD4B,SAA5B,CAAX;AAGAY,QAAAA,QAAQ,CAACM,QAAT,CAAkBC,IAAlB,CAAuB,IAAI9D,KAAK,CAAC+D,OAAV,CAAkB,CAACV,IAAnB,EAAyB,CAAzB,EAA4BK,CAA5B,CAAvB;AACAH,QAAAA,QAAQ,CAACM,QAAT,CAAkBC,IAAlB,CAAuB,IAAI9D,KAAK,CAAC+D,OAAV,CAAkBV,IAAlB,EAAwB,CAAxB,EAA2BK,CAA3B,CAAvB;AACAD,QAAAA,IAAI,GAAG,IAAIzD,KAAK,CAACgE,YAAV,CAAuBT,QAAvB,EAAiCC,QAAjC,CAAP;AACAjD,QAAAA,KAAK,CAAC+B,GAAN,CAAUmB,IAAV;AACC;;AACD,WAAK,IAAIC,CAAC,GAAG,CAACL,IAAd,EAAoBK,CAAC,IAAIL,IAAzB,EAA+BK,CAAC,IAAIJ,IAApC,EAA0C;AAC1C,YAAKI,CAAC,GAAGJ,IAAL,GAAa,CAAb,KAAmB,CAAvB,EAA0B;AACtB;AACH;;AACDC,QAAAA,QAAQ,GAAG,IAAIvD,KAAK,CAAC2D,QAAV,EAAX;AACAH,QAAAA,QAAQ,GAAG,IAAIxD,KAAK,CAAC4D,iBAAV,CAA4B;AACnCjB,UAAAA,KAAK,EAAE;AAD4B,SAA5B,CAAX;AAGAY,QAAAA,QAAQ,CAACM,QAAT,CAAkBC,IAAlB,CAAuB,IAAI9D,KAAK,CAAC+D,OAAV,CAAkBL,CAAlB,EAAqB,CAArB,EAAwB,CAACL,IAAzB,CAAvB;AACAE,QAAAA,QAAQ,CAACM,QAAT,CAAkBC,IAAlB,CAAuB,IAAI9D,KAAK,CAAC+D,OAAV,CAAkBL,CAAlB,EAAqB,CAArB,EAAwBL,IAAxB,CAAvB;AACAI,QAAAA,IAAI,GAAG,IAAIzD,KAAK,CAACgE,YAAV,CAAuBT,QAAvB,EAAiCC,QAAjC,CAAP;AACAjD,QAAAA,KAAK,CAAC+B,GAAN,CAAUmB,IAAV;AACC;AACJ;;AAED,aAASxB,aAAT,GAAyB;AACrB;AACA,UAAIgC,MAAM,GAAG,IAAb;AAAA,UACAC,IAAI,GAAG,EADP;AAAA,UAEAC,OAAO,GAAG,EAFV;;AAGA,WAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGxD,YAAY,CAACkE,MAAjC,EAAyCV,CAAC,IAAI,CAA9C,EAAiD;AACjD,YAAIW,aAAa,GAAGC,MAAM,CAACpE,YAAY,CAACwD,CAAD,CAAZ,CAAgB,IAAhB,CAAD,CAAN,GAAgC,CAApD;AACA,YAAIa,cAAJ;;AACA,YAAIrE,YAAY,CAACwD,CAAD,CAAZ,CAAgB,YAAhB,MAAkC,GAAtC,EAA2C;AACvCa,UAAAA,cAAc,GAAG,IAAIvE,KAAK,CAAC0C,iBAAV,CAA4B;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAA5B,CAAjB;AACH,SAFD,MAEO,IAAIzC,YAAY,CAACwD,CAAD,CAAZ,CAAgB,YAAhB,MAAkC,GAAtC,EAA2C;AAC9Ca,UAAAA,cAAc,GAAG,IAAIvE,KAAK,CAAC0C,iBAAV,CAA4B;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAA5B,CAAjB;AACH,SAFM,MAEA;AACH4B,UAAAA,cAAc,GAAG,IAAIvE,KAAK,CAAC0C,iBAAV,CAA4B;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAA5B,CAAjB;AACH;;AACD,YAAI6B,cAAc,GAAG,IAAIxE,KAAK,CAACwC,WAAV,CAAsB,EAAtB,EAA0B,EAA1B,EAA8B,EAA9B,CAArB;AACA,YAAIiC,GAAG,GAAGtB,IAAI,CAACuB,KAAL,CAAWL,aAAa,GAAGH,IAA3B,CAAV;AACA,YAAIS,GAAG,GAAGN,aAAa,GAAGH,IAA1B;AACAM,QAAAA,cAAc,CAACI,SAAf,CACID,GAAG,GAAGR,OAAN,GAAgBF,MADpB,EAEI,EAFJ,EAGIQ,GAAG,GAAGN,OAAN,GAAgBF,MAHpB;AAKA,YAAIY,UAAU,GAAG,IAAI7E,KAAK,CAAC6C,IAAV,CAAe2B,cAAf,EAA+BD,cAA/B,CAAjB;AACAhE,QAAAA,KAAK,CAAC+B,GAAN,CAAUuC,UAAV;AACA9C,QAAAA,eAAe,CAAC+B,IAAhB,CAAqBe,UAArB;AACAlE,QAAAA,MAAM,CAACM,gBAAP,CAAyB,WAAzB,EAAsC6D,WAAtC,EAAmD,KAAnD;AACC;AACJ;;AAED,aAAS5D,cAAT,GAA0B;AACtBZ,MAAAA,MAAM,CAACyE,MAAP,GAAgBpE,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACE,WAA3C;AACAP,MAAAA,MAAM,CAAC0E,sBAAP;AAEAxE,MAAAA,QAAQ,CAACQ,OAAT,CAAiBL,MAAM,CAACC,UAAxB,EAAoCD,MAAM,CAACE,WAA3C;AACH;;AAED,aAASqB,MAAT,GAAkB;AACdR,MAAAA,SAAS,CAACuD,aAAV,CAAyBrD,KAAzB,EAAgCtB,MAAhC;AAEA,YAAM4E,UAAU,GAAGxD,SAAS,CAACyD,gBAAV,CAA4BpD,eAA5B,CAAnB;;AACA,UAAKmD,UAAU,CAACd,MAAX,GAAoB,CAAzB,EACA;AACI,YAAKc,UAAU,CAAE,CAAF,CAAV,CAAgBE,MAAhB,IAA0BtD,WAA/B,EACA;AACI,cAAKA,WAAL,EACIA,WAAW,CAAC0B,QAAZ,CAAqBb,KAArB,CAA2B0C,MAA3B,CAAmCvD,WAAW,CAACwD,UAA/C;AACJxD,UAAAA,WAAW,GAAGoD,UAAU,CAAE,CAAF,CAAV,CAAgBE,MAA9B;AACAtD,UAAAA,WAAW,CAACwD,UAAZ,GAAyBxD,WAAW,CAAC0B,QAAZ,CAAqBb,KAArB,CAA2B4C,MAA3B,EAAzB;AACAzD,UAAAA,WAAW,CAAC0B,QAAZ,CAAqBb,KAArB,CAA2B0C,MAA3B,CAAmC,QAAnC;AAEH;AACJ,OAXD,MAYK;AACL;AACI,cAAKvD,WAAL,EAAkB;AACdA,YAAAA,WAAW,CAAC0B,QAAZ,CAAqBb,KAArB,CAA2B0C,MAA3B,CAAmCvD,WAAW,CAACwD,UAA/C;AACC;;AACLxD,UAAAA,WAAW,GAAG,IAAd;AAEH;;AACD0D,MAAAA,qBAAqB,CAACtD,MAAD,CAArB;AACAZ,MAAAA,QAAQ,CAACG,MAAT;AACAjB,MAAAA,QAAQ,CAAC0B,MAAT,CAAgB3B,KAAhB,EAAuBD,MAAvB;AACH;;AAED,aAASwE,WAAT,CAAsBW,KAAtB,EAA8B;AAC1B7D,MAAAA,KAAK,CAAC8D,CAAN,GAAYD,KAAK,CAACE,OAAN,GAAgBhF,MAAM,CAACC,UAAzB,GAAwC,CAAxC,GAA4C,CAAtD;AACAgB,MAAAA,KAAK,CAACgE,CAAN,GAAU,EAAIH,KAAK,CAACI,OAAN,GAAgBlF,MAAM,CAACE,WAA3B,IAA2C,CAA3C,GAA+C,CAAzD;AAEH,KA7Je,CA8JhB;;AAEH;;AAEDiF,EAAAA,oBAAoB,GAAG;AACnB,SAAK3E,KAAL,CAAW4E,WAAX,CAAuBvF,QAAQ,CAACa,UAAhC;AAEH;;AAEDa,EAAAA,MAAM,GAAG;AACL,wBACE;AACE,MAAA,GAAG,EAAEf,KAAK,IAAI;AACZ,aAAKA,KAAL,GAAaA,KAAb;AACD;AAHH;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AAhL+B;;AAkLlC,eAAehB,SAAf","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\n\nclass ThreeView extends Component {\ncomponentDidMount() {\n    // --- three.js applied here ---\n    var worldsize = 6000;\n    var camera, scene, renderer;\n    scene = new THREE.Scene();\n    // scene.background = new THREE.Color( 0xf0f0f0 );\n    camera = new THREE.PerspectiveCamera(\n        45,\n        window.innerWidth / window.innerHeight,\n        1,\n        10000\n    );\n    renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    window.addEventListener(\"resize\", onWindowResize, false);\n    this.mount.appendChild(renderer.domElement);\n\n    const controls = new OrbitControls(camera, renderer.domElement);\n    camera.position.set(0, 2000, 1500);\n    controls.update();\n\n    // raycasting + mouse movement tracking\n    const raycaster = new THREE.Raycaster();\n    const mouse = new THREE.Vector2();\t\t\n    let INTERSECTED;\t\n    var cubesToBePicked = [];\n    gridPlane();\n    blocksInitial();\n    //axes();\n    render();\n     \n    \n    \n    function axes(){\n        //axes + origin (optional)\n        const axesHelper = new THREE.AxesHelper( 20 );\n        scene.add( axesHelper );\n        const origingeometry = new THREE.BoxGeometry( 1, 1, 1 );\n        const originmaterial = new THREE.MeshBasicMaterial( {color: \"white\"} );\n        const origin = new THREE.Mesh( origingeometry, originmaterial );\n        scene.add( origin );\n    }\n\n    function gridPlane(){\n        //grid + background plane\n        var plane = new THREE.Mesh(\n        new THREE.PlaneGeometry(worldsize, worldsize, 1),\n        new THREE.MeshBasicMaterial({\n            color: \"grey\",\n            opacity: 0.3,\n            transparent: true,\n        })\n        );\n        plane.rotation.set(-Math.PI / 2, 0, 0);\n        scene.add(plane);\n        //grid\n        var size = 3000,\n        step = 40;\n        var geometry, material, line;\n        for (let i = -size; i <= size; i += step) {\n        if ((i / step) % 2 === 0) {\n            continue;\n        }\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n            color: \"purple\",\n        });\n        geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n        geometry.vertices.push(new THREE.Vector3(size, 0, i));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n        }\n        for (let i = -size; i <= size; i += step) {\n        if ((i / step) % 2 === 0) {\n            continue;\n        }\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n            color: \"green\",\n        });\n        geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n        geometry.vertices.push(new THREE.Vector3(i, 0, size));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n        }\n    }\n    \n    function blocksInitial() {\n        // blocks\n        var offset = 2000,\n        side = 50,\n        sidegap = 80;\n        for (let i = 0; i < allQuestions.length; i += 1) {\n        var questionIndex = Number(allQuestions[i][\"id\"]) - 1;\n        var bottommaterial;\n        if (allQuestions[i][\"difficulty\"] === \"1\") {\n            bottommaterial = new THREE.MeshBasicMaterial({ color: 0x00cc00 });\n        } else if (allQuestions[i][\"difficulty\"] === \"2\") {\n            bottommaterial = new THREE.MeshBasicMaterial({ color: 0xff9900 });\n        } else {\n            bottommaterial = new THREE.MeshBasicMaterial({ color: 0xD63333 });\n        }\n        var bottomgeometry = new THREE.BoxGeometry(60, 20, 60);\n        var row = Math.floor(questionIndex / side);\n        var col = questionIndex % side;\n        bottomgeometry.translate(\n            col * sidegap - offset,\n            10,\n            row * sidegap - offset\n        );\n        var bottommesh = new THREE.Mesh(bottomgeometry, bottommaterial);\n        scene.add(bottommesh);\n        cubesToBePicked.push(bottommesh);\n        window.addEventListener( 'mousemove', onMouseMove, false );\n        }\n    }\n\n    function onWindowResize() {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n\n        renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    function render() {\n        raycaster.setFromCamera( mouse, camera );\n\n        const intersects = raycaster.intersectObjects( cubesToBePicked );\n        if ( intersects.length > 0 )\n        {\n            if ( intersects[ 0 ].object != INTERSECTED )\n            {\n                if ( INTERSECTED )\n                    INTERSECTED.material.color.setHex( INTERSECTED.currentHex );\n                INTERSECTED = intersects[ 0 ].object;\n                INTERSECTED.currentHex = INTERSECTED.material.color.getHex();\n                INTERSECTED.material.color.setHex( 0xFF00FF );\n\n            }\n        }\n        else // there are no intersections\n        {\n            if ( INTERSECTED ){\n                INTERSECTED.material.color.setHex( INTERSECTED.currentHex );\n                }                \n            INTERSECTED = null;\n        \n        }\n        requestAnimationFrame(render);\n        controls.update();\n        renderer.render(scene, camera);\n    }\n\n    function onMouseMove( event ) {\n        mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n        mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\n    \n    }\n    // --- three.js parts end ---\n        \n}\n\ncomponentWillUnmount() {\n    this.mount.removeChild(renderer.domElement);\n \n}\n\nrender() {\n    return (\n      <div\n        ref={mount => {\n          this.mount = mount;\n        }}\n      />\n    );\n  }\n}\nexport default ThreeView;"]},"metadata":{},"sourceType":"module"}
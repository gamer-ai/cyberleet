{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/index.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\n\nclass App extends Component {\n  componentDidMount() {\n    // === THREE.JS CODE START ===\n    var camera, scene, renderer;\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);\n    renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    camera.position.set(0, 20, 100);\n    controls.update();\n    gridBackground();\n\n    function gridBackground() {\n      //plane x-y\n      // var plane = new THREE.Mesh(\n      //   new THREE.PlaneGeometry(2000, 2000, 1),\n      //   new THREE.MeshBasicMaterial({\n      //       color: \"grey\",\n      //       opacity: 0.3,\n      //       transparent:true\n      //   }));\n      // plane.rotation.set(-Math.PI/2,0,0);\n      // scene.add(plane);\n      //\n      //axes\n      const axesHelper = new THREE.AxesHelper(20);\n      scene.add(axesHelper);\n      const origingeometry = new THREE.BoxGeometry(1, 1, 1);\n      const originmaterial = new THREE.MeshBasicMaterial({\n        color: \"white\"\n      });\n      const origin = new THREE.Mesh(origingeometry, originmaterial);\n      scene.add(origin); //\n      // grid alternative:\n      // const gridsize = 2000;\n      // const divisions = 20;\n      // const gridHelper = new THREE.GridHelper( gridsize, divisions );\n      // scene.add( gridHelper );\n      //\n      //ambient light\n\n      const light = new THREE.AmbientLight(0xFBFBFB); // white light\n\n      scene.add(light);\n      var mapsize = 600,\n          mapstep = 40;\n\n      for (let j = -mapsize; j <= mapsize; j += mapstep) {\n        for (let i = -mapsize; i <= mapsize; i += mapstep) {\n          var boxgeometry = new THREE.BoxBufferGeometry(20, 20, 20);\n          boxgeometry.translate(i, 20, j);\n          var boxmaterial = new THREE.MeshNormalMaterial();\n          var boxmesh = new THREE.Mesh(boxgeometry, boxmaterial);\n          scene.add(boxmesh); // const box = new THREE.Box3();\n          // box.setFromCenterAndSize( new THREE.Vector3( i, 40, j ), new THREE.Vector3( 40, 40, 40 ) );\n          // const helper = new THREE.Box3Helper( box, 0xffff00 );\n          // scene.add( helper );\n        }\n      } //grid\n\n\n      var size = 1000,\n          step = 20;\n      var geometry, material, line;\n\n      for (let i = -size; i <= size; i += step) {\n        if (i / step % 2 == 0) {\n          continue;\n        }\n\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"purple\"\n        });\n        geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n        geometry.vertices.push(new THREE.Vector3(size, 0, i));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n      }\n\n      for (let i = -size; i <= size; i += step) {\n        if (i / step % 2 == 0) {\n          continue;\n        }\n\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"green\"\n        });\n        geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n        geometry.vertices.push(new THREE.Vector3(i, 0, size));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n      } //grid\n      // call the render()\n\n\n      render();\n    }\n\n    function render() {\n      requestAnimationFrame(render); // required if controls.enableDamping or controls.autoRotate are set to true\n\n      controls.update();\n      renderer.render(scene, camera);\n    } //---------grid above--------//\n    // const table = [\n    //   \"Two Sum\",\n    //   \"Add Two Numbers\"\n    // ];\n    // const difficultyLevel = [\"Easy\", \"Medium\"];\n    // var scene = new THREE.Scene();\n    // var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n    // const objects = [];\n    // const targets = { table: [], sphere: [], helix: [], grid: [] }\n    // for ( let i = 0; i < table.length; i += 1 ) {\n    // \t\t\tconst element = document.createElement( 'div' );\n    // \t\t\telement.className = 'element';\n    // \t\t\telement.style.backgroundColor = 'rgba(0,127,127,' + ( Math.random() * 0.5 + 0.25 ) + ')';\n    // \t\t\tconst number = document.createElement( 'div' );\n    // \t\t\tnumber.className = 'number';\n    // \t\t\tnumber.textContent = i + 1;\n    // \t\t\telement.appendChild( number );\n    // \t\t\tconst symbol = document.createElement( 'div' );\n    // \t\t\tsymbol.className = 'symbol';\n    // \t\t\tsymbol.textContent = table[ i ];\n    // \t\t\telement.appendChild( symbol );\n    // \t\t\tconst details = document.createElement( 'div' );\n    // \t\t\tdetails.className = 'details';\n    // \t\t\tdetails.innerHTML = difficultyLevel[ i ] + '<br>';\n    // \t\t\telement.appendChild( details );\n    // \t\t\tconst objectCSS = new CSS3DObject( element );\n    // \t\t\tobjectCSS.position.x = i*40;\n    // \t\t\tobjectCSS.position.y = 10;\n    // \t\t\tobjectCSS.position.z = 1;\n    // \t\t\tscene.add( objectCSS );\n    // \t\t\tobjects.push( objectCSS );\n    // \t\t\t//\n    // \t\t\tconst object = new THREE.Object3D();\n    // \t\t\tobject.position.x = ( i * 10 ) ;\n    // \t\t\tobject.position.y = -( i * 10  ) ;\n    // \t\t\ttargets.table.push( object );\n    // \t\t}\n    //     //\n    // var renderer = new CSS3DRenderer();\n    // renderer.setSize( window.innerWidth, window.innerHeight );\n    // document.body.appendChild( renderer.domElement );\n    // camera.position.z = 300;\n    // var animate = function () {\n    //    renderer.render( scene, camera );\n    // };\n    // animate();\n    // === THREE.JS EXAMPLE CODE END ===\n\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 184,\n  columnNumber: 17\n}, this), rootElement);","map":{"version":3,"sources":["/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/index.js"],"names":["React","Component","ReactDOM","THREE","OrbitControls","App","componentDidMount","camera","scene","renderer","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","antialias","setSize","document","body","appendChild","domElement","controls","position","set","update","gridBackground","axesHelper","AxesHelper","add","origingeometry","BoxGeometry","originmaterial","MeshBasicMaterial","color","origin","Mesh","light","AmbientLight","mapsize","mapstep","j","i","boxgeometry","BoxBufferGeometry","translate","boxmaterial","MeshNormalMaterial","boxmesh","size","step","geometry","material","line","Geometry","LineBasicMaterial","vertices","push","Vector3","LineSegments","render","requestAnimationFrame","rootElement","getElementById"],"mappings":"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hBC,MAAAA,qBAAqB,CAACD,MAAD,CAArB,CADgB,CAGhB;;AACAtC,MAAAA,QAAQ,CAACG,MAAT;AACAhB,MAAAA,QAAQ,CAACmD,MAAT,CAAgBpD,KAAhB,EAAuBD,MAAvB;AACD,KAvHiB,CAyHlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACD;;AACDqD,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AA/KyB;;AAiL5B,MAAME,WAAW,GAAG5C,QAAQ,CAAC6C,cAAT,CAAwB,MAAxB,CAApB;AACA7D,QAAQ,CAAC0D,MAAT,eAAgB,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAAyBE,WAAzB","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\n\nclass App extends Component {\n  componentDidMount() {\n    // === THREE.JS CODE START ===\n    var camera, scene, renderer;\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(\n      45,\n      window.innerWidth / window.innerHeight,\n      1,\n      10000\n    );\n\n\n\n    renderer = new THREE.WebGLRenderer({ antialias: true } );\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    camera.position.set(0, 20, 100);\n    controls.update();\n    gridBackground();\n\n    function gridBackground() {\n      //plane x-y\n      // var plane = new THREE.Mesh(\n      //   new THREE.PlaneGeometry(2000, 2000, 1),\n      //   new THREE.MeshBasicMaterial({\n      //       color: \"grey\",\n      //       opacity: 0.3,\n      //       transparent:true\n      //   }));\n      // plane.rotation.set(-Math.PI/2,0,0);\n      // scene.add(plane);\n      //\n\n      //axes\n      const axesHelper = new THREE.AxesHelper( 20 );\n      scene.add( axesHelper );\n      const origingeometry = new THREE.BoxGeometry( 1, 1, 1 );\n      const originmaterial = new THREE.MeshBasicMaterial( {color: \"white\"} );\n      const origin = new THREE.Mesh( origingeometry, originmaterial );\n      scene.add( origin );\n      //\n\n      // grid alternative:\n      // const gridsize = 2000;\n      // const divisions = 20;\n\n      // const gridHelper = new THREE.GridHelper( gridsize, divisions );\n      // scene.add( gridHelper );\n      //\n\n      //ambient light\n      const light = new THREE.AmbientLight( 0xFBFBFB ); // white light\n      scene.add( light );\n\n      var mapsize = 600, mapstep = 40;\n      for (let j = - mapsize; j <= mapsize; j += mapstep) {\n        for (let i = - mapsize; i <= mapsize; i += mapstep) {\n\n          var boxgeometry = new THREE.BoxBufferGeometry(20,20,20);\n          boxgeometry.translate( i, 20 , j);\n          \n          var boxmaterial = new THREE.MeshNormalMaterial();\n      \n          var boxmesh = new THREE.Mesh( boxgeometry, boxmaterial );\n          scene.add( boxmesh );\n          // const box = new THREE.Box3();\n          // box.setFromCenterAndSize( new THREE.Vector3( i, 40, j ), new THREE.Vector3( 40, 40, 40 ) );\n          // const helper = new THREE.Box3Helper( box, 0xffff00 );\n          // scene.add( helper );\n        }\n    }\n\n\n\n\n      //grid\n      var size = 1000, step = 20;\n      var geometry, material, line;\n      for (let i = -size; i <= size; i += step) {\n        if ((i / step) % 2 == 0)\n        {\n            continue;\n        }\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"purple\"\n        });\n        geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n        geometry.vertices.push(new THREE.Vector3(size, 0, i));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n      }\n      for (let i = -size; i <= size; i += step) {\n        if ((i / step) % 2 == 0)\n        {\n            continue;\n        }\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"green\"\n        });\n        geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n        geometry.vertices.push(new THREE.Vector3(i, 0, size));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n      }\n      //grid\n\n      // call the render()\n      render();\n    }\n\n    function render() {\n      requestAnimationFrame(render);\n\n      // required if controls.enableDamping or controls.autoRotate are set to true\n      controls.update();\n      renderer.render(scene, camera);\n    }\n\n    //---------grid above--------//\n    // const table = [\n    //   \"Two Sum\",\n    //   \"Add Two Numbers\"\n    // ];\n    // const difficultyLevel = [\"Easy\", \"Medium\"];\n    // var scene = new THREE.Scene();\n    // var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n    // const objects = [];\n    // const targets = { table: [], sphere: [], helix: [], grid: [] }\n    // for ( let i = 0; i < table.length; i += 1 ) {\n    // \t\t\tconst element = document.createElement( 'div' );\n    // \t\t\telement.className = 'element';\n    // \t\t\telement.style.backgroundColor = 'rgba(0,127,127,' + ( Math.random() * 0.5 + 0.25 ) + ')';\n    // \t\t\tconst number = document.createElement( 'div' );\n    // \t\t\tnumber.className = 'number';\n    // \t\t\tnumber.textContent = i + 1;\n    // \t\t\telement.appendChild( number );\n    // \t\t\tconst symbol = document.createElement( 'div' );\n    // \t\t\tsymbol.className = 'symbol';\n    // \t\t\tsymbol.textContent = table[ i ];\n    // \t\t\telement.appendChild( symbol );\n    // \t\t\tconst details = document.createElement( 'div' );\n    // \t\t\tdetails.className = 'details';\n    // \t\t\tdetails.innerHTML = difficultyLevel[ i ] + '<br>';\n    // \t\t\telement.appendChild( details );\n    // \t\t\tconst objectCSS = new CSS3DObject( element );\n    // \t\t\tobjectCSS.position.x = i*40;\n    // \t\t\tobjectCSS.position.y = 10;\n    // \t\t\tobjectCSS.position.z = 1;\n    // \t\t\tscene.add( objectCSS );\n    // \t\t\tobjects.push( objectCSS );\n    // \t\t\t//\n    // \t\t\tconst object = new THREE.Object3D();\n    // \t\t\tobject.position.x = ( i * 10 ) ;\n    // \t\t\tobject.position.y = -( i * 10  ) ;\n    // \t\t\ttargets.table.push( object );\n    // \t\t}\n    //     //\n\n    // var renderer = new CSS3DRenderer();\n    // renderer.setSize( window.innerWidth, window.innerHeight );\n    // document.body.appendChild( renderer.domElement );\n    // camera.position.z = 300;\n\n    // var animate = function () {\n    //    renderer.render( scene, camera );\n    // };\n    // animate();\n    // === THREE.JS EXAMPLE CODE END ===\n  }\n  render() {\n    return <div />;\n  }\n}\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/ThreeViewTest.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\nimport \"./ThreeView.css\";\n\nclass Shape extends Component {\n  constructor(props) {\n    super(props);\n    this.animate = this.animate.bind(this);\n    this.addCube = this.addCube.bind(this);\n    this.initializeCamera = this.initializeCamera.bind(this);\n    this.initializeOrbits = this.initializeOrbits.bind(this);\n  }\n\n  componentDidMount() {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.renderer.setSize(width, height);\n    this.mount.appendChild(this.renderer.domElement);\n    this.initializeOrbits();\n    this.initializeCamera();\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\n    const material = new THREE.MeshBasicMaterial({\n      color: 0xFF00FF\n    });\n    this.cube = new THREE.Mesh(geometry, material);\n    this.scene.add(this.cube);\n    this.animate();\n  }\n\n  componentWillUnmount() {\n    cancelAnimationFrame(this.frameId);\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  initializeOrbits() {\n    this.controls.rotateSpeed = 1.0;\n    this.controls.zoomSpeed = 1.2;\n    this.controls.panSpeed = 0.8;\n  }\n\n  initializeCamera() {\n    this.camera.position.x = 0;\n    this.camera.position.y = 0;\n    this.camera.position.z = 4;\n  }\n\n  animate() {\n    this.frameId = window.requestAnimationFrame(this.animate);\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  addCube(cube) {\n    this.scene.add(cube);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"boardCanvas\",\n        style: {\n          width: \"80vw\",\n          height: \"40vw\"\n        },\n        ref: mount => {\n          this.mount = mount;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Shape;","map":{"version":3,"sources":["/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/ThreeViewTest.js"],"names":["React","Component","ReactDOM","THREE","OrbitControls","allQuestions","Shape","constructor","props","animate","bind","addCube","initializeCamera","initializeOrbits","componentDidMount","width","window","innerWidth","height","innerHeight","scene","Scene","camera","PerspectiveCamera","renderer","WebGLRenderer","antialias","controls","domElement","setSize","mount","appendChild","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","add","componentWillUnmount","cancelAnimationFrame","frameId","removeChild","rotateSpeed","zoomSpeed","panSpeed","position","x","y","z","requestAnimationFrame","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\nimport \"./ThreeView.css\";\n\nclass Shape extends Component {\n  constructor(props) {\n    super(props);\n    this.animate = this.animate.bind(this);\n    this.addCube = this.addCube.bind(this);\n    this.initializeCamera = this.initializeCamera.bind(this);\n    this.initializeOrbits = this.initializeOrbits.bind(this);\n  }\ncomponentDidMount() {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(\n        45,\n        window.innerWidth / window.innerHeight,\n        1,\n        10000\n    );\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.renderer.setSize(width, height);\n    this.mount.appendChild(this.renderer.domElement);\n    this.initializeOrbits();\n    this.initializeCamera();\n    \n    const geometry = new THREE.BoxGeometry( 1, 1, 1 );\n    const material = new THREE.MeshBasicMaterial( { color: 0xFF00FF } );\n    this.cube = new THREE.Mesh( geometry, material );\n    this.scene.add( this.cube );\n    this.animate();\n  }\ncomponentWillUnmount() {\n    cancelAnimationFrame(this.frameId);\n    this.mount.removeChild(this.renderer.domElement);\n  }\ninitializeOrbits() {\n    this.controls.rotateSpeed = 1.0;\n    this.controls.zoomSpeed = 1.2;\n    this.controls.panSpeed = 0.8;\n  }\ninitializeCamera() {\n    this.camera.position.x = 0;\n    this.camera.position.y = 0;\n    this.camera.position.z = 4;\n  }\nanimate() {\n    this.frameId = window.requestAnimationFrame(this.animate);\n    this.renderer.render(this.scene, this.camera);\n  }\n\naddCube(cube) {\n    this.scene.add(cube);\n  }\nrender() {\n    return (\n      <div>\n        <div\n          id=\"boardCanvas\"\n          style={{ width: \"80vw\", height: \"40vw\" }}\n          ref={mount => {\n            this.mount = mount;\n          }}\n        />\n      </div>\n    );\n  }\n}\nexport default Shape;"]},"metadata":{},"sourceType":"module"}
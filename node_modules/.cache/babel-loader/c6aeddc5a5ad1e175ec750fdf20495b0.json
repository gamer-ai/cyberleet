{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/ThreeViewer.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\nimport \"./ThreeView.css\";\n\nclass ThreeView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questionName: ''\n    };\n  }\n\n  componentDidMount() {\n    // --- three.js applied here ---\n    window.addEventListener(\"resize\", onWindowResize, false);\n    window.addEventListener('mousemove', onMouseMove, false);\n    var worldsize = 6000;\n    var camera, scene, renderer;\n    scene = new THREE.Scene(); // scene.background = new THREE.Color( 0xf0f0f0 );\n\n    camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);\n    renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight); // renderer.setPixelRatio(window.devicePixelRatio);\n    // document.body.appendChild(renderer.domElement);\n\n    this.mount.appendChild(renderer.domElement);\n    var canvas1, context1, texture1;\n    var sprite1;\n    canvas1 = document.createElement('canvas');\n    context1 = canvas1.getContext('2d');\n    context1.font = \"10px Arial\";\n    context1.fillStyle = \"rgba(0,0,0,0.95)\";\n    context1.fillText('Now ... Explore the Cyber Leet', 0, 30);\n    texture1 = new THREE.Texture(canvas1);\n    texture1.minFilter = THREE.LinearMipMapNearestFilter;\n    texture1.magFilter = THREE.LinearFilter;\n    texture1.needsUpdate = true; ////////////////////////////////////////\n\n    var spriteMaterial = new THREE.SpriteMaterial({\n      map: texture1\n    });\n    spriteMaterial.depthTest = false;\n    sprite1 = new THREE.Sprite(spriteMaterial);\n    sprite1.scale.set(400, 400, 1.0);\n    sprite1.position.set(200, 200, 400);\n    scene.add(sprite1);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    camera.position.set(0, 2000, 1500);\n    controls.update(); // raycasting + mouse movement tracking\n\n    const raycaster = new THREE.Raycaster();\n    const mouse = new THREE.Vector2();\n    let INTERSECTED;\n    var cubesToBePicked = [];\n    gridPlane();\n    blocksInitial(); //axes();\n\n    render();\n\n    function axes() {\n      //axes + origin (optional)\n      const axesHelper = new THREE.AxesHelper(20);\n      scene.add(axesHelper);\n      const origingeometry = new THREE.BoxGeometry(1, 1, 1);\n      const originmaterial = new THREE.MeshBasicMaterial({\n        color: \"white\"\n      });\n      const origin = new THREE.Mesh(origingeometry, originmaterial);\n      scene.add(origin);\n    }\n\n    function gridPlane() {\n      //grid + background plane\n      var plane = new THREE.Mesh(new THREE.PlaneGeometry(worldsize, worldsize, 1), new THREE.MeshBasicMaterial({\n        color: \"grey\",\n        opacity: 0.3,\n        transparent: true\n      }));\n      plane.rotation.set(-Math.PI / 2, 0, 0);\n      scene.add(plane); //grid\n\n      var size = 3000,\n          step = 40;\n      var geometry, material, line;\n\n      for (let i = -size; i <= size; i += step) {\n        if (i / step % 2 === 0) {\n          continue;\n        }\n\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"purple\"\n        });\n        geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n        geometry.vertices.push(new THREE.Vector3(size, 0, i));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n      }\n\n      for (let i = -size; i <= size; i += step) {\n        if (i / step % 2 === 0) {\n          continue;\n        }\n\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n          color: \"green\"\n        });\n        geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n        geometry.vertices.push(new THREE.Vector3(i, 0, size));\n        line = new THREE.LineSegments(geometry, material);\n        scene.add(line);\n      }\n    }\n\n    function blocksInitial() {\n      // blocks\n      var offset = 2000,\n          side = 50,\n          sidegap = 80;\n\n      for (let i = 0; i < allQuestions.length; i += 1) {\n        var questionIndex = Number(allQuestions[i][\"id\"]) - 1;\n        var bottommaterial;\n\n        if (allQuestions[i][\"difficulty\"] === \"1\") {\n          bottommaterial = new THREE.MeshBasicMaterial({\n            color: 0x00cc00\n          });\n        } else if (allQuestions[i][\"difficulty\"] === \"2\") {\n          bottommaterial = new THREE.MeshBasicMaterial({\n            color: 0xff9900\n          });\n        } else {\n          bottommaterial = new THREE.MeshBasicMaterial({\n            color: 0xD63333\n          });\n        }\n\n        var bottomgeometry = new THREE.BoxGeometry(60, 20, 60);\n        var row = Math.floor(questionIndex / side);\n        var col = questionIndex % side;\n        bottomgeometry.translate(col * sidegap - offset, 10, row * sidegap - offset);\n        var bottommesh = new THREE.Mesh(bottomgeometry, bottommaterial);\n        bottommesh.name = allQuestions[i][\"name\"];\n        scene.add(bottommesh);\n        cubesToBePicked.push(bottommesh);\n      }\n    }\n\n    function onWindowResize() {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    function render() {\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(cubesToBePicked);\n\n      if (intersects.length > 0) {\n        if (intersects[0].object != INTERSECTED) {\n          if (INTERSECTED) INTERSECTED.material.color.setHex(INTERSECTED.currentHex);\n          INTERSECTED = intersects[0].object;\n          INTERSECTED.currentHex = INTERSECTED.material.color.getHex();\n          INTERSECTED.material.color.setHex(0xFF00FF);\n\n          if (intersects[0].object.name) {\n            context1.clearRect(0, 0, 640, 480);\n            var message = intersects[0].object.name;\n            var metrics = context1.measureText(message);\n            var width = metrics.width;\n            context1.fillStyle = \"rgba(255,255,255,1)\"; // white filler\n\n            context1.fillRect(2, 2, width + 4, 10);\n            context1.fillStyle = \"rgba(0,0,0,1)\"; // text color\n\n            context1.fillText(message, 4, 10);\n            texture1.needsUpdate = true;\n          } else {\n            context1.clearRect(0, 0, 300, 300);\n            texture1.needsUpdate = true;\n          }\n        }\n      } else //no intesections\n        {\n          if (INTERSECTED) {\n            INTERSECTED.material.color.setHex(INTERSECTED.currentHex);\n          }\n\n          INTERSECTED = null;\n          context1.clearRect(0, 0, 300, 300);\n          texture1.needsUpdate = true;\n        }\n\n      requestAnimationFrame(render);\n      controls.update();\n      renderer.render(scene, camera);\n    }\n\n    function onMouseMove(event) {\n      event.preventDefault();\n      mouse.x = event.clientX / window.innerWidth * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n      var vector = new THREE.Vector3(mouse.x, mouse.y, 0.5);\n      vector.unproject(camera);\n      var dir = vector.sub(camera.position).normalize();\n      var distance = -camera.position.z / dir.z;\n      var pos = camera.position.clone().add(dir.multiplyScalar(distance));\n      sprite1.position.copy(pos);\n    } // --- three.js parts end ---\n\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"floatingButton\",\n        className: \"btn orange\",\n        children: [\"CYBER LEET_ : \", this.state.questionName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"ThreeView\",\n        ref: mount => {\n          this.mount = mount;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ThreeView;","map":{"version":3,"sources":["/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/ThreeViewer.js"],"names":["React","Component","ReactDOM","THREE","OrbitControls","allQuestions","ThreeView","constructor","props","state","questionName","componentDidMount","window","addEventListener","onWindowResize","onMouseMove","worldsize","camera","scene","renderer","Scene","PerspectiveCamera","innerWidth","innerHeight","WebGLRenderer","antialias","setSize","mount","appendChild","domElement","canvas1","context1","texture1","sprite1","document","createElement","getContext","font","fillStyle","fillText","Texture","minFilter","LinearMipMapNearestFilter","magFilter","LinearFilter","needsUpdate","spriteMaterial","SpriteMaterial","map","depthTest","Sprite","scale","set","position","add","controls","update","raycaster","Raycaster","mouse","Vector2","INTERSECTED","cubesToBePicked","gridPlane","blocksInitial","render","axes","axesHelper","AxesHelper","origingeometry","BoxGeometry","originmaterial","MeshBasicMaterial","color","origin","Mesh","plane","PlaneGeometry","opacity","transparent","rotation","Math","PI","size","step","geometry","material","line","i","Geometry","LineBasicMaterial","vertices","push","Vector3","LineSegments","offset","side","sidegap","length","questionIndex","Number","bottommaterial","bottomgeometry","row","floor","col","translate","bottommesh","name","aspect","updateProjectionMatrix","setFromCamera","intersects","intersectObjects","object","setHex","currentHex","getHex","clearRect","message","metrics","measureText","width","fillRect","requestAnimationFrame","event","preventDefault","x","clientX","y","clientY","vector","unproject","dir","sub","normalize","distance","z","pos","clone","multiplyScalar","copy"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\nimport \"./ThreeView.css\"\n\nclass ThreeView extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {questionName: ''}\n        \n    }\n    \n    \n    componentDidMount() {\n        // --- three.js applied here ---\n        window.addEventListener(\"resize\", onWindowResize, false);\n        window.addEventListener('mousemove', onMouseMove, false);\n        var worldsize = 6000;\n        var camera, scene, renderer;\n        scene = new THREE.Scene();\n        // scene.background = new THREE.Color( 0xf0f0f0 );\n        camera = new THREE.PerspectiveCamera(\n            45,\n            window.innerWidth / window.innerHeight,\n            1,\n            10000\n        );\n        renderer = new THREE.WebGLRenderer({ antialias: true});\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        // renderer.setPixelRatio(window.devicePixelRatio);\n\n        // document.body.appendChild(renderer.domElement);\n        this.mount.appendChild(renderer.domElement);\n        var canvas1,context1, texture1;\n        var sprite1;\n\n        canvas1 = document.createElement('canvas');\n        context1 = canvas1.getContext('2d');\n        context1.font = \"10px Arial\";\n        context1.fillStyle = \"rgba(0,0,0,0.95)\";\n        context1.fillText('Now ... Explore the Cyber Leet', 0, 30);\n        texture1 = new THREE.Texture(canvas1)\n        texture1.minFilter = THREE.LinearMipMapNearestFilter;\n        texture1.magFilter = THREE.LinearFilter;\n        texture1.needsUpdate = true;\n        ////////////////////////////////////////\n        var spriteMaterial = new THREE.SpriteMaterial( { map: texture1} );\n        spriteMaterial.depthTest = false;\n        sprite1 = new THREE.Sprite( spriteMaterial );\n        sprite1.scale.set(400, 400,1.0);\n        sprite1.position.set( 200, 200, 400 );\n        scene.add( sprite1 );\t\n\n        const controls = new OrbitControls(camera, renderer.domElement);\n        camera.position.set(0, 2000, 1500);\n        controls.update();\n\n        // raycasting + mouse movement tracking\n        const raycaster = new THREE.Raycaster();\n        const mouse = new THREE.Vector2();\n        let INTERSECTED;\n        var cubesToBePicked = [];\n        gridPlane();\n        blocksInitial();\n        //axes();\n        render();\n\n        function axes() {\n            //axes + origin (optional)\n            const axesHelper = new THREE.AxesHelper(20);\n            scene.add(axesHelper);\n            const origingeometry = new THREE.BoxGeometry(1, 1, 1);\n            const originmaterial = new THREE.MeshBasicMaterial({ color: \"white\" });\n            const origin = new THREE.Mesh(origingeometry, originmaterial);\n            scene.add(origin);\n        }\n\n        function gridPlane() {\n            //grid + background plane\n            var plane = new THREE.Mesh(\n                new THREE.PlaneGeometry(worldsize, worldsize, 1),\n                new THREE.MeshBasicMaterial({\n                    color: \"grey\",\n                    opacity: 0.3,\n                    transparent: true,\n                })\n            );\n            plane.rotation.set(-Math.PI / 2, 0, 0);\n            scene.add(plane);\n            //grid\n            var size = 3000,\n                step = 40;\n            var geometry, material, line;\n            for (let i = -size; i <= size; i += step) {\n                if ((i / step) % 2 === 0) {\n                    continue;\n                }\n                geometry = new THREE.Geometry();\n                material = new THREE.LineBasicMaterial({\n                    color: \"purple\",\n                });\n                geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n                geometry.vertices.push(new THREE.Vector3(size, 0, i));\n                line = new THREE.LineSegments(geometry, material);\n                scene.add(line);\n            }\n            for (let i = -size; i <= size; i += step) {\n                if ((i / step) % 2 === 0) {\n                    continue;\n                }\n                geometry = new THREE.Geometry();\n                material = new THREE.LineBasicMaterial({\n                    color: \"green\",\n                });\n                geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n                geometry.vertices.push(new THREE.Vector3(i, 0, size));\n                line = new THREE.LineSegments(geometry, material);\n                scene.add(line);\n            }\n        }\n\n        function blocksInitial() {\n            // blocks\n            var offset = 2000,\n                side = 50,\n                sidegap = 80;\n            for (let i = 0; i < allQuestions.length; i += 1) {\n                var questionIndex = Number(allQuestions[i][\"id\"]) - 1;\n                var bottommaterial;\n                if (allQuestions[i][\"difficulty\"] === \"1\") {\n                    bottommaterial = new THREE.MeshBasicMaterial({ color: 0x00cc00 });\n                } else if (allQuestions[i][\"difficulty\"] === \"2\") {\n                    bottommaterial = new THREE.MeshBasicMaterial({ color: 0xff9900 });\n                } else {\n                    bottommaterial = new THREE.MeshBasicMaterial({ color: 0xD63333 });\n                }\n                var bottomgeometry = new THREE.BoxGeometry(60, 20, 60);\n                var row = Math.floor(questionIndex / side);\n                var col = questionIndex % side;\n                bottomgeometry.translate(\n                    col * sidegap - offset,\n                    10,\n                    row * sidegap - offset\n                );\n                var bottommesh = new THREE.Mesh(bottomgeometry, bottommaterial);\n                bottommesh.name = allQuestions[i][\"name\"];\n                scene.add(bottommesh);\n                cubesToBePicked.push(bottommesh);\n\n            }\n        }\n\n        function onWindowResize() {\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(window.innerWidth, window.innerHeight);\n        }\n\n        function render() {\n            raycaster.setFromCamera(mouse, camera);\n            const intersects = raycaster.intersectObjects(cubesToBePicked);\n            if (intersects.length > 0) {\n                if (intersects[0].object != INTERSECTED) {\n                    if (INTERSECTED)\n                        INTERSECTED.material.color.setHex(INTERSECTED.currentHex);\n                    INTERSECTED = intersects[0].object;\n                    INTERSECTED.currentHex = INTERSECTED.material.color.getHex();\n                    INTERSECTED.material.color.setHex(0xFF00FF);\n                    if ( intersects[ 0 ].object.name )\n                    {\n              \n                        context1.clearRect(0,0,640,480);\n                        var message = intersects[ 0 ].object.name;\n                        var metrics = context1.measureText(message);\n                        var width = metrics.width;\n                        context1.fillStyle = \"rgba(255,255,255,1)\"; // white filler\n                        context1.fillRect( 2,2, width + 4,10);\n                        context1.fillStyle = \"rgba(0,0,0,1)\"; // text color\n                        context1.fillText( message, 4,10 );                        \n                        texture1.needsUpdate = true;\n                    }\n                    else\n                    {\n                        context1.clearRect(0,0,300,300);\n                        texture1.needsUpdate = true;\n                    }\n                }\n            }\n            else //no intesections\n            {\n                if (INTERSECTED) {\n                    INTERSECTED.material.color.setHex(INTERSECTED.currentHex);\n                }\n                INTERSECTED = null;\n                context1.clearRect(0,0,300,300);\n                texture1.needsUpdate = true;\n            }\n\n            requestAnimationFrame(render);\n            controls.update();\n            renderer.render(scene, camera);\n        }\n     \n        function onMouseMove(event) {\n            event.preventDefault();\n            mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n            mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;\n            var vector = new THREE.Vector3(mouse.x, mouse.y, 0.5);\n            vector.unproject( camera );\n            var dir = vector.sub( camera.position ).normalize();\n            var distance = - camera.position.z / dir.z;\n            var pos = camera.position.clone().add( dir.multiplyScalar( distance ) );\n            sprite1.position.copy(pos);\n \n        }\n        // --- three.js parts end ---\n\n    }\n\n\n    render() {\n        return (\n            \n            <div>\n            <button id = \"floatingButton\" className=\"btn orange\">CYBER LEET_ : {this.state.questionName}</button>\n            <div id = \"ThreeView\" ref={mount => {\n                this.mount = mount;\n              }}>\n            \n            </div>\n\n \n            </div>\n        );\n    }\n}\nexport default ThreeView;\n\n"]},"metadata":{},"sourceType":"module"}
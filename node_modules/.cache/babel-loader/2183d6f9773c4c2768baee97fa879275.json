{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/ThreeViewTest.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\nimport \"./ThreeView.css\";\n\nclass Shape extends Component {\n  constructor(props) {\n    super(props);\n    this.animate = this.animate.bind(this);\n    this.addCube = this.addCube.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this);\n    this.onWindowResize = this.onWindowResize.bind(this);\n    this.initializeCamera = this.initializeCamera.bind(this);\n    this.initializeOrbits = this.initializeOrbits.bind(this);\n  }\n\n  componentDidMount() {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.update();\n    this.renderer.setSize(width, height);\n    this.mount.appendChild(this.renderer.domElement);\n    this.initializeOrbits();\n    this.initializeCamera();\n    this.cubesToBePicked = [];\n    this.raycaster = new THREE.Raycaster();\n    this.mouse = new THREE.Vector2();\n    this.INTERSECTED = null;\n    var worldsize = 6000;\n    this.plane = new THREE.Mesh(new THREE.PlaneGeometry(worldsize, worldsize, 1), new THREE.MeshBasicMaterial({\n      color: \"grey\",\n      opacity: 0.3,\n      transparent: true\n    }));\n    this.plane.rotation.set(-Math.PI / 2, 0, 0);\n    this.scene.add(this.plane);\n    var size = 3000,\n        step = 40;\n    var geometry, material, line;\n\n    for (let i = -size; i <= size; i += step) {\n      if (i / step % 2 === 0) {\n        continue;\n      }\n\n      geometry = new THREE.Geometry();\n      material = new THREE.LineBasicMaterial({\n        color: \"purple\"\n      });\n      geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n      geometry.vertices.push(new THREE.Vector3(size, 0, i));\n      this.line = new THREE.LineSegments(geometry, material);\n      this.scene.add(this.line);\n    }\n\n    for (let i = -size; i <= size; i += step) {\n      if (i / step % 2 === 0) {\n        continue;\n      }\n\n      geometry = new THREE.Geometry();\n      material = new THREE.LineBasicMaterial({\n        color: \"green\"\n      });\n      geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n      geometry.vertices.push(new THREE.Vector3(i, 0, size));\n      this.line = new THREE.LineSegments(geometry, material);\n      this.scene.add(this.line);\n    }\n\n    var offset = 2000,\n        side = 50,\n        sidegap = 80;\n\n    for (let i = 0; i < allQuestions.length; i += 1) {\n      var questionIndex = Number(allQuestions[i][\"id\"]) - 1;\n      var bottommaterial;\n\n      if (allQuestions[i][\"difficulty\"] === \"1\") {\n        bottommaterial = new THREE.MeshBasicMaterial({\n          color: 0x00cc00\n        });\n      } else if (allQuestions[i][\"difficulty\"] === \"2\") {\n        bottommaterial = new THREE.MeshBasicMaterial({\n          color: 0xff9900\n        });\n      } else {\n        bottommaterial = new THREE.MeshBasicMaterial({\n          color: 0xD63333\n        });\n      }\n\n      var bottomgeometry = new THREE.BoxGeometry(60, 20, 60);\n      var row = Math.floor(questionIndex / side);\n      var col = questionIndex % side;\n      bottomgeometry.translate(col * sidegap - offset, 10, row * sidegap - offset);\n      this.bottommesh = new THREE.Mesh(bottomgeometry, bottommaterial);\n      this.bottommesh.name = allQuestions[i][\"name\"];\n      this.scene.add(this.bottommesh);\n      this.cubesToBePicked.push(this.bottommesh);\n    } // const geometry = new THREE.BoxGeometry( 1, 1, 1 );\n    // const material = new THREE.MeshBasicMaterial( { color: 0xFF00FF } );\n    // this.cube = new THREE.Mesh( geometry, material );\n    // this.scene.add( this.cube );\n\n\n    window.addEventListener(\"resize\", this.onWindowResize, false);\n    this.animate();\n  }\n\n  componentWillUnmount() {\n    cancelAnimationFrame(this.frameId);\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  onMouseMove(event) {\n    event.preventDefault();\n    this.mouse.x = event.clientX / window.innerWidth * 2 - 1;\n    this.mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n  }\n\n  onWindowResize() {\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n\n  initializeOrbits() {\n    this.controls.rotateSpeed = 1.0;\n    this.controls.zoomSpeed = 1.2;\n    this.controls.panSpeed = 0.8;\n  }\n\n  initializeCamera() {\n    this.camera.position.x = 0;\n    this.camera.position.y = 2000;\n    this.camera.position.z = 1500;\n    this.controls.update();\n  }\n\n  animate() {\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n    const intersects = this.raycaster.intersectObjects(this.cubesToBePicked);\n\n    if (intersects.length > 0) {\n      if (intersects[0].object != this.INTERSECTED) {\n        if (this.INTERSECTED) this.INTERSECTED.material.color.setHex(this.INTERSECTED.currentHex);\n        this.INTERSECTED = intersects[0].object;\n        this.INTERSECTED.currentHex = this.INTERSECTED.material.color.getHex();\n        this.INTERSECTED.material.color.setHex(0xFF00FF);\n      }\n    } else //no intesections\n      {\n        if (this.INTERSECTED) {\n          this.INTERSECTED.material.color.setHex(this.INTERSECTED.currentHex);\n        }\n\n        this.INTERSECTED = null;\n      }\n\n    this.frameId = window.requestAnimationFrame(this.animate);\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  addCube(cube) {\n    this.scene.add(cube);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"boardCanvas\",\n        style: {\n          width: \"80vw\",\n          height: \"40vw\"\n        },\n        ref: mount => {\n          this.mount = mount;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Shape;","map":{"version":3,"sources":["/Users/muyangguo/Desktop/webgl/WebglPrototype/cybergraph/src/ThreeViewTest.js"],"names":["React","Component","ReactDOM","THREE","OrbitControls","allQuestions","Shape","constructor","props","animate","bind","addCube","onMouseMove","onWindowResize","initializeCamera","initializeOrbits","componentDidMount","width","window","innerWidth","height","innerHeight","scene","Scene","camera","PerspectiveCamera","renderer","WebGLRenderer","antialias","controls","domElement","update","setSize","mount","appendChild","cubesToBePicked","raycaster","Raycaster","mouse","Vector2","INTERSECTED","worldsize","plane","Mesh","PlaneGeometry","MeshBasicMaterial","color","opacity","transparent","rotation","set","Math","PI","add","size","step","geometry","material","line","i","Geometry","LineBasicMaterial","vertices","push","Vector3","LineSegments","offset","side","sidegap","length","questionIndex","Number","bottommaterial","bottomgeometry","BoxGeometry","row","floor","col","translate","bottommesh","name","addEventListener","componentWillUnmount","cancelAnimationFrame","frameId","removeChild","event","preventDefault","x","clientX","y","clientY","aspect","updateProjectionMatrix","rotateSpeed","zoomSpeed","panSpeed","position","z","setFromCamera","intersects","intersectObjects","object","setHex","currentHex","getHex","requestAnimationFrame","render","cube"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"./OrbitControls.js\";\nimport allQuestions from \"./data/all.json\";\nimport \"./ThreeView.css\";\n\nclass Shape extends Component {\n  constructor(props) {\n    super(props);\n    this.animate = this.animate.bind(this);\n    this.addCube = this.addCube.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this);\n    this.onWindowResize = this.onWindowResize.bind(this);\n    this.initializeCamera = this.initializeCamera.bind(this);\n    this.initializeOrbits = this.initializeOrbits.bind(this);\n  }\ncomponentDidMount() {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(\n        45,\n        window.innerWidth / window.innerHeight,\n        1,\n        10000\n    );\n\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.update();\n    this.renderer.setSize(width, height);\n    this.mount.appendChild(this.renderer.domElement);\n    this.initializeOrbits();\n    this.initializeCamera();\n\n    this.cubesToBePicked = [];\n    this.raycaster = new THREE.Raycaster();\n    this.mouse = new THREE.Vector2();\n    this.INTERSECTED = null;\n    var worldsize = 6000;\n    this.plane = new THREE.Mesh(\n        new THREE.PlaneGeometry(worldsize, worldsize, 1),\n        new THREE.MeshBasicMaterial({\n            color: \"grey\",\n            opacity: 0.3,\n            transparent: true,\n        })\n    );\n    this.plane.rotation.set(-Math.PI / 2, 0, 0);\n    this.scene.add(this.plane);\n    var size = 3000,\n    step = 40;\n    var geometry, material, line;\n    for (let i = -size; i <= size; i += step) {\n        if ((i / step) % 2 === 0) {\n            continue;\n        }\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n            color: \"purple\",\n        });\n        geometry.vertices.push(new THREE.Vector3(-size, 0, i));\n        geometry.vertices.push(new THREE.Vector3(size, 0, i));\n        this.line = new THREE.LineSegments(geometry, material);\n        this.scene.add(this.line);\n    }\n    for (let i = -size; i <= size; i += step) {\n        if ((i / step) % 2 === 0) {\n            continue;\n        }\n        geometry = new THREE.Geometry();\n        material = new THREE.LineBasicMaterial({\n            color: \"green\",\n        });\n        geometry.vertices.push(new THREE.Vector3(i, 0, -size));\n        geometry.vertices.push(new THREE.Vector3(i, 0, size));\n        this.line = new THREE.LineSegments(geometry, material);\n        this.scene.add(this.line);\n    }\n\n    var offset = 2000,\n    side = 50,\n    sidegap = 80;\n    for (let i = 0; i < allQuestions.length; i += 1) {\n    var questionIndex = Number(allQuestions[i][\"id\"]) - 1;\n    var bottommaterial;\n    if (allQuestions[i][\"difficulty\"] === \"1\") {\n        bottommaterial = new THREE.MeshBasicMaterial({ color: 0x00cc00 });\n    } else if (allQuestions[i][\"difficulty\"] === \"2\") {\n        bottommaterial = new THREE.MeshBasicMaterial({ color: 0xff9900 });\n    } else {\n        bottommaterial = new THREE.MeshBasicMaterial({ color: 0xD63333 });\n    }\n    var bottomgeometry = new THREE.BoxGeometry(60, 20, 60);\n    var row = Math.floor(questionIndex / side);\n    var col = questionIndex % side;\n    bottomgeometry.translate(\n        col * sidegap - offset,\n        10,\n        row * sidegap - offset\n    );\n    this.bottommesh = new THREE.Mesh(bottomgeometry, bottommaterial);\n    this.bottommesh.name = allQuestions[i][\"name\"];\n    this.scene.add(this.bottommesh);\n    this.cubesToBePicked.push(this.bottommesh);\n\n}\n\n    // const geometry = new THREE.BoxGeometry( 1, 1, 1 );\n    // const material = new THREE.MeshBasicMaterial( { color: 0xFF00FF } );\n    // this.cube = new THREE.Mesh( geometry, material );\n    // this.scene.add( this.cube );\n    window.addEventListener(\"resize\", this.onWindowResize, false);\n\n    this.animate();\n  }\ncomponentWillUnmount() {\n    cancelAnimationFrame(this.frameId);\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\nonMouseMove(event) {\n    event.preventDefault();\n    this.mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n    this.mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;\n\n}\nonWindowResize() {\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n}\ninitializeOrbits() {\n    this.controls.rotateSpeed = 1.0;\n    this.controls.zoomSpeed = 1.2;\n    this.controls.panSpeed = 0.8;\n  }\ninitializeCamera() {\n    this.camera.position.x = 0;\n    this.camera.position.y = 2000;\n    this.camera.position.z = 1500;\n    this.controls.update();\n  }\nanimate() {\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n    const intersects = this.raycaster.intersectObjects(this.cubesToBePicked);\n    if (intersects.length > 0) {\n        if (intersects[0].object != this.INTERSECTED) {\n            if (this.INTERSECTED)\n                this.INTERSECTED.material.color.setHex(this.INTERSECTED.currentHex);\n            this.INTERSECTED = intersects[0].object;\n            this.INTERSECTED.currentHex = this.INTERSECTED.material.color.getHex();\n            this.INTERSECTED.material.color.setHex(0xFF00FF);\n        }\n    }\n    else //no intesections\n    {\n        if (this.INTERSECTED) {\n            this.INTERSECTED.material.color.setHex(this.INTERSECTED.currentHex);\n        }\n        this.INTERSECTED = null;\n\n    }\n    this.frameId = window.requestAnimationFrame(this.animate);\n    this.renderer.render(this.scene, this.camera);\n  }\n\naddCube(cube) {\n    this.scene.add(cube);\n  }\nrender() {\n    return (\n      <div>\n        <div\n          id=\"boardCanvas\"\n          style={{ width: \"80vw\", height: \"40vw\" }}\n          ref={mount => {\n            this.mount = mount;\n          }}\n        />\n      </div>\n    );\n  }\n}\nexport default Shape;"]},"metadata":{},"sourceType":"module"}